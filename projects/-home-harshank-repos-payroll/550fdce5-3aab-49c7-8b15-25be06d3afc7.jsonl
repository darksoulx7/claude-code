{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":"can u check the changes i have made on @src/pages/PayrollManagement/PTLWFConfigs.jsx file. now i need to make same changes in @src/pages/PayrollManagement/EmployeeConfigs.jsx file. so  give me the list of to do to implement then do the changes. i have added one css class .plwtconfig or something in @src/assets/scss/spreadsheet.scss file that also apply in EmployeeConfigs.jsx file"},"uuid":"aaf1ad2e-5382-46af-a491-e158713f2c17","timestamp":"2025-07-24T08:24:19.852Z"}
{"parentUuid":"aaf1ad2e-5382-46af-a491-e158713f2c17","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01Ej9v2sxB5qaEYvaT8GgGA6","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Looking at the changes in PTLWFConfigs.jsx, I can see several key improvements that need to be applied to EmployeeConfigs.jsx. Let me analyze both files and create a comprehensive todo list."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":59411,"cache_read_input_tokens":0,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRRXHPPU7XpS8RJ5STzEL","type":"assistant","uuid":"7b348081-2948-4d60-88af-e8b70805edd0","timestamp":"2025-07-24T08:24:27.827Z"}
{"parentUuid":"7b348081-2948-4d60-88af-e8b70805edd0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01Ej9v2sxB5qaEYvaT8GgGA6","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017TJSbbu2BK8wutUv7NEctc","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"pending","priority":"high"},{"id":"2","content":"Add calculateColumnWidths function with responsive breakpoints","status":"pending","priority":"high"},{"id":"3","content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high"},{"id":"4","content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high"},{"id":"5","content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"pending","priority":"medium"},{"id":"6","content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium"},{"id":"7","content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high"},{"id":"8","content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low"},{"id":"9","content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium"},{"id":"10","content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":59411,"cache_read_input_tokens":0,"output_tokens":624,"service_tier":"standard"}},"requestId":"req_011CRRXHPPU7XpS8RJ5STzEL","type":"assistant","uuid":"de318589-6751-4de8-acdf-b78bda29387e","timestamp":"2025-07-24T08:24:36.176Z"}
{"parentUuid":"de318589-6751-4de8-acdf-b78bda29387e","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017TJSbbu2BK8wutUv7NEctc","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"5610e3a3-3442-4d46-b3ee-2f5b168e9ef3","timestamp":"2025-07-24T08:24:36.235Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"pending","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"pending","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high","id":"4"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"pending","priority":"medium","id":"5"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"}]}}
{"parentUuid":"5610e3a3-3442-4d46-b3ee-2f5b168e9ef3","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01H3iR6ENGnsGx3bUW1t6dgT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"After analyzing both files, I can see that PTLWFConfigs.jsx has several significant improvements over EmployeeConfigs.jsx. The main changes include:\n\n1. **Dynamic window dimension detection** - PTLWFConfigs has responsive width calculations\n2. **Dynamic CSS injection** - Sophisticated CSS styling system with responsive breakpoints  \n3. **Column width responsiveness** - Adaptive column widths based on screen size\n4. **Modern spreadsheet implementation** - Direct use of Spreadsheet/Worksheet components instead of SpreadsheetContainer\n5. **Enhanced column handling** - Better column locking and initialization\n6. **CSS class consistency** - Uses `ps-ptlwfConfigs` class which should be `ps-employeeConfigs` for the EmployeeConfigs file\n\nI can also see that the CSS file has a `.ps-ptlwconfig` class (around line 67) that provides specific styling for the PTLWFConfigs component. We'll need to apply similar styling to EmployeeConfigs."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":1047,"cache_read_input_tokens":59411,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRRXJa2wvsCNAfvSFVDKf","type":"assistant","uuid":"4c28169f-9884-4cf2-a1a4-2e258ba34e0f","timestamp":"2025-07-24T08:24:44.207Z"}
{"parentUuid":"4c28169f-9884-4cf2-a1a4-2e258ba34e0f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01H3iR6ENGnsGx3bUW1t6dgT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_011y3n4e24p76wLY5hhYXkrt","name":"ExitPlanMode","input":{"plan":"# Plan: Apply PTLWFConfigs Improvements to EmployeeConfigs\n\n## Summary\nApply all the responsive design improvements, dynamic CSS injection, and modern spreadsheet implementation from PTLWFConfigs.jsx to EmployeeConfigs.jsx to ensure consistent user experience and functionality.\n\n## Tasks to Complete\n\n### High Priority Changes\n1. **Add responsive window dimension detection**\n   - Add useState for windowDimension tracking\n   - Add useEffect with resize event listener\n   - Add detectSize function\n\n2. **Implement dynamic column width calculation**\n   - Add calculateColumnWidths function with breakpoints for mobile, tablet, desktop\n   - Update baseColumns to use dynamic widths and add wrap: true\n\n3. **Add dynamic CSS injection system**\n   - Add comprehensive useEffect for jss_content styling\n   - Include responsive breakpoints and modern styling\n   - Implement dynamic height/width calculations\n\n4. **Modernize spreadsheet implementation**\n   - Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components\n   - Add missing imports (NoDataFound, Spreadsheet, Worksheet)\n   - Add spreadsheetRef reference\n\n### Medium Priority Changes\n5. **Enhance spreadsheet initialization**\n   - Update initializeSpreadsheet to handle column locking\n   - Add logic for non-titled columns\n\n6. **Fix event handler consistency**\n   - Update globalEventHandler parameter structure to match PTLWFConfigs\n\n7. **Update dependencies**\n   - Add windowDimension to processApiDataForSpreadsheet useEffect\n\n### Low Priority Changes  \n8. **CSS class consistency**\n   - Ensure proper CSS class naming in wrapper div\n\n## Expected Outcome\nEmployeeConfigs.jsx will have the same responsive behavior, dynamic styling, and modern spreadsheet implementation as PTLWFConfigs.jsx, providing a consistent user experience across both components."}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":1047,"cache_read_input_tokens":59411,"output_tokens":701,"service_tier":"standard"}},"requestId":"req_011CRRXJa2wvsCNAfvSFVDKf","type":"assistant","uuid":"ce9cceff-b64f-4d5d-8462-677fb66dfdfb","timestamp":"2025-07-24T08:24:53.232Z"}
{"parentUuid":"ce9cceff-b64f-4d5d-8462-677fb66dfdfb","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"The user doesn't want to proceed with this tool use. The tool use was rejected (eg. if it was a file edit, the new_string was NOT written to the file). STOP what you are doing and wait for the user to tell you how to proceed.","is_error":true,"tool_use_id":"toolu_011y3n4e24p76wLY5hhYXkrt"}]},"uuid":"50537c73-5845-421b-88dd-4fa0756cfb22","timestamp":"2025-07-24T08:26:21.182Z","toolUseResult":"Error: The user doesn't want to proceed with this tool use. The tool use was rejected (eg. if it was a file edit, the new_string was NOT written to the file). STOP what you are doing and wait for the user to tell you how to proceed."}
{"parentUuid":"50537c73-5845-421b-88dd-4fa0756cfb22","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"type":"text","text":"[Request interrupted by user for tool use]"}]},"uuid":"26d4c9d9-b946-4138-8d2d-0b3875506d01","timestamp":"2025-07-24T08:26:21.273Z"}
{"parentUuid":"26d4c9d9-b946-4138-8d2d-0b3875506d01","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":"Plan: Apply PTLWFConfigs Improvements to EmployeeConfigs                                           │\n     │                                                                                                    │\n     │ Summary                                                                                            │\n     │                                                                                                    │\n     │ Apply all the responsive design improvements, dynamic CSS injection, and modern spreadsheet        │\n     │ implementation from PTLWFConfigs.jsx to EmployeeConfigs.jsx to ensure consistent user experience   │\n     │ and functionality.                                                                                 │\n     │                                                                                                    │\n     │ Tasks to Complete                                                                                  │\n     │                                                                                                    │\n     │ High Priority Changes                                                                              │\n     │                                                                                                    │\n     │ 1. Add responsive window dimension detection                                                       │\n     │   - Add useState for windowDimension tracking                                                      │\n     │   - Add useEffect with resize event listener                                                       │\n     │   - Add detectSize function                                                                        │\n     │ 2. Implement dynamic column width calculation                                                      │\n     │   - Add calculateColumnWidths function with breakpoints for mobile, tablet, desktop                │\n     │   - Update baseColumns to use dynamic widths and add wrap: true                                    │\n     │ 3. Add dynamic CSS injection system                                                                │\n     │   - Add comprehensive useEffect for jss_content styling                                            │\n     │   - Include responsive breakpoints and modern styling                                              │\n     │   - Implement dynamic height/width calculations                                                    │\n     │ 4. Modernize spreadsheet implementation                                                            │\n     │   - Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components                      │\n     │   - Add missing imports (NoDataFound, Spreadsheet, Worksheet)                                      │\n     │   - Add spreadsheetRef reference                                                                   │\n     │                                                                                                    │\n     │ Medium Priority Changes                                                                            │\n     │                                                                                                    │\n     │ 5. Enhance spreadsheet initialization                                                              │\n     │   - Update initializeSpreadsheet to handle column locking                                          │\n     │   - Add logic for non-titled columns                                                               │\n     │ 6. Fix event handler consistency                                                                   │\n     │   - Update globalEventHandler parameter structure to match PTLWFConfigs                            │\n     │ 7. Update dependencies                                                                             │\n     │   - Add windowDimension to processApiDataForSpreadsheet useEffect                                  │\n     │                                                                                                    │\n     │ Low Priority Changes                                                                               │\n     │                                                                                                    │\n     │ 8. CSS class consistency                                                                           │\n     │   - Ensure proper CSS class naming in wrapper div                                                  │\n     │                                                                                                    │\n     │ Expected Outcome                                                                                   │\n     │                                                                                                    │\n     │ EmployeeConfigs.jsx will have the same responsive behavior, dynamic styling, and modern spreadsheet│\n     │  implementation as PTLWFConfigs.jsx, providing a consistent user experience across both components. this is good planning just make sure u did not change anything except from @src/pages/PayrollManagement/EmployeeConfigs.jsx file."},"uuid":"48b43e63-cc83-4d13-b6a2-e8a5e50cbb4b","timestamp":"2025-07-24T08:27:25.213Z"}
{"parentUuid":"48b43e63-cc83-4d13-b6a2-e8a5e50cbb4b","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01DyJX6QW5SQMogNL3V5VG2o","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfect! I understand you want to keep the changes focused only on the EmployeeConfigs.jsx file. Let me update the todo list to reflect this and start implementing the changes."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":17380,"cache_read_input_tokens":60458,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRRXX3HNnjodFnzo4zUC3","type":"assistant","uuid":"ea46d2df-9b53-4aaf-8db3-fbc7fec782b4","timestamp":"2025-07-24T08:27:32.527Z"}
{"parentUuid":"ea46d2df-9b53-4aaf-8db3-fbc7fec782b4","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01DyJX6QW5SQMogNL3V5VG2o","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01GH8GCqcq4iMD451CGXVvbv","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"in_progress","priority":"high"},{"id":"2","content":"Add calculateColumnWidths function with responsive breakpoints","status":"pending","priority":"high"},{"id":"3","content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high"},{"id":"4","content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high"},{"id":"5","content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"pending","priority":"medium"},{"id":"6","content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium"},{"id":"7","content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high"},{"id":"8","content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low"},{"id":"9","content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium"},{"id":"10","content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":17380,"cache_read_input_tokens":60458,"output_tokens":484,"service_tier":"standard"}},"requestId":"req_011CRRXX3HNnjodFnzo4zUC3","type":"assistant","uuid":"5a8cf9a3-a102-4654-b630-12dfb3390b06","timestamp":"2025-07-24T08:27:40.551Z"}
{"parentUuid":"5a8cf9a3-a102-4654-b630-12dfb3390b06","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01GH8GCqcq4iMD451CGXVvbv","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"9a424f70-5caf-4f8d-a8a4-604cf54f9ad9","timestamp":"2025-07-24T08:27:40.597Z","toolUseResult":{"oldTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"pending","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"pending","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high","id":"4"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"pending","priority":"medium","id":"5"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"}],"newTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"in_progress","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"pending","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high","id":"4"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"pending","priority":"medium","id":"5"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"}]}}
{"parentUuid":"9a424f70-5caf-4f8d-a8a4-604cf54f9ad9","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01RuNwvVqAZwWhXKL2KN4uyC","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now I'll start implementing the changes. First, let me add the window dimension detection functionality:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1043,"cache_read_input_tokens":77838,"output_tokens":2,"service_tier":"standard"}},"requestId":"req_011CRRXYFrTBHdzq5oUd35ah","type":"assistant","uuid":"a23e88d1-c31e-4eeb-a01a-6777233d7fdc","timestamp":"2025-07-24T08:27:46.128Z"}
{"parentUuid":"a23e88d1-c31e-4eeb-a01a-6777233d7fdc","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01RuNwvVqAZwWhXKL2KN4uyC","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Vw3GBtJ3hN1UM4wDj4kFT5","name":"MultiEdit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","edits":[{"old_string":"import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";","new_string":"import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";"},{"old_string":"  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);","new_string":"  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1043,"cache_read_input_tokens":77838,"output_tokens":514,"service_tier":"standard"}},"requestId":"req_011CRRXYFrTBHdzq5oUd35ah","type":"assistant","uuid":"48d5e499-26c9-4fd6-b46f-f0ee28179946","timestamp":"2025-07-24T08:27:52.279Z"}
{"parentUuid":"48d5e499-26c9-4fd6-b46f-f0ee28179946","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Vw3GBtJ3hN1UM4wDj4kFT5","type":"tool_result","content":"Applied 2 edits to /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx:\n1. Replaced \"import SpreadsheetContainer from \"../../Components...\" with \"import SpreadsheetContainer from \"../../Components...\"\n2. Replaced \"  const isRestoringDropdownValueRef = useRef(false...\" with \"  const isRestoringDropdownValueRef = useRef(false...\""}]},"uuid":"70e64937-6d37-4c5f-923f-5f486f6fbb31","timestamp":"2025-07-24T08:27:56.114Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","edits":[{"old_string":"import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";","new_string":"import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";","replace_all":false},{"old_string":"  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);","new_string":"  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end","replace_all":false}],"originalFileContents":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => [\n    { title: \"Emp ID\", width: 150, readOnly: true, filter: true },\n    { title: \"Name\", width: 150, readOnly: true, filter: true },\n    { title: \"Department\", width: 150, readOnly: true, filter: true },\n    { title: \"Designation\", width: 150, readOnly: true, filter: true },\n    { title: \"Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN , source: TOGGLE_OPTIONS },\n    { title: \"Bonus Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Bonus Reason\", width: 150 },\n    { title: \"Repeat Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Incentive Reason\", width: 150 },\n  ], []);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":12,"oldLines":6,"newStart":12,"newLines":8,"lines":[" import _ from \"lodash\";"," import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";"," import { toast } from \"react-toastify\";","+import { NoDataFound } from \"../../Components/Common/NoDataFound\";","+import { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";"," "," const THEME = {","   ACTIVE_COLOR: \"#039855\","]},{"oldStart":100,"oldLines":7,"newStart":102,"newLines":27,"lines":["   const [pageHeader, setPageHeader] = useState(null);","   const isRestoringDropdownValueRef = useRef(false);","   const prevEmpConfigsDataRef = useRef(null);","+  const spreadsheetRef = useRef(null);"," ","+  //  dynamic window dimension detection start","+  const [windowDimension, detectHW] = useState({","+    innerWidth: window.innerWidth,","+    innerHeight: window.innerHeight","+  })","+  const detectSize = () => {","+    detectHW({","+      innerWidth: window.innerWidth,","+      innerHeight: window.innerHeight","+    })","+  }","+  useEffect(() => {","+    window.addEventListener('resize', detectSize)","+    return () => {","+      window.removeEventListener('resize', detectSize)","+    }","+  }, [])","+  //  dynamic window dimension detection end","+","   const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","     empConfigsData: state.Payroll.empConfigsData,","     isEmpConfigsloading: state.Payroll.isEmpConfigsloading,"]}],"userModified":false}}
{"parentUuid":"70e64937-6d37-4c5f-923f-5f486f6fbb31","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_013n4Rv7B4ZBSMXQX5Uaqb3P","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01S55bNaFEcwHAEsbtg7sjTa","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high"},{"id":"2","content":"Add calculateColumnWidths function with responsive breakpoints","status":"in_progress","priority":"high"},{"id":"3","content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high"},{"id":"4","content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high"},{"id":"5","content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium"},{"id":"6","content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium"},{"id":"7","content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high"},{"id":"8","content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low"},{"id":"9","content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium"},{"id":"10","content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":612,"cache_read_input_tokens":78881,"output_tokens":445,"service_tier":"standard"}},"requestId":"req_011CRRXZRMySRgtqzGzBaCeS","type":"assistant","uuid":"332123dc-2bfa-4c4e-be91-5a3a260537fd","timestamp":"2025-07-24T08:28:11.551Z"}
{"parentUuid":"332123dc-2bfa-4c4e-be91-5a3a260537fd","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01S55bNaFEcwHAEsbtg7sjTa","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"2c5b9da2-c598-440e-bc88-d53369612154","timestamp":"2025-07-24T08:28:11.597Z","toolUseResult":{"oldTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"in_progress","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"pending","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high","id":"4"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"pending","priority":"medium","id":"5"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"}],"newTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high","id":"1"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium","id":"5"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"in_progress","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high","id":"4"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"}]}}
{"parentUuid":"2c5b9da2-c598-440e-bc88-d53369612154","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01ReSYrRTCfpXmN6W74iswrc","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me add the calculateColumnWidths function after the window dimension detection:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1013,"cache_read_input_tokens":79493,"output_tokens":2,"service_tier":"standard"}},"requestId":"req_011CRRXaeEQmijvyT9ncQXgC","type":"assistant","uuid":"ddfd85dd-cc05-4167-8777-1cc4172f9ad0","timestamp":"2025-07-24T08:28:17.412Z"}
{"parentUuid":"ddfd85dd-cc05-4167-8777-1cc4172f9ad0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01ReSYrRTCfpXmN6W74iswrc","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_011NtmAzeLfET1ivTreCH7i1","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"  //  dynamic window dimension detection end\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","new_string":"  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1013,"cache_read_input_tokens":79493,"output_tokens":594,"service_tier":"standard"}},"requestId":"req_011CRRXaeEQmijvyT9ncQXgC","type":"assistant","uuid":"b73c8ffc-37f5-4835-92b1-26c30e962e44","timestamp":"2025-07-24T08:28:23.918Z"}
{"parentUuid":"b73c8ffc-37f5-4835-92b1-26c30e962e44","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_011NtmAzeLfET1ivTreCH7i1","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   120→    return () => {\n   121→      window.removeEventListener('resize', detectSize)\n   122→    }\n   123→  }, [])\n   124→  //  dynamic window dimension detection end\n   125→  \n   126→  // Calculate dynamic column widths based on window dimension\n   127→  const calculateColumnWidths = useCallback(() => {\n   128→    const screenWidth = windowDimension.innerWidth;\n   129→    \n   130→    // Define breakpoints and corresponding widths\n   131→    if (screenWidth <= 768) { // Mobile\n   132→      return {\n   133→        empId: 50,\n   134→        empCode: 80,\n   135→        name: 120,\n   136→        department: 100,\n   137→        designation: 100,\n   138→        dayColumn: 120\n   139→      };\n   140→    } else if (screenWidth <= 1024) { // Tablet\n   141→      return {\n   142→        empId: 50,\n   143→        empCode: 90,\n   144→        name: 140,\n   145→        department: 120,\n   146→        designation: 120,\n   147→        dayColumn: 140\n   148→      };\n   149→    } else if (screenWidth <= 1366) { // Small desktop\n   150→      return {\n   151→        empId: 50,\n   152→        empCode: 100,\n   153→        name: 130,\n   154→        department: 130,\n   155→        designation: 130,\n   156→        dayColumn: 150\n   157→      };\n   158→    } else if (screenWidth <= 1620) { // Standard desktop\n   159→      return {\n   160→        empId: 50,\n   161→        empCode: 100,\n   162→        name: 130,\n   163→        department: 130,\n   164→        designation: 130,\n   165→        dayColumn: 150\n   166→      };\n   167→    } else { // Large desktop/4K\n   168→      return {\n   169→        empId: 50,\n   170→        empCode: 100,\n   171→        name: 130,\n   172→        department: 130,\n   173→        designation: 130,\n   174→        dayColumn: 150\n   175→      };\n   176→    }\n   177→  }, [windowDimension]);\n   178→\n   179→  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n   180→    empConfigsData: state.Payroll.empConfigsData,\n   181→    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n   182→  }));\n   183→"}]},"uuid":"a968563e-aff3-420e-b1ae-49938b577635","timestamp":"2025-07-24T08:28:23.981Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"  //  dynamic window dimension detection end\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","newString":"  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => [\n    { title: \"Emp ID\", width: 150, readOnly: true, filter: true },\n    { title: \"Name\", width: 150, readOnly: true, filter: true },\n    { title: \"Department\", width: 150, readOnly: true, filter: true },\n    { title: \"Designation\", width: 150, readOnly: true, filter: true },\n    { title: \"Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN , source: TOGGLE_OPTIONS },\n    { title: \"Bonus Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Bonus Reason\", width: 150 },\n    { title: \"Repeat Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Incentive Reason\", width: 150 },\n  ], []);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":122,"oldLines":6,"newStart":122,"newLines":59,"lines":["     }","   }, [])","   //  dynamic window dimension detection end","+  ","+  // Calculate dynamic column widths based on window dimension","+  const calculateColumnWidths = useCallback(() => {","+    const screenWidth = windowDimension.innerWidth;","+    ","+    // Define breakpoints and corresponding widths","+    if (screenWidth <= 768) { // Mobile","+      return {","+        empId: 50,","+        empCode: 80,","+        name: 120,","+        department: 100,","+        designation: 100,","+        dayColumn: 120","+      };","+    } else if (screenWidth <= 1024) { // Tablet","+      return {","+        empId: 50,","+        empCode: 90,","+        name: 140,","+        department: 120,","+        designation: 120,","+        dayColumn: 140","+      };","+    } else if (screenWidth <= 1366) { // Small desktop","+      return {","+        empId: 50,","+        empCode: 100,","+        name: 130,","+        department: 130,","+        designation: 130,","+        dayColumn: 150","+      };","+    } else if (screenWidth <= 1620) { // Standard desktop","+      return {","+        empId: 50,","+        empCode: 100,","+        name: 130,","+        department: 130,","+        designation: 130,","+        dayColumn: 150","+      };","+    } else { // Large desktop/4K","+      return {","+        empId: 50,","+        empCode: 100,","+        name: 130,","+        department: 130,","+        designation: 130,","+        dayColumn: 150","+      };","+    }","+  }, [windowDimension]);"," ","   const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","     empConfigsData: state.Payroll.empConfigsData,"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"a968563e-aff3-420e-b1ae-49938b577635","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01EAswePBccBPckNr3UBcjdT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me update the baseColumns to use dynamic widths and add wrap property:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1355,"cache_read_input_tokens":80506,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRRXbPccBKPdtGcPXT8A4","type":"assistant","uuid":"c057683d-3aa9-4430-a788-30e43512012b","timestamp":"2025-07-24T08:28:28.479Z"}
{"parentUuid":"c057683d-3aa9-4430-a788-30e43512012b","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01EAswePBccBPckNr3UBcjdT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01VDvaJ4BwgaqdXMX96vxUVg","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"  const baseColumns = useMemo(() => [\n    { title: \"Emp ID\", width: 150, readOnly: true, filter: true },\n    { title: \"Name\", width: 150, readOnly: true, filter: true },\n    { title: \"Department\", width: 150, readOnly: true, filter: true },\n    { title: \"Designation\", width: 150, readOnly: true, filter: true },\n    { title: \"Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN , source: TOGGLE_OPTIONS },\n    { title: \"Bonus Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Bonus Reason\", width: 150 },\n    { title: \"Repeat Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Incentive Reason\", width: 150 },\n  ], []);","new_string":"  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1355,"cache_read_input_tokens":80506,"output_tokens":907,"service_tier":"standard"}},"requestId":"req_011CRRXbPccBKPdtGcPXT8A4","type":"assistant","uuid":"227773ea-7db0-4520-837d-5ad7b97e167f","timestamp":"2025-07-24T08:28:37.150Z"}
{"parentUuid":"227773ea-7db0-4520-837d-5ad7b97e167f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VDvaJ4BwgaqdXMX96vxUVg","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   206→      setIsSaving(false);\n   207→    },\n   208→  });\n   209→\n   210→  const baseColumns = useMemo(() => {\n   211→    const columnWidths = calculateColumnWidths();\n   212→    return [\n   213→      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n   214→      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n   215→      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n   216→      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n   217→      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n   218→      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n   219→      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n   220→      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n   221→      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n   222→      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n   223→      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n   224→    ];\n   225→  }, [calculateColumnWidths]);\n   226→\n   227→  const columnIndexMap = useMemo(() => ({\n   228→    \"Emp ID\": 0,\n   229→    \"Name\": 1,"}]},"uuid":"b84c5865-c5c7-4875-a59f-dbc6d864ec77","timestamp":"2025-07-24T08:28:37.212Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"  const baseColumns = useMemo(() => [\n    { title: \"Emp ID\", width: 150, readOnly: true, filter: true },\n    { title: \"Name\", width: 150, readOnly: true, filter: true },\n    { title: \"Department\", width: 150, readOnly: true, filter: true },\n    { title: \"Designation\", width: 150, readOnly: true, filter: true },\n    { title: \"Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN , source: TOGGLE_OPTIONS },\n    { title: \"Bonus Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Bonus Reason\", width: 150 },\n    { title: \"Repeat Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Incentive Reason\", width: 150 },\n  ], []);","newString":"  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => [\n    { title: \"Emp ID\", width: 150, readOnly: true, filter: true },\n    { title: \"Name\", width: 150, readOnly: true, filter: true },\n    { title: \"Department\", width: 150, readOnly: true, filter: true },\n    { title: \"Designation\", width: 150, readOnly: true, filter: true },\n    { title: \"Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN , source: TOGGLE_OPTIONS },\n    { title: \"Bonus Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Bonus Reason\", width: 150 },\n    { title: \"Repeat Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },\n    { title: \"Incentive Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },\n    { title: \"Incentive Reason\", width: 150 },\n  ], []);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":207,"oldLines":19,"newStart":207,"newLines":22,"lines":["     },","   });"," ","-  const baseColumns = useMemo(() => [","-    { title: \"Emp ID\", width: 150, readOnly: true, filter: true },","-    { title: \"Name\", width: 150, readOnly: true, filter: true },","-    { title: \"Department\", width: 150, readOnly: true, filter: true },","-    { title: \"Designation\", width: 150, readOnly: true, filter: true },","-    { title: \"Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN , source: TOGGLE_OPTIONS },","-    { title: \"Bonus Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },","-    { title: \"Bonus Reason\", width: 150 },","-    { title: \"Repeat Bonus\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },","-    { title: \"Incentive\", width: 150, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS },","-    { title: \"Incentive Amount\", width: 150, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right' },","-    { title: \"Incentive Reason\", width: 150 },","-  ], []);","+  const baseColumns = useMemo(() => {","+    const columnWidths = calculateColumnWidths();","+    return [","+      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },","+      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },","+      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },","+      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },","+      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },","+      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },","+      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },","+      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },","+      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },","+      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },","+      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },","+    ];","+  }, [calculateColumnWidths]);"," ","   const columnIndexMap = useMemo(() => ({","     \"Emp ID\": 0,"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"b84c5865-c5c7-4875-a59f-dbc6d864ec77","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01JYpT1PdSwEgKznX6DKCz6o","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_019iipRqx2K8aiAKpvFNtwZ9","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high"},{"id":"2","content":"Add calculateColumnWidths function with responsive breakpoints","status":"completed","priority":"high"},{"id":"3","content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"completed","priority":"high"},{"id":"4","content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"in_progress","priority":"high"},{"id":"5","content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium"},{"id":"6","content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium"},{"id":"7","content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high"},{"id":"8","content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low"},{"id":"9","content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium"},{"id":"10","content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1531,"cache_read_input_tokens":81861,"output_tokens":445,"service_tier":"standard"}},"requestId":"req_011CRRXcNr1Cjei2BqXwMWmm","type":"assistant","uuid":"6da62682-4b3b-4ab9-87cb-e9871e9e9d3d","timestamp":"2025-07-24T08:28:45.138Z"}
{"parentUuid":"6da62682-4b3b-4ab9-87cb-e9871e9e9d3d","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_019iipRqx2K8aiAKpvFNtwZ9","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"abec4dc2-112a-4836-b271-d1969f29947b","timestamp":"2025-07-24T08:28:45.196Z","toolUseResult":{"oldTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"in_progress","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"pending","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"pending","priority":"high","id":"4"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium","id":"5"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"}],"newTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"completed","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"completed","priority":"high","id":"3"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium","id":"5"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"in_progress","priority":"high","id":"4"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"}]}}
{"parentUuid":"abec4dc2-112a-4836-b271-d1969f29947b","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01M2WgCMxtsS2iYBxMHHoM3P","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me add the dynamic CSS injection after the calculateColumnWidths function:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":853,"cache_read_input_tokens":83392,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRRXcyZZC9P52cbtgLcx5","type":"assistant","uuid":"bbd1a42a-671c-4e54-97b3-fa3523fa4d2d","timestamp":"2025-07-24T08:28:49.924Z"}
{"parentUuid":"bbd1a42a-671c-4e54-97b3-fa3523fa4d2d","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01M2WgCMxtsS2iYBxMHHoM3P","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01VvHRwUMAxNRsSgdWW7pG92","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","new_string":"  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":853,"cache_read_input_tokens":83392,"output_tokens":2464,"service_tier":"standard"}},"requestId":"req_011CRRXcyZZC9P52cbtgLcx5","type":"assistant","uuid":"6a875f8c-8818-40a5-bde3-50f4d1a84381","timestamp":"2025-07-24T08:29:17.878Z"}
{"parentUuid":"6a875f8c-8818-40a5-bde3-50f4d1a84381","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VvHRwUMAxNRsSgdWW7pG92","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   173→        designation: 130,\n   174→        dayColumn: 150\n   175→      };\n   176→    }\n   177→  }, [windowDimension]);\n   178→  \n   179→  // Dynamic CSS for jss_content jss_content_overflow class\n   180→  useEffect(() => {\n   181→    const calculateDynamicDimensions = () => {\n   182→      const screenWidth = windowDimension.innerWidth;\n   183→      const screenHeight = windowDimension.innerHeight;\n   184→      // console.log('Screen dimensions:', screenWidth, screenHeight);\n   185→      \n   186→      // Calculate dynamic height based on screen size and UI elements\n   187→      let dynamicHeight = screenHeight;\n   188→      \n   189→      // Account for common UI elements (header, footer, margins, etc.)\n   190→      const reservedHeight = 20; // Adjust this value based on your header/footer height\n   191→      \n   192→      // Define responsive height breakpoints\n   193→      if (screenHeight <= 600) { // Small screens\n   194→        dynamicHeight = screenHeight - 120;\n   195→      } else if (screenHeight <= 800) { // Medium screens\n   196→        dynamicHeight = screenHeight - 160;\n   197→      } else if (screenHeight <= 1080) { // Standard screens\n   198→        dynamicHeight = screenHeight - reservedHeight;\n   199→      } else { // Large screens\n   200→        dynamicHeight = screenHeight - 250;\n   201→      }\n   202→      \n   203→      // Ensure minimum height\n   204→      dynamicHeight = Math.max(dynamicHeight, 400);\n   205→      \n   206→      return { \n   207→        width: screenWidth, \n   208→        height: screenHeight - 120, \n   209→        dynamicHeight: dynamicHeight - 120\n   210→      };\n   211→    };\n   212→\n   213→    const updateJSSContentStyles = () => {\n   214→      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n   215→      \n   216→      // Remove existing style if it exists\n   217→      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n   218→      if (existingStyle) {\n   219→        existingStyle.remove();\n   220→      }\n   221→      \n   222→      // Create new style element\n   223→      const style = document.createElement('style');\n   224→      style.id = 'jss-content-dynamic-styles';\n   225→      style.textContent = `\n   226→        .jss_content.jss_content_overflow {\n   227→          width: ${width + 200}px !important;\n   228→          height: ${dynamicHeight}px !important;\n   229→          max-height: ${height * 0.9}px !important;\n   230→          max-width: 90vw ;\n   231→          overflow-x: auto !important;\n   232→          overflow-y: auto !important;\n   233→          border: 1px solid #e0e0e0 !important;\n   234→          border-radius: 4px !important;\n   235→          position: relative !important;\n   236→        }\n   237→\n   238→        .jss_content.jss_content_overflow.jss_modern {\n   239→          width: ${width + 200}px !important;\n   240→          height: ${dynamicHeight}px !important;\n   241→          max-height: ${height * 0.9}px !important;\n   242→          max-width: 90vw;\n   243→          overflow-x: auto !important;\n   244→          overflow-y: auto !important;\n   245→          border: 1px solid #e1e5e9 !important;\n   246→          border-radius: 8px !important;\n   247→          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n   248→          position: relative !important;\n   249→          --jss-border-color: #e1e5e9;\n   250→          --jss-header-background: #E3F1FF;\n   251→          --jss-selected-background: #e3f2fd;\n   252→          --jss-hover-background: #f5f5f5;\n   253→        }\n   254→        \n   255→        .jss_content.jss_content_overflow table,\n   256→        .jss_content.jss_content_overflow.jss_modern table {\n   257→          width: 100% !important;\n   258→          min-width: fit-content !important;\n   259→        }\n   260→\n   261→        /* Modern styling for jss_modern class */\n   262→        .jss_modern .jss_corner,\n   263→        .jss_modern .jss_selectall {\n   264→          background: #E3F1FF !important;\n   265→          border: 1px solid #f0f0f0 !important;\n   266→          border-color: #f0f0f0 !important;\n   267→          position: sticky !important;\n   268→          top: 0 !important;\n   269→          z-index: 10 !important;\n   270→        }\n   271→\n   272→        .jss_modern .jss_header {\n   273→          background: var(--jss-header-background) !important;\n   274→          font-weight: 600 !important;\n   275→          color: #495057 !important;\n   276→          border: 1px solid #f0f0f0 !important;\n   277→          border-color: #f0f0f0 !important;\n   278→          position: sticky !important;\n   279→          top: 0 !important;\n   280→          z-index: 9 !important;\n   281→        }\n   282→\n   283→        .jss_modern .jss_row_header {\n   284→          background: var(--jss-header-background) !important;\n   285→          font-weight: 500 !important;\n   286→          color: #6c757d !important;\n   287→          border: 1px solid #f0f0f0 !important;\n   288→          border-color: #f0f0f0 !important;\n   289→          position: sticky !important;\n   290→          left: 0 !important;\n   291→          z-index: 8 !important;\n   292→        }\n   293→\n   294→        .jss_modern .jss_cell {\n   295→          border: 1px solid #f0f0f0 !important;\n   296→          border-color: #f0f0f0 !important;\n   297→          transition: background-color 0.2s ease !important;\n   298→        }\n   299→\n   300→        .jss_modern .jss_cell:hover {\n   301→          background-color: var(--jss-hover-background) !important;\n   302→        }\n   303→\n   304→        .jss_modern .jss_cell.jss_selected {\n   305→          background-color: var(--jss-selected-background) !important;\n   306→          border-color: #2196f3 !important;\n   307→        }\n   308→\n   309→        .jss_modern .jss_nested {\n   310→          background: #E3F1FF !important;\n   311→          border: 1px solid #f0f0f0 !important;\n   312→          border-color: #f0f0f0 !important;\n   313→          font-weight: 600 !important;\n   314→          color: #495057 !important;\n   315→          position: sticky !important;\n   316→          top: 0 !important;\n   317→          z-index: 10 !important;\n   318→        }\n   319→\n   320→        /* Fix for content not overlapping with sticky headers */\n   321→        .jss_modern .jss_content {\n   322→          position: relative !important;\n   323→          z-index: 1 !important;\n   324→        }\n   325→\n   326→        .jss_modern .jss_cell {\n   327→          position: relative !important;\n   328→          z-index: 1 !important;\n   329→        }\n   330→\n   331→        @media (min-width: 1680px) {\n   332→          .jss_content.jss_content_overflow,\n   333→          .jss_content.jss_content_overflow.jss_modern {\n   334→            max-width: 92vw !important;\n   335→          }\n   336→        }\n   337→        @media (max-width: 1366px) {\n   338→          .jss_content.jss_content_overflow,\n   339→          .jss_content.jss_content_overflow.jss_modern {\n   340→            max-width: 88.9vw ;\n   341→          }\n   342→        }\n   343→        \n   344→        @media (max-width: 768px) {\n   345→          .jss_content.jss_content_overflow,\n   346→          .jss_content.jss_content_overflow.jss_modern {\n   347→            width: 88.9vw !important;\n   348→            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n   349→            max-height: ${height * 0.85}px !important;\n   350→          }\n   351→        }\n   352→        \n   353→        @media (max-width: 480px) {\n   354→          .jss_content.jss_content_overflow,\n   355→          .jss_content.jss_content_overflow.jss_modern {\n   356→            width: 98vw !important;\n   357→            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n   358→            max-height: ${height * 0.8}px !important;\n   359→          }\n   360→        }\n   361→        \n   362→        @media (min-height: 1200px) {\n   363→          .jss_content.jss_content_overflow,\n   364→          .jss_content.jss_content_overflow.jss_modern {\n   365→            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n   366→          }\n   367→        }\n   368→        \n   369→        @media (max-height: 600px) {\n   370→          .jss_content.jss_content_overflow,\n   371→          .jss_content.jss_content_overflow.jss_modern {\n   372→            height: ${Math.max(height - 100, 250)}px !important;\n   373→          }\n   374→        }\n   375→      `;\n   376→      \n   377→      document.head.appendChild(style);\n   378→    };\n   379→    \n   380→    // Update styles when component mounts and when window dimension changes\n   381→    updateJSSContentStyles();\n   382→    \n   383→    // Cleanup function\n   384→    return () => {\n   385→      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n   386→      if (existingStyle) {\n   387→        existingStyle.remove();\n   388→      }\n   389→    };\n   390→  }, [windowDimension]);\n   391→\n   392→  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n   393→    empConfigsData: state.Payroll.empConfigsData,\n   394→    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n   395→  }));\n   396→"}]},"uuid":"46bcfa33-a549-4839-8899-fd5d4a29f94e","timestamp":"2025-07-24T08:29:17.947Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","newString":"  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":175,"oldLines":7,"newStart":175,"newLines":220,"lines":["       };","     }","   }, [windowDimension]);","+  ","+  // Dynamic CSS for jss_content jss_content_overflow class","+  useEffect(() => {","+    const calculateDynamicDimensions = () => {","+      const screenWidth = windowDimension.innerWidth;","+      const screenHeight = windowDimension.innerHeight;","+      // console.log('Screen dimensions:', screenWidth, screenHeight);","+      ","+      // Calculate dynamic height based on screen size and UI elements","+      let dynamicHeight = screenHeight;","+      ","+      // Account for common UI elements (header, footer, margins, etc.)","+      const reservedHeight = 20; // Adjust this value based on your header/footer height","+      ","+      // Define responsive height breakpoints","+      if (screenHeight <= 600) { // Small screens","+        dynamicHeight = screenHeight - 120;","+      } else if (screenHeight <= 800) { // Medium screens","+        dynamicHeight = screenHeight - 160;","+      } else if (screenHeight <= 1080) { // Standard screens","+        dynamicHeight = screenHeight - reservedHeight;","+      } else { // Large screens","+        dynamicHeight = screenHeight - 250;","+      }","+      ","+      // Ensure minimum height","+      dynamicHeight = Math.max(dynamicHeight, 400);","+      ","+      return { ","+        width: screenWidth, ","+        height: screenHeight - 120, ","+        dynamicHeight: dynamicHeight - 120","+      };","+    };"," ","+    const updateJSSContentStyles = () => {","+      const { width, height, dynamicHeight } = calculateDynamicDimensions();","+      ","+      // Remove existing style if it exists","+      const existingStyle = document.getElementById('jss-content-dynamic-styles');","+      if (existingStyle) {","+        existingStyle.remove();","+      }","+      ","+      // Create new style element","+      const style = document.createElement('style');","+      style.id = 'jss-content-dynamic-styles';","+      style.textContent = `","+        .jss_content.jss_content_overflow {","+          width: ${width + 200}px !important;","+          height: ${dynamicHeight}px !important;","+          max-height: ${height * 0.9}px !important;","+          max-width: 90vw ;","+          overflow-x: auto !important;","+          overflow-y: auto !important;","+          border: 1px solid #e0e0e0 !important;","+          border-radius: 4px !important;","+          position: relative !important;","+        }","+","+        .jss_content.jss_content_overflow.jss_modern {","+          width: ${width + 200}px !important;","+          height: ${dynamicHeight}px !important;","+          max-height: ${height * 0.9}px !important;","+          max-width: 90vw;","+          overflow-x: auto !important;","+          overflow-y: auto !important;","+          border: 1px solid #e1e5e9 !important;","+          border-radius: 8px !important;","+          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;","+          position: relative !important;","+          --jss-border-color: #e1e5e9;","+          --jss-header-background: #E3F1FF;","+          --jss-selected-background: #e3f2fd;","+          --jss-hover-background: #f5f5f5;","+        }","+        ","+        .jss_content.jss_content_overflow table,","+        .jss_content.jss_content_overflow.jss_modern table {","+          width: 100% !important;","+          min-width: fit-content !important;","+        }","+","+        /* Modern styling for jss_modern class */","+        .jss_modern .jss_corner,","+        .jss_modern .jss_selectall {","+          background: #E3F1FF !important;","+          border: 1px solid #f0f0f0 !important;","+          border-color: #f0f0f0 !important;","+          position: sticky !important;","+          top: 0 !important;","+          z-index: 10 !important;","+        }","+","+        .jss_modern .jss_header {","+          background: var(--jss-header-background) !important;","+          font-weight: 600 !important;","+          color: #495057 !important;","+          border: 1px solid #f0f0f0 !important;","+          border-color: #f0f0f0 !important;","+          position: sticky !important;","+          top: 0 !important;","+          z-index: 9 !important;","+        }","+","+        .jss_modern .jss_row_header {","+          background: var(--jss-header-background) !important;","+          font-weight: 500 !important;","+          color: #6c757d !important;","+          border: 1px solid #f0f0f0 !important;","+          border-color: #f0f0f0 !important;","+          position: sticky !important;","+          left: 0 !important;","+          z-index: 8 !important;","+        }","+","+        .jss_modern .jss_cell {","+          border: 1px solid #f0f0f0 !important;","+          border-color: #f0f0f0 !important;","+          transition: background-color 0.2s ease !important;","+        }","+","+        .jss_modern .jss_cell:hover {","+          background-color: var(--jss-hover-background) !important;","+        }","+","+        .jss_modern .jss_cell.jss_selected {","+          background-color: var(--jss-selected-background) !important;","+          border-color: #2196f3 !important;","+        }","+","+        .jss_modern .jss_nested {","+          background: #E3F1FF !important;","+          border: 1px solid #f0f0f0 !important;","+          border-color: #f0f0f0 !important;","+          font-weight: 600 !important;","+          color: #495057 !important;","+          position: sticky !important;","+          top: 0 !important;","+          z-index: 10 !important;","+        }","+","+        /* Fix for content not overlapping with sticky headers */","+        .jss_modern .jss_content {","+          position: relative !important;","+          z-index: 1 !important;","+        }","+","+        .jss_modern .jss_cell {","+          position: relative !important;","+          z-index: 1 !important;","+        }","+","+        @media (min-width: 1680px) {","+          .jss_content.jss_content_overflow,","+          .jss_content.jss_content_overflow.jss_modern {","+            max-width: 92vw !important;","+          }","+        }","+        @media (max-width: 1366px) {","+          .jss_content.jss_content_overflow,","+          .jss_content.jss_content_overflow.jss_modern {","+            max-width: 88.9vw ;","+          }","+        }","+        ","+        @media (max-width: 768px) {","+          .jss_content.jss_content_overflow,","+          .jss_content.jss_content_overflow.jss_modern {","+            width: 88.9vw !important;","+            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;","+            max-height: ${height * 0.85}px !important;","+          }","+        }","+        ","+        @media (max-width: 480px) {","+          .jss_content.jss_content_overflow,","+          .jss_content.jss_content_overflow.jss_modern {","+            width: 98vw !important;","+            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;","+            max-height: ${height * 0.8}px !important;","+          }","+        }","+        ","+        @media (min-height: 1200px) {","+          .jss_content.jss_content_overflow,","+          .jss_content.jss_content_overflow.jss_modern {","+            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;","+          }","+        }","+        ","+        @media (max-height: 600px) {","+          .jss_content.jss_content_overflow,","+          .jss_content.jss_content_overflow.jss_modern {","+            height: ${Math.max(height - 100, 250)}px !important;","+          }","+        }","+      `;","+      ","+      document.head.appendChild(style);","+    };","+    ","+    // Update styles when component mounts and when window dimension changes","+    updateJSSContentStyles();","+    ","+    // Cleanup function","+    return () => {","+      const existingStyle = document.getElementById('jss-content-dynamic-styles');","+      if (existingStyle) {","+        existingStyle.remove();","+      }","+    };","+  }, [windowDimension]);","+","   const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({","     empConfigsData: state.Payroll.empConfigsData,","     isEmpConfigsloading: state.Payroll.isEmpConfigsloading,"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"46bcfa33-a549-4839-8899-fd5d4a29f94e","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01SzoNYp9V2wt4zdcUW1K119","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me update the initializeSpreadsheet function to handle column locking:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":5580,"cache_read_input_tokens":84245,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRRXfLhbryTBE7i4ESkbz","type":"assistant","uuid":"5cc95c77-4ce6-4f72-aff7-c1e07ea716d0","timestamp":"2025-07-24T08:29:22.524Z"}
{"parentUuid":"5cc95c77-4ce6-4f72-aff7-c1e07ea716d0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01SzoNYp9V2wt4zdcUW1K119","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_019ekVcUaVAYUrgjrhAyeYQ2","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n\n      for (let row = 0; row < records.length; row++) {","new_string":"  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n      const worksheetCols = worksheet?.cols || []\n\n      for (let i = 0; i < worksheetCols.length; i++) {\n        const col = worksheetCols[i];\n\n        if (!Object.hasOwn(col, 'title')) {\n          try {\n            const cellIndex = col.x;\n            const colName = getColumnName(cellIndex );\n            if (colName) {\n              const colProp = col || {};\n              colProp.locked = true\n              colProp.readOnly= true\n              worksheet.setProperties(colName, colProp);\n            }\n          } catch (error) {\n            console.warn(`Error setting column ${col.x} to read-only:`, error);\n          }\n        }\n      }\n\n      for (let row = 0; row < records.length; row++) {"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":5580,"cache_read_input_tokens":84245,"output_tokens":480,"service_tier":"standard"}},"requestId":"req_011CRRXfLhbryTBE7i4ESkbz","type":"assistant","uuid":"d354e083-c20a-4bf1-9a57-99a5d71227b2","timestamp":"2025-07-24T08:29:28.811Z"}
{"parentUuid":"d354e083-c20a-4bf1-9a57-99a5d71227b2","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_019ekVcUaVAYUrgjrhAyeYQ2","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   925→    }\n   926→  }, [ isSaving, modifiedData, validateData,\n   927→    prepareDataForSave, mutate ]);\n   928→\n   929→  const initializeSpreadsheet = useCallback((worksheet) => {\n   930→    if (!worksheet || !worksheet.records) {\n   931→      console.log(\"Worksheet not available for initialization\");\n   932→      return;\n   933→    }\n   934→    \n   935→    try {\n   936→      const records = worksheet.records;\n   937→      const worksheetCols = worksheet?.cols || []\n   938→\n   939→      for (let i = 0; i < worksheetCols.length; i++) {\n   940→        const col = worksheetCols[i];\n   941→\n   942→        if (!Object.hasOwn(col, 'title')) {\n   943→          try {\n   944→            const cellIndex = col.x;\n   945→            const colName = getColumnName(cellIndex );\n   946→            if (colName) {\n   947→              const colProp = col || {};\n   948→              colProp.locked = true\n   949→              colProp.readOnly= true\n   950→              worksheet.setProperties(colName, colProp);\n   951→            }\n   952→          } catch (error) {\n   953→            console.warn(`Error setting column ${col.x} to read-only:`, error);\n   954→          }\n   955→        }\n   956→      }\n   957→\n   958→      for (let row = 0; row < records.length; row++) {\n   959→        if (bonusIndex !== -1) {\n   960→          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n   961→          const isActive = bonusValue === \"On\";\n   962→"}]},"uuid":"900cae99-0bbc-4442-bdf7-4a70f16e2db5","timestamp":"2025-07-24T08:29:28.867Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n\n      for (let row = 0; row < records.length; row++) {","newString":"  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n      const worksheetCols = worksheet?.cols || []\n\n      for (let i = 0; i < worksheetCols.length; i++) {\n        const col = worksheetCols[i];\n\n        if (!Object.hasOwn(col, 'title')) {\n          try {\n            const cellIndex = col.x;\n            const colName = getColumnName(cellIndex );\n            if (colName) {\n              const colProp = col || {};\n              colProp.locked = true\n              colProp.readOnly= true\n              worksheet.setProperties(colName, colProp);\n            }\n          } catch (error) {\n            console.warn(`Error setting column ${col.x} to read-only:`, error);\n          }\n        }\n      }\n\n      for (let row = 0; row < records.length; row++) {","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":934,"oldLines":7,"newStart":934,"newLines":27,"lines":["     ","     try {","       const records = worksheet.records;","+      const worksheetCols = worksheet?.cols || []"," ","+      for (let i = 0; i < worksheetCols.length; i++) {","+        const col = worksheetCols[i];","+","+        if (!Object.hasOwn(col, 'title')) {","+          try {","+            const cellIndex = col.x;","+            const colName = getColumnName(cellIndex );","+            if (colName) {","+              const colProp = col || {};","+              colProp.locked = true","+              colProp.readOnly= true","+              worksheet.setProperties(colName, colProp);","+            }","+          } catch (error) {","+            console.warn(`Error setting column ${col.x} to read-only:`, error);","+          }","+        }","+      }","+","       for (let row = 0; row < records.length; row++) {","         if (bonusIndex !== -1) {","           const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"900cae99-0bbc-4442-bdf7-4a70f16e2db5","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01BMSFvAQyrp4ZzvvU71AWAy","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me update the initializeSpreadsheetWithCustomBehaviors function to add hideIndex functionality:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1007,"cache_read_input_tokens":89825,"output_tokens":2,"service_tier":"standard"}},"requestId":"req_011CRRXg8iJs5fGSKSQodFAq","type":"assistant","uuid":"3dfdaaf0-0fa1-4801-92c0-b954bc70ba5d","timestamp":"2025-07-24T08:29:32.682Z"}
{"parentUuid":"3dfdaaf0-0fa1-4801-92c0-b954bc70ba5d","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01BMSFvAQyrp4ZzvvU71AWAy","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01PH55uKyLHAmauE6BMoQ82y","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);","new_string":"  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1007,"cache_read_input_tokens":89825,"output_tokens":408,"service_tier":"standard"}},"requestId":"req_011CRRXg8iJs5fGSKSQodFAq","type":"assistant","uuid":"c3491492-40a0-4473-9b0e-a7d4f2536a9e","timestamp":"2025-07-24T08:29:40.420Z"}
{"parentUuid":"c3491492-40a0-4473-9b0e-a7d4f2536a9e","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01PH55uKyLHAmauE6BMoQ82y","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n  1050→      }\n  1051→    };\n  1052→  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n  1053→\n  1054→  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n  1055→    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n  1056→      console.warn(\"Worksheet object not available for initialization\");\n  1057→      return;\n  1058→    }\n  1059→\n  1060→    const activeWorksheet = worksheetObject.worksheets[0];\n  1061→    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }\n  1062→    initializeSpreadsheet(activeWorksheet);\n  1063→    validateToggleColumnPaste(activeWorksheet);\n  1064→  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n  1065→\n  1066→  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n  1067→    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n  1068→"}]},"uuid":"9433529e-835a-44d5-8e07-c46c77020938","timestamp":"2025-07-24T08:29:40.490Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);","newString":"  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n      const worksheetCols = worksheet?.cols || []\n\n      for (let i = 0; i < worksheetCols.length; i++) {\n        const col = worksheetCols[i];\n\n        if (!Object.hasOwn(col, 'title')) {\n          try {\n            const cellIndex = col.x;\n            const colName = getColumnName(cellIndex );\n            if (colName) {\n              const colProp = col || {};\n              colProp.locked = true\n              colProp.readOnly= true\n              worksheet.setProperties(colName, colProp);\n            }\n          } catch (error) {\n            console.warn(`Error setting column ${col.x} to read-only:`, error);\n          }\n        }\n      }\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":1058,"oldLines":6,"newStart":1058,"newLines":7,"lines":["     }"," ","     const activeWorksheet = worksheetObject.worksheets[0];","+    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }","     initializeSpreadsheet(activeWorksheet);","     validateToggleColumnPaste(activeWorksheet);","   }, [initializeSpreadsheet, validateToggleColumnPaste]);"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"9433529e-835a-44d5-8e07-c46c77020938","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01LVs6hVqR3viYKTZY1vBGbu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me update the globalEventHandler to match PTLWFConfigs parameter structure:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":786,"cache_read_input_tokens":90832,"output_tokens":6,"service_tier":"standard"}},"requestId":"req_011CRRXgzTzdh9FjxV3Zosh3","type":"assistant","uuid":"01468cc9-e097-4113-91b5-ef94a23595f6","timestamp":"2025-07-24T08:29:45.062Z"}
{"parentUuid":"01468cc9-e097-4113-91b5-ef94a23595f6","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01LVs6hVqR3viYKTZY1vBGbu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_014j6oPAoyQy6ZDxrAqz2up2","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);","new_string":"  const globalEventHandler = useCallback((eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue) => {\n    try {\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":786,"cache_read_input_tokens":90832,"output_tokens":519,"service_tier":"standard"}},"requestId":"req_011CRRXgzTzdh9FjxV3Zosh3","type":"assistant","uuid":"dd7183b4-5e32-4330-a5a5-815e7f7dce33","timestamp":"2025-07-24T08:29:49.400Z"}
{"parentUuid":"dd7183b4-5e32-4330-a5a5-815e7f7dce33","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014j6oPAoyQy6ZDxrAqz2up2","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n  1117→    processBonusToggle,\n  1118→    processIncentiveToggle\n  1119→  ]);\n  1120→\n  1121→  const globalEventHandler = useCallback((eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue) => {\n  1122→    try {\n  1123→      switch (eventName) {\n  1124→        case \"onload\":\n  1125→          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n  1126→        case \"oncopy\":\n  1127→          return processMultiCellCopyOperation(worksheet, section);\n  1128→        case \"onchange\":\n  1129→          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n  1130→        default:\n  1131→          return;\n  1132→      }\n  1133→    } catch (error) {\n  1134→      console.error(\"Error handling spreadsheet event:\", error);\n  1135→    }\n  1136→  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n  1137→\n  1138→  useEffect(() => {\n  1139→    if (dateRange.start && dateRange.end) {\n  1140→      dispatch("}]},"uuid":"cd74e215-780d-418e-b170-62863b106427","timestamp":"2025-07-24T08:29:49.482Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);","newString":"  const globalEventHandler = useCallback((eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue) => {\n    try {\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n      const worksheetCols = worksheet?.cols || []\n\n      for (let i = 0; i < worksheetCols.length; i++) {\n        const col = worksheetCols[i];\n\n        if (!Object.hasOwn(col, 'title')) {\n          try {\n            const cellIndex = col.x;\n            const colName = getColumnName(cellIndex );\n            if (colName) {\n              const colProp = col || {};\n              colProp.locked = true\n              colProp.readOnly= true\n              worksheet.setProperties(colName, colProp);\n            }\n          } catch (error) {\n            console.warn(`Error setting column ${col.x} to read-only:`, error);\n          }\n        }\n      }\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventData) => {\n    try {\n      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":1118,"oldLines":9,"newStart":1118,"newLines":8,"lines":["     processIncentiveToggle","   ]);"," ","-  const globalEventHandler = useCallback((eventData) => {","+  const globalEventHandler = useCallback((eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue) => {","     try {","-      const { eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue } = eventData;","       switch (eventName) {","         case \"onload\":","           return initializeSpreadsheetWithCustomBehaviors(worksheet);"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"cd74e215-780d-418e-b170-62863b106427","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01ML9NpRxuCvfjPcjXHaeGnF","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me update the processApiDataForSpreadsheet useEffect to include windowDimension dependency:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":916,"cache_read_input_tokens":91618,"output_tokens":6,"service_tier":"standard"}},"requestId":"req_011CRRXhf2jFR2cbXtjWzGvF","type":"assistant","uuid":"0900abb1-c91b-404b-b8a7-23b41814ae67","timestamp":"2025-07-24T08:29:53.269Z"}
{"parentUuid":"0900abb1-c91b-404b-b8a7-23b41814ae67","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01ML9NpRxuCvfjPcjXHaeGnF","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01SjebCFAzF61GWmjFoG23D3","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);","new_string":"  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n        spreadsheetRef.current = null;\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [windowDimension, empConfigsData, processApiDataForSpreadsheet, showSpreadsheet]);"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":916,"cache_read_input_tokens":91618,"output_tokens":600,"service_tier":"standard"}},"requestId":"req_011CRRXhf2jFR2cbXtjWzGvF","type":"assistant","uuid":"67f90cf0-68f5-41e6-81ae-7c977c3d614c","timestamp":"2025-07-24T08:29:59.407Z"}
{"parentUuid":"67f90cf0-68f5-41e6-81ae-7c977c3d614c","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01SjebCFAzF61GWmjFoG23D3","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n  1166→      }\n  1167→    }\n  1168→  }, [location]);\n  1169→\n  1170→  useEffect(() => {\n  1171→    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n  1172→      try {\n  1173→        prevEmpConfigsDataRef.current = empConfigsData;\n  1174→        setShowSpreadsheet(false);\n  1175→        spreadsheetRef.current = null;\n  1176→\n  1177→        const result = processApiDataForSpreadsheet(empConfigsData);\n  1178→        \n  1179→        setSpreadsheetData(result.data);\n  1180→        setSpreadsheetColumns(result.columns);\n  1181→        setModifiedData([]);\n  1182→        setSpreadsheetKey(prevKey => prevKey + 1);\n  1183→        setTimeout(() => {\n  1184→          setShowSpreadsheet(true);\n  1185→        }, 0);\n  1186→      } catch (error) {\n  1187→        console.error(\"Error processing API data:\", error);\n  1188→        toast.error(MESSAGES.DATA_LOAD_ERROR);\n  1189→      }\n  1190→    }\n  1191→  }, [windowDimension, empConfigsData, processApiDataForSpreadsheet, showSpreadsheet]);\n  1192→\n  1193→  return (\n  1194→    <>\n  1195→      <Header title=\"Employee Configurations\"/>"}]},"uuid":"462daf6f-6cb8-4c13-95a4-20ad6b6b5aac","timestamp":"2025-07-24T08:29:59.474Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);","newString":"  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n        spreadsheetRef.current = null;\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [windowDimension, empConfigsData, processApiDataForSpreadsheet, showSpreadsheet]);","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n      const worksheetCols = worksheet?.cols || []\n\n      for (let i = 0; i < worksheetCols.length; i++) {\n        const col = worksheetCols[i];\n\n        if (!Object.hasOwn(col, 'title')) {\n          try {\n            const cellIndex = col.x;\n            const colName = getColumnName(cellIndex );\n            if (colName) {\n              const colProp = col || {};\n              colProp.locked = true\n              colProp.readOnly= true\n              worksheet.setProperties(colName, colProp);\n            }\n          } catch (error) {\n            console.warn(`Error setting column ${col.x} to read-only:`, error);\n          }\n        }\n      }\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue) => {\n    try {\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [empConfigsData, processApiDataForSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":1172,"oldLines":6,"newStart":1172,"newLines":7,"lines":["       try {","         prevEmpConfigsDataRef.current = empConfigsData;","         setShowSpreadsheet(false);","+        spreadsheetRef.current = null;"," ","         const result = processApiDataForSpreadsheet(empConfigsData);","         "]},{"oldStart":1187,"oldLines":7,"newStart":1188,"newLines":7,"lines":["         toast.error(MESSAGES.DATA_LOAD_ERROR);","       }","     }","-  }, [empConfigsData, processApiDataForSpreadsheet]);","+  }, [windowDimension, empConfigsData, processApiDataForSpreadsheet, showSpreadsheet]);"," ","   return (","     <>"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"462daf6f-6cb8-4c13-95a4-20ad6b6b5aac","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01XfSfNSuvaUL1kyxpL8mXVB","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me replace the SpreadsheetContainer with direct Spreadsheet/Worksheet components:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1059,"cache_read_input_tokens":92534,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRRXiRuyEZDwNPD4umnRz","type":"assistant","uuid":"24c76dc9-d112-494c-8327-9f6564b9c100","timestamp":"2025-07-24T08:30:04.102Z"}
{"parentUuid":"24c76dc9-d112-494c-8327-9f6564b9c100","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01XfSfNSuvaUL1kyxpL8mXVB","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_018EKUDnZU8c74AB2PmYLSxy","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}","new_string":"                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <Spreadsheet\n                          ref={spreadsheetRef}\n                          license={licenceKey}\n                          editable={true}\n                          onevent={globalEventHandler}\n                          autoIncrement={false}\n                          nestedHeaders={NESTED_HEADERS}\n                          includeHeadersOnDownload={true}\n                          contextMenu={() => { return false }}\n                          className=\"jss_modern\"\n                        >\n                          <Worksheet\n                            key={spreadsheetKey}\n                            freezeColumns=\"2\"\n                            data={spreadsheetData}\n                            columns={spreadsheetColumns}\n                            nestedHeaders={NESTED_HEADERS}\n                            defaultColAlign=\"center\"\n                            search={false}\n                            tableOverflow={true}\n                            allowInsertRow={false}\n                            allowInsertColumn={false}\n                            allowDeletingRows={false}\n                            rowResize={false}\n                            minDimensions={[1, 1]}\n                          />\n                        </Spreadsheet>\n                    ) : ( <NoDataFound /> )}"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1059,"cache_read_input_tokens":92534,"output_tokens":1449,"service_tier":"standard"}},"requestId":"req_011CRRXiRuyEZDwNPD4umnRz","type":"assistant","uuid":"ff306132-df5a-4ab0-8507-7309a48e102c","timestamp":"2025-07-24T08:30:23.793Z"}
{"parentUuid":"ff306132-df5a-4ab0-8507-7309a48e102c","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018EKUDnZU8c74AB2PmYLSxy","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n  1240→                </CardHeader>\n  1241→\n  1242→                <CardBody>\n  1243→                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n  1244→                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n  1245→                      <Skeleton count={8} height={50} />\n  1246→                    ) : \n  1247→                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n  1248→                        <Spreadsheet\n  1249→                          ref={spreadsheetRef}\n  1250→                          license={licenceKey}\n  1251→                          editable={true}\n  1252→                          onevent={globalEventHandler}\n  1253→                          autoIncrement={false}\n  1254→                          nestedHeaders={NESTED_HEADERS}\n  1255→                          includeHeadersOnDownload={true}\n  1256→                          contextMenu={() => { return false }}\n  1257→                          className=\"jss_modern\"\n  1258→                        >\n  1259→                          <Worksheet\n  1260→                            key={spreadsheetKey}\n  1261→                            freezeColumns=\"2\"\n  1262→                            data={spreadsheetData}\n  1263→                            columns={spreadsheetColumns}\n  1264→                            nestedHeaders={NESTED_HEADERS}\n  1265→                            defaultColAlign=\"center\"\n  1266→                            search={false}\n  1267→                            tableOverflow={true}\n  1268→                            allowInsertRow={false}\n  1269→                            allowInsertColumn={false}\n  1270→                            allowDeletingRows={false}\n  1271→                            rowResize={false}\n  1272→                            minDimensions={[1, 1]}\n  1273→                          />\n  1274→                        </Spreadsheet>\n  1275→                    ) : ( <NoDataFound /> )}\n  1276→                  </div>\n  1277→                </CardBody>\n  1278→              </Card>\n  1279→            </Col>"}]},"uuid":"b68d8296-84a8-4dc8-a22c-144a38a7b42c","timestamp":"2025-07-24T08:30:23.916Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}","newString":"                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <Spreadsheet\n                          ref={spreadsheetRef}\n                          license={licenceKey}\n                          editable={true}\n                          onevent={globalEventHandler}\n                          autoIncrement={false}\n                          nestedHeaders={NESTED_HEADERS}\n                          includeHeadersOnDownload={true}\n                          contextMenu={() => { return false }}\n                          className=\"jss_modern\"\n                        >\n                          <Worksheet\n                            key={spreadsheetKey}\n                            freezeColumns=\"2\"\n                            data={spreadsheetData}\n                            columns={spreadsheetColumns}\n                            nestedHeaders={NESTED_HEADERS}\n                            defaultColAlign=\"center\"\n                            search={false}\n                            tableOverflow={true}\n                            allowInsertRow={false}\n                            allowInsertColumn={false}\n                            allowDeletingRows={false}\n                            rowResize={false}\n                            minDimensions={[1, 1]}\n                          />\n                        </Spreadsheet>\n                    ) : ( <NoDataFound /> )}","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n      const worksheetCols = worksheet?.cols || []\n\n      for (let i = 0; i < worksheetCols.length; i++) {\n        const col = worksheetCols[i];\n\n        if (!Object.hasOwn(col, 'title')) {\n          try {\n            const cellIndex = col.x;\n            const colName = getColumnName(cellIndex );\n            if (colName) {\n              const colProp = col || {};\n              colProp.locked = true\n              colProp.readOnly= true\n              worksheet.setProperties(colName, colProp);\n            }\n          } catch (error) {\n            console.warn(`Error setting column ${col.x} to read-only:`, error);\n          }\n        }\n      }\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue) => {\n    try {\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n        spreadsheetRef.current = null;\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [windowDimension, empConfigsData, processApiDataForSpreadsheet, showSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <SpreadsheetContainer\n                        spreadsheetKey={spreadsheetKey}\n                        spreadsheetData={spreadsheetData}\n                        daysColumns={spreadsheetColumns}\n                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}\n                        licenceKey={licenceKey}\n                        nestedHeaders={NESTED_HEADERS}\n                        isEditable={true}\n                        globalEventHandler={globalEventHandler}\n                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}\n                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}\n                        minimumDimensions={[1,1]}\n                      />\n                    ) : (\n                      <div className=\"text-center py-5\">\n                        <svg\n                          width=\"58\"\n                          height=\"58\"\n                          viewBox=\"0 0 58 58\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                          <path\n                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                            fill=\"#2381D9\"\n                          />\n                        </svg>\n                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                      </div>\n                    )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":1245,"oldLines":37,"newStart":1245,"newLines":34,"lines":["                       <Skeleton count={8} height={50} />","                     ) : ","                       !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (","-                        <SpreadsheetContainer","-                        spreadsheetKey={spreadsheetKey}","-                        spreadsheetData={spreadsheetData}","-                        daysColumns={spreadsheetColumns}","-                        sheetName={SPREADSHEET_CONFIG.SHEET_NAME}","-                        licenceKey={licenceKey}","-                        nestedHeaders={NESTED_HEADERS}","-                        isEditable={true}","-                        globalEventHandler={globalEventHandler}","-                        defaultColAlign={SPREADSHEET_CONFIG.COL_ALIGN}","-                        freezeColumns={SPREADSHEET_CONFIG.FREEZE_COLUMNS}","-                        minimumDimensions={[1,1]}","-                      />","-                    ) : (","-                      <div className=\"text-center py-5\">","-                        <svg","-                          width=\"58\"","-                          height=\"58\"","-                          viewBox=\"0 0 58 58\"","-                          fill=\"none\"","-                          xmlns=\"http://www.w3.org/2000/svg\"","+                        <Spreadsheet","+                          ref={spreadsheetRef}","+                          license={licenceKey}","+                          editable={true}","+                          onevent={globalEventHandler}","+                          autoIncrement={false}","+                          nestedHeaders={NESTED_HEADERS}","+                          includeHeadersOnDownload={true}","+                          contextMenu={() => { return false }}","+                          className=\"jss_modern\"","                         >","-                          <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />","-                          <path","-                            d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"","-                            fill=\"#2381D9\"","+                          <Worksheet","+                            key={spreadsheetKey}","+                            freezeColumns=\"2\"","+                            data={spreadsheetData}","+                            columns={spreadsheetColumns}","+                            nestedHeaders={NESTED_HEADERS}","+                            defaultColAlign=\"center\"","+                            search={false}","+                            tableOverflow={true}","+                            allowInsertRow={false}","+                            allowInsertColumn={false}","+                            allowDeletingRows={false}","+                            rowResize={false}","+                            minDimensions={[1, 1]}","                           />","-                        </svg>","-                        <h5 className=\"mt-2 mb-1\">No Data Found</h5>","-                      </div>","-                    )}","+                        </Spreadsheet>","+                    ) : ( <NoDataFound /> )}","                   </div>","                 </CardBody>","               </Card>"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"b68d8296-84a8-4dc8-a22c-144a38a7b42c","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01DnyVTFFpwiMorrVQVpunXk","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01597qy5ZBnGuSe4wRZRC1YK","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high"},{"id":"2","content":"Add calculateColumnWidths function with responsive breakpoints","status":"completed","priority":"high"},{"id":"3","content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"completed","priority":"high"},{"id":"4","content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"completed","priority":"high"},{"id":"5","content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium"},{"id":"6","content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"completed","priority":"medium"},{"id":"7","content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"completed","priority":"high"},{"id":"8","content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"completed","priority":"low"},{"id":"9","content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"completed","priority":"medium"},{"id":"10","content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"completed","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":2086,"cache_read_input_tokens":93593,"output_tokens":443,"service_tier":"standard"}},"requestId":"req_011CRRXkCimVYue4yeHJDaCK","type":"assistant","uuid":"0ef532fe-ea09-443e-8899-e4f9a6dc50a1","timestamp":"2025-07-24T08:30:35.931Z"}
{"parentUuid":"0ef532fe-ea09-443e-8899-e4f9a6dc50a1","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01597qy5ZBnGuSe4wRZRC1YK","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"aab8ffe4-2d0a-4108-86ee-d0a9089011ef","timestamp":"2025-07-24T08:30:35.986Z","toolUseResult":{"oldTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"completed","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"completed","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"in_progress","priority":"high","id":"4"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium","id":"5"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"pending","priority":"medium","id":"6"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"pending","priority":"high","id":"7"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"pending","priority":"low","id":"8"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"pending","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"pending","priority":"medium","id":"10"}],"newTodos":[{"content":"Add window dimension detection functionality (useState, useEffect, detectSize function)","status":"completed","priority":"high","id":"1"},{"content":"Add calculateColumnWidths function with responsive breakpoints","status":"completed","priority":"high","id":"2"},{"content":"Update baseColumns to use dynamic widths and add wrap: true property","status":"completed","priority":"high","id":"3"},{"content":"Add dynamic CSS injection for jss_content styles using useEffect","status":"completed","priority":"high","id":"4"},{"content":"Replace SpreadsheetContainer with direct Spreadsheet/Worksheet components","status":"completed","priority":"high","id":"7"},{"content":"Add spreadsheetRef and missing imports (NoDataFound, Spreadsheet, Worksheet)","status":"completed","priority":"medium","id":"5"},{"content":"Update initializeSpreadsheet to handle column locking for non-titled columns","status":"completed","priority":"medium","id":"6"},{"content":"Add windowDimension dependency to processApiDataForSpreadsheet useEffect","status":"completed","priority":"medium","id":"9"},{"content":"Update globalEventHandler to match PTLWFConfigs parameter structure","status":"completed","priority":"medium","id":"10"},{"content":"Update CSS class from ps-employeeConfigs to ps-employeeConfigs in wrapper div","status":"completed","priority":"low","id":"8"}]}}
{"parentUuid":"aab8ffe4-2d0a-4108-86ee-d0a9089011ef","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01WJCLGCEwiofDAFCyGtkUNs","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me clean up the unused imports by removing the SpreadsheetContainer import and SPREADSHEET_CONFIG usage:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":950,"cache_read_input_tokens":95679,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRRXm68AsixbhR5KYWBN3","type":"assistant","uuid":"38c3fd57-d137-462c-a592-55bfd72c568f","timestamp":"2025-07-24T08:30:40.293Z"}
{"parentUuid":"38c3fd57-d137-462c-a592-55bfd72c568f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01WJCLGCEwiofDAFCyGtkUNs","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01RfaQbr98tgPoep8XBqu3Xa","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"import SpreadsheetContainer from \\\"../../Components/Common/SpreadsheetContainer\\\";","new_string":""}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":950,"cache_read_input_tokens":95679,"output_tokens":160,"service_tier":"standard"}},"requestId":"req_011CRRXm68AsixbhR5KYWBN3","type":"assistant","uuid":"ea234f43-2a48-4815-8de8-ef50b721e3fa","timestamp":"2025-07-24T08:30:41.461Z"}
{"parentUuid":"ea234f43-2a48-4815-8de8-ef50b721e3fa","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"String to replace not found in file.\nString: import SpreadsheetContainer from \\\"../../Components/Common/SpreadsheetContainer\\\";","is_error":true,"tool_use_id":"toolu_01RfaQbr98tgPoep8XBqu3Xa"}]},"uuid":"e7d0fef6-60b1-49a1-9ed7-cc8cdc21def0","timestamp":"2025-07-24T08:30:41.513Z","toolUseResult":"Error: String to replace not found in file.\nString: import SpreadsheetContainer from \\\"../../Components/Common/SpreadsheetContainer\\\";"}
{"parentUuid":"e7d0fef6-60b1-49a1-9ed7-cc8cdc21def0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01HKtCazu6o5jGpAoG3FigwX","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Let me check the current imports structure:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":209,"cache_read_input_tokens":96629,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRRXmW4aoHYLxuuZJNsFa","type":"assistant","uuid":"9c4707e6-ab91-4746-bf22-a7ae15a3158a","timestamp":"2025-07-24T08:30:45.051Z"}
{"parentUuid":"9c4707e6-ab91-4746-bf22-a7ae15a3158a","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01HKtCazu6o5jGpAoG3FigwX","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Y7eoU99N2wBYrJHYfXx2dB","name":"Read","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","limit":20}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":209,"cache_read_input_tokens":96629,"output_tokens":106,"service_tier":"standard"}},"requestId":"req_011CRRXmW4aoHYLxuuZJNsFa","type":"assistant","uuid":"f9fea87a-a3eb-41ec-bc68-d31a3c4f61a0","timestamp":"2025-07-24T08:30:45.851Z"}
{"parentUuid":"f9fea87a-a3eb-41ec-bc68-d31a3c4f61a0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Y7eoU99N2wBYrJHYfXx2dB","type":"tool_result","content":"     1→import { useDispatch, useSelector } from \"react-redux\";\n     2→import React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\n     3→import { useLocation } from \"react-router-dom\";\n     4→import { getEmployeeConfigsData } from \"../../store/payroll/actions\";\n     5→import { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\n     6→import { licenceKey } from \"../../Components/constants/licence_key\";\n     7→import { useMutation } from \"@tanstack/react-query\";\n     8→import { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\n     9→import Header from \"../../Layouts/Header\";\n    10→import Skeleton from \"react-loading-skeleton\";\n    11→import \"react-loading-skeleton/dist/skeleton.css\";\n    12→import _ from \"lodash\";\n    13→import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\n    14→import { toast } from \"react-toastify\";\n    15→import { NoDataFound } from \"../../Components/Common/NoDataFound\";\n    16→import { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n    17→\n    18→const THEME = {\n    19→  ACTIVE_COLOR: \"#039855\",\n    20→  DEFAULT_COLOR: \"#000000\"\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"3a33120f-8a1e-4f5d-858e-48c6fa893c9f","timestamp":"2025-07-24T08:30:45.895Z","toolUseResult":{"type":"text","file":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","content":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"","numLines":20,"startLine":1,"totalLines":1287}}}
{"parentUuid":"3a33120f-8a1e-4f5d-858e-48c6fa893c9f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01XP4YLqAcB6zp9TvUijihQk","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017F5HutrKCsmukEqmwJzs49","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","old_string":"import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";","new_string":"import { toast } from \"react-toastify\";"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":546,"cache_read_input_tokens":96838,"output_tokens":160,"service_tier":"standard"}},"requestId":"req_011CRRXmqkGC2LeWsekYcHgH","type":"assistant","uuid":"b8c3e6ac-c18f-42d0-8c5c-2a580d9c6ba0","timestamp":"2025-07-24T08:30:51.771Z"}
{"parentUuid":"b8c3e6ac-c18f-42d0-8c5c-2a580d9c6ba0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017F5HutrKCsmukEqmwJzs49","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     9→import Header from \"../../Layouts/Header\";\n    10→import Skeleton from \"react-loading-skeleton\";\n    11→import \"react-loading-skeleton/dist/skeleton.css\";\n    12→import _ from \"lodash\";\n    13→import { toast } from \"react-toastify\";\n    14→import { NoDataFound } from \"../../Components/Common/NoDataFound\";\n    15→import { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n    16→\n    17→const THEME = {"}]},"uuid":"0dac936e-7037-4dfb-9b62-1a7cd63ecaa9","timestamp":"2025-07-24T08:30:51.855Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/PayrollManagement/EmployeeConfigs.jsx","oldString":"import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";","newString":"import { toast } from \"react-toastify\";","originalFile":"import { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getEmployeeConfigsData } from \"../../store/payroll/actions\";\nimport { saveEmployeeConfigsApi } from \"../../helpers/awsapibackend_helper\";\nimport { licenceKey } from \"../../Components/constants/licence_key\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Container, Card, Row, Col, CardHeader, CardBody, Spinner } from \"reactstrap\";\nimport Header from \"../../Layouts/Header\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport _ from \"lodash\";\nimport SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";\nimport { toast } from \"react-toastify\";\nimport { NoDataFound } from \"../../Components/Common/NoDataFound\";\nimport { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";\n\nconst THEME = {\n  ACTIVE_COLOR: \"#039855\",\n  DEFAULT_COLOR: \"#000000\"\n};\n\nconst SPREADSHEET_CONFIG = {\n  SHEET_NAME: \"EmployeeConfigs\",\n  FREEZE_COLUMNS: \"2\",\n  COL_ALIGN: \"center\",\n  REFRESH_DELAY: 1\n};\n\nconst COLUMN_TYPES = {\n  DROPDOWN: \"dropdown\",\n  NUMERIC: \"numeric\",\n  TEXT: \"text\"\n};\n\nconst TOGGLE_OPTIONS = [\"On\", \"Off\"];\n\nconst MESSAGES = {\n  VALIDATION_ERROR: \"Validation failed: Please ensure all enabled Bonus and Incentive entries have valid amounts and reasons.\",\n  NO_CHANGES: \"No changes to save\",\n  SAVE_SUCCESS: \"Configuration saved successfully\",\n  SAVE_ERROR: \"Error saving configuration\",\n  DATA_LOAD_ERROR: \"Error loading employee configuration data\",\n  UNEXPECTED_ERROR: \"An unexpected error occurred\"\n};\n\nconst API_KEYS = {\n  ORG_CONFIG: \"org_config\",\n  BONUS_INCENTIVE_ID: \"bonus_incentive_id\",\n  ROW_ID: \"row_id\",\n  CODE: \"employee_code\",\n  EMPLOYEE_NAME: \"employee_name\",\n  DEPARTMENT: \"department\",\n  DESIGNATION: \"designation\",\n  BONUS: \"bonus\",\n  BONUS_AMOUNT: \"bonus_amount\",\n  BONUS_REASON: \"bonus_reason\",\n  RECURSIVE_BONUS: \"recursive_bonus\",\n  INCENTIVE: \"incentive\",\n  INCENTIVE_AMOUNT: \"incentive_amount\",\n  INCENTIVE_REASON: \"incentive_reason\"\n};\n\nconst NESTED_HEADERS = [\n  [\n    { title: \"Employees\", colspan: \"2\", frozen: true, align: \"center\" },\n    { title: \"Hierarchy\", colspan: \"2\", frozen: false, align: \"center\" },\n    { title: \"Bonus\", colspan: \"4\", frozen: false, align: \"center\" },\n    { title: \"Incentive\", colspan: \"3\", frozen: false, align: \"center\", },\n  ]\n];\n\nconst columnNamesCache = new Map();\nconst getColumnName = (index) => {\n  if (index === undefined || index < 0) return '';\n\n  if (columnNamesCache.has(index)) {\n    return columnNamesCache.get(index);\n  }\n  \n  let name = \"\";\n  let tempIndex = index;\n  while (tempIndex >= 0) {\n    name = String.fromCharCode((tempIndex % 26) + 65) + name;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  columnNamesCache.set(index, name);\n  return name;\n};\n\nfunction EmployeeConfigs() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [spreadsheetColumns, setSpreadsheetColumns] = useState([]);\n  const [spreadsheetKey, setSpreadsheetKey] = useState(0);\n  const [modifiedData, setModifiedData] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showSpreadsheet, setShowSpreadsheet] = useState(true);\n  const [pageHeader, setPageHeader] = useState(null);\n  const isRestoringDropdownValueRef = useRef(false);\n  const prevEmpConfigsDataRef = useRef(null);\n  const spreadsheetRef = useRef(null);\n\n  //  dynamic window dimension detection start\n  const [windowDimension, detectHW] = useState({\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  })\n  const detectSize = () => {\n    detectHW({\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight\n    })\n  }\n  useEffect(() => {\n    window.addEventListener('resize', detectSize)\n    return () => {\n      window.removeEventListener('resize', detectSize)\n    }\n  }, [])\n  //  dynamic window dimension detection end\n  \n  // Calculate dynamic column widths based on window dimension\n  const calculateColumnWidths = useCallback(() => {\n    const screenWidth = windowDimension.innerWidth;\n    \n    // Define breakpoints and corresponding widths\n    if (screenWidth <= 768) { // Mobile\n      return {\n        empId: 50,\n        empCode: 80,\n        name: 120,\n        department: 100,\n        designation: 100,\n        dayColumn: 120\n      };\n    } else if (screenWidth <= 1024) { // Tablet\n      return {\n        empId: 50,\n        empCode: 90,\n        name: 140,\n        department: 120,\n        designation: 120,\n        dayColumn: 140\n      };\n    } else if (screenWidth <= 1366) { // Small desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else if (screenWidth <= 1620) { // Standard desktop\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    } else { // Large desktop/4K\n      return {\n        empId: 50,\n        empCode: 100,\n        name: 130,\n        department: 130,\n        designation: 130,\n        dayColumn: 150\n      };\n    }\n  }, [windowDimension]);\n  \n  // Dynamic CSS for jss_content jss_content_overflow class\n  useEffect(() => {\n    const calculateDynamicDimensions = () => {\n      const screenWidth = windowDimension.innerWidth;\n      const screenHeight = windowDimension.innerHeight;\n      // console.log('Screen dimensions:', screenWidth, screenHeight);\n      \n      // Calculate dynamic height based on screen size and UI elements\n      let dynamicHeight = screenHeight;\n      \n      // Account for common UI elements (header, footer, margins, etc.)\n      const reservedHeight = 20; // Adjust this value based on your header/footer height\n      \n      // Define responsive height breakpoints\n      if (screenHeight <= 600) { // Small screens\n        dynamicHeight = screenHeight - 120;\n      } else if (screenHeight <= 800) { // Medium screens\n        dynamicHeight = screenHeight - 160;\n      } else if (screenHeight <= 1080) { // Standard screens\n        dynamicHeight = screenHeight - reservedHeight;\n      } else { // Large screens\n        dynamicHeight = screenHeight - 250;\n      }\n      \n      // Ensure minimum height\n      dynamicHeight = Math.max(dynamicHeight, 400);\n      \n      return { \n        width: screenWidth, \n        height: screenHeight - 120, \n        dynamicHeight: dynamicHeight - 120\n      };\n    };\n\n    const updateJSSContentStyles = () => {\n      const { width, height, dynamicHeight } = calculateDynamicDimensions();\n      \n      // Remove existing style if it exists\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n      \n      // Create new style element\n      const style = document.createElement('style');\n      style.id = 'jss-content-dynamic-styles';\n      style.textContent = `\n        .jss_content.jss_content_overflow {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw ;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e0e0e0 !important;\n          border-radius: 4px !important;\n          position: relative !important;\n        }\n\n        .jss_content.jss_content_overflow.jss_modern {\n          width: ${width + 200}px !important;\n          height: ${dynamicHeight}px !important;\n          max-height: ${height * 0.9}px !important;\n          max-width: 90vw;\n          overflow-x: auto !important;\n          overflow-y: auto !important;\n          border: 1px solid #e1e5e9 !important;\n          border-radius: 8px !important;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n          position: relative !important;\n          --jss-border-color: #e1e5e9;\n          --jss-header-background: #E3F1FF;\n          --jss-selected-background: #e3f2fd;\n          --jss-hover-background: #f5f5f5;\n        }\n        \n        .jss_content.jss_content_overflow table,\n        .jss_content.jss_content_overflow.jss_modern table {\n          width: 100% !important;\n          min-width: fit-content !important;\n        }\n\n        /* Modern styling for jss_modern class */\n        .jss_modern .jss_corner,\n        .jss_modern .jss_selectall {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        .jss_modern .jss_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 9 !important;\n        }\n\n        .jss_modern .jss_row_header {\n          background: var(--jss-header-background) !important;\n          font-weight: 500 !important;\n          color: #6c757d !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          position: sticky !important;\n          left: 0 !important;\n          z-index: 8 !important;\n        }\n\n        .jss_modern .jss_cell {\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          transition: background-color 0.2s ease !important;\n        }\n\n        .jss_modern .jss_cell:hover {\n          background-color: var(--jss-hover-background) !important;\n        }\n\n        .jss_modern .jss_cell.jss_selected {\n          background-color: var(--jss-selected-background) !important;\n          border-color: #2196f3 !important;\n        }\n\n        .jss_modern .jss_nested {\n          background: #E3F1FF !important;\n          border: 1px solid #f0f0f0 !important;\n          border-color: #f0f0f0 !important;\n          font-weight: 600 !important;\n          color: #495057 !important;\n          position: sticky !important;\n          top: 0 !important;\n          z-index: 10 !important;\n        }\n\n        /* Fix for content not overlapping with sticky headers */\n        .jss_modern .jss_content {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        .jss_modern .jss_cell {\n          position: relative !important;\n          z-index: 1 !important;\n        }\n\n        @media (min-width: 1680px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 92vw !important;\n          }\n        }\n        @media (max-width: 1366px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            max-width: 88.9vw ;\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 88.9vw !important;\n            height: ${Math.max(dynamicHeight * 0.8, 350)}px !important;\n            max-height: ${height * 0.85}px !important;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            width: 98vw !important;\n            height: ${Math.max(dynamicHeight * 0.75, 300)}px !important;\n            max-height: ${height * 0.8}px !important;\n          }\n        }\n        \n        @media (min-height: 1200px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.min(dynamicHeight, height * 0.85)}px !important;\n          }\n        }\n        \n        @media (max-height: 600px) {\n          .jss_content.jss_content_overflow,\n          .jss_content.jss_content_overflow.jss_modern {\n            height: ${Math.max(height - 100, 250)}px !important;\n          }\n        }\n      `;\n      \n      document.head.appendChild(style);\n    };\n    \n    // Update styles when component mounts and when window dimension changes\n    updateJSSContentStyles();\n    \n    // Cleanup function\n    return () => {\n      const existingStyle = document.getElementById('jss-content-dynamic-styles');\n      if (existingStyle) {\n        existingStyle.remove();\n      }\n    };\n  }, [windowDimension]);\n\n  const { empConfigsData, isEmpConfigsloading } = useSelector((state) => ({\n    empConfigsData: state.Payroll.empConfigsData,\n    isEmpConfigsloading: state.Payroll.isEmpConfigsloading,\n  }));\n\n  const { mutate, isPending } = useMutation({\n    mutationFn: saveEmployeeConfigsApi,\n    onSuccess: (data) => {\n      if (data?.statusCode === 200) {\n        toast.success(data?.message || MESSAGES.SAVE_SUCCESS);\n        if (dateRange.start && dateRange.end) {\n          dispatch(\n            getEmployeeConfigsData({\n              effective_date_from: dateRange.start,\n              effective_date_to: dateRange.end,\n              config_name: 'bonus_and_incentives'\n            })\n          );\n        }\n      } else {\n        toast.error(data?.message || MESSAGES.SAVE_ERROR);\n      }\n      setIsSaving(false);\n    },\n    onError: (error) => {\n      console.error(\"API Error:\", error);\n      toast.error(error?.message || MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    },\n  });\n\n  const baseColumns = useMemo(() => {\n    const columnWidths = calculateColumnWidths();\n    return [\n      { title: \"Emp ID\", width: columnWidths.empId, readOnly: true, filter: true, wrap: true },\n      { title: \"Name\", width: columnWidths.name, readOnly: true, filter: true, wrap: true },\n      { title: \"Department\", width: columnWidths.department, readOnly: true, filter: true, wrap: true },\n      { title: \"Designation\", width: columnWidths.designation, readOnly: true, filter: true, wrap: true },\n      { title: \"Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Bonus Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Bonus Reason\", width: columnWidths.dayColumn, wrap: true },\n      { title: \"Repeat Bonus\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive\", width: columnWidths.dayColumn, type: COLUMN_TYPES.DROPDOWN, source: TOGGLE_OPTIONS, wrap: true },\n      { title: \"Incentive Amount\", width: columnWidths.dayColumn, type: COLUMN_TYPES.NUMERIC, decimal: '.', mask: '#,##0.00', align: 'right', wrap: true },\n      { title: \"Incentive Reason\", width: columnWidths.dayColumn, wrap: true },\n    ];\n  }, [calculateColumnWidths]);\n\n  const columnIndexMap = useMemo(() => ({\n    \"Emp ID\": 0,\n    \"Name\": 1,\n    \"Department\": 2,\n    \"Designation\": 3,\n    \"Bonus\": 4,\n    \"Bonus Amount\": 5,\n    \"Bonus Reason\": 6,\n    \"Repeat Bonus\": 7,\n    \"Incentive\": 8,\n    \"Incentive Amount\": 9,\n    \"Incentive Reason\": 10,\n  }), []);\n\n  const { bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex } = useMemo(() => ({\n    bonusIndex: columnIndexMap[\"Bonus\"],\n    bonusAmountIndex: columnIndexMap[\"Bonus Amount\"],\n    bonusReasonIndex: columnIndexMap[\"Bonus Reason\"],\n    recursiveBonusIndex: columnIndexMap[\"Repeat Bonus\"],\n    incentiveIndex: columnIndexMap[\"Incentive\"],\n    incentiveAmountIndex: columnIndexMap[\"Incentive Amount\"],\n    incentiveReasonIndex: columnIndexMap[\"Incentive Reason\"]\n  }), [columnIndexMap]);\n  \n  const { bonusRelatedCells, incentiveRelatedCells } = useMemo(() => ({\n    bonusRelatedCells: [bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex],\n    incentiveRelatedCells: [incentiveIndex, incentiveAmountIndex, incentiveReasonIndex]\n  }), [\n    bonusIndex, bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex,\n    incentiveIndex, incentiveAmountIndex, incentiveReasonIndex\n  ]);\n\n  const setCellStyle = useCallback((worksheet, cellIndexes, rowIndex, styleProperty, styleValue) => {\n    if (!worksheet || !Array.isArray(cellIndexes) || rowIndex === undefined) return;\n    try {\n      const existingStyles = worksheet.getStyle() || {};\n      const newStyles = { ...existingStyles };\n      \n      for (let i = 0; i < cellIndexes.length; i++) {\n        const index = cellIndexes[i];\n        if (index === undefined || index < 0) continue;\n        \n        const cellPosition = `${getColumnName(index)}${parseInt(rowIndex) + 1}`;\n        \n        if (styleValue) {\n          newStyles[cellPosition] = `${styleProperty}: ${styleValue}`;\n        } else {\n          delete newStyles[cellPosition];\n        }\n      }\n\n      worksheet.setStyle(newStyles);\n    } catch (error) {\n      console.error(\"Error setting cell styles:\", error);\n    }\n  }, []);\n\n  const setCellsReadOnly = useCallback((worksheet, indexes, rowIndex, isReadOnly) => {\n    if (!worksheet || !Array.isArray(indexes) || rowIndex === undefined) return;\n\n    try {\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n        if (index < 0 || !baseColumns[index]) continue;\n        \n        worksheet.setProperty(index, rowIndex, {\n          ...baseColumns[index],\n          readOnly: isReadOnly\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting readOnly property:\", error);\n    }\n  }, [baseColumns]);\n\n  const transformRowDataToObject = useCallback((rowData, columns) => {\n    if (!rowData || !columns || !Array.isArray(rowData) || !Array.isArray(columns)) {\n      return {};\n    }\n    \n    try {\n      const values = rowData.map((cell) => cell?.v);\n      const keys = columns.map((col) => col?.title);\n      const result =  _.zipObject(keys, values);\n      return result;\n    } catch (error) {\n      console.error(\"Error transforming row data:\", error);\n      return {};\n    }\n  }, []);\n\n\n  const processApiDataForSpreadsheet = useCallback((configsData) => {\n    if (!configsData) return { data: [], columns: [] };\n    \n    try {\n      const orgConfig = configsData[API_KEYS.ORG_CONFIG] || {};\n      const employeeKeys = Object.keys(configsData).filter(key => key !== API_KEYS.ORG_CONFIG);\n      const dataRows = new Array(employeeKeys.length);\n\n      for (let i = 0; i < employeeKeys.length; i++) {\n        const empKey = employeeKeys[i];\n        const emp = configsData[empKey];\n        if (!emp) continue;\n\n        const isEntryExistInDb = emp?.[API_KEYS.BONUS_INCENTIVE_ID] && parseInt(emp[API_KEYS.BONUS_INCENTIVE_ID]) > 0;\n        \n        dataRows[i] = {\n          \"Emp ID\": emp[API_KEYS.CODE] || \"\",\n          \"Name\": emp[API_KEYS.EMPLOYEE_NAME] || \"\",\n          \"Department\": emp[API_KEYS.DEPARTMENT] || \"\",\n          \"Designation\": emp[API_KEYS.DESIGNATION] || \"\",\n          \"Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Bonus Amount\": isEntryExistInDb ? (emp?.[API_KEYS.BONUS_AMOUNT] || 0)  : (orgConfig?.[API_KEYS.BONUS_AMOUNT] || 0),\n          \"Bonus Reason\": isEntryExistInDb  ? (emp?.[API_KEYS.BONUS_REASON] || \"\") : (orgConfig?.[API_KEYS.BONUS_REASON] || \"\"),\n          \"Repeat Bonus\": isEntryExistInDb ? (emp?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.RECURSIVE_BONUS] === 1 ? \"On\" : \"Off\"),\n          \"Incentive\": isEntryExistInDb  ? (emp?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\") : (orgConfig?.[API_KEYS.INCENTIVE] === 1 ? \"On\" : \"Off\"),\n          \"Incentive Amount\": isEntryExistInDb ? (emp?.[API_KEYS.INCENTIVE_AMOUNT] || 0) : (orgConfig?.[API_KEYS.INCENTIVE_AMOUNT] || 0),\n          \"Incentive Reason\": isEntryExistInDb ? (emp[API_KEYS.INCENTIVE_REASON] || \"\") : (orgConfig[API_KEYS.INCENTIVE_REASON] || \"\"),\n        };\n      }\n        \n      const filteredRows = dataRows.filter(Boolean);\n\n      return { \n        data: filteredRows, \n        columns: baseColumns\n      };\n    } catch (error) {\n      console.error(\"Error processing API data:\", error);\n      return { data: [], columns: [] };\n    }\n  }, [baseColumns]);\n\n  const updateRelatedFieldsData = useCallback((rowIndex, worksheet, toggleData) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    try {\n      const { toggleField, oldValue, newValue, relatedFields, cellIndexes, isToggleOn } = toggleData;\n      \n      if (Array.isArray(relatedFields) && relatedFields.length > 0) {\n        for (let i = 0; i < relatedFields.length; i++) {\n          const field = relatedFields[i];\n          if (field.index !== undefined && field.index >= 0) {\n            worksheet.setValueFromCoords(field.index, rowIndex, field.value);\n          }\n        }\n      }\n      \n      setCellStyle(worksheet, cellIndexes, rowIndex, \"color\", isToggleOn ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n      \n      if (Array.isArray(cellIndexes) && cellIndexes.length > 1) {\n        const dependentFields = cellIndexes.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, !isToggleOn);\n      }\n      \n      setModifiedData(prev => {\n        const rowData = worksheet?.records ? worksheet.records[rowIndex] : null;\n        if (!rowData) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n        \n        const changes = {\n          [toggleField]: { newValue, oldValue }\n        };\n        \n        if (Array.isArray(relatedFields)) {\n          for (const field of relatedFields) {\n            if (field.name) {\n              changes[field.name] = { \n                newValue: field.value, \n                oldValue: rowDataObject[field.name] \n              };\n            }\n          }\n        }\n        \n        if (existingRowIndex >= 0) {\n          const updatedData = [...prev];\n          updatedData[existingRowIndex] = {\n            ...updatedData[existingRowIndex],\n            rowData: rowDataObject,\n            changes: { ...updatedData[existingRowIndex].changes, ...changes }\n          };\n          return updatedData;\n        } else {\n          return [\n            ...prev,\n            { rowIndex: String(rowIndex), rowData: rowDataObject, changes }\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating related fields:\", error);\n    }\n  }, [setCellStyle, setCellsReadOnly, transformRowDataToObject, spreadsheetColumns]);\n\n  const trackCellChange = useCallback((worksheet, colIndex, rowIndex, newValue, oldValue) => {\n    if (newValue === oldValue || !worksheet) return;\n    \n    try {\n      setModifiedData(prev => {\n        const rowData = worksheet.records && worksheet.records[rowIndex];\n        if (!rowData) return prev;\n        \n        const columnTitle = spreadsheetColumns[colIndex]?.title;\n        if (!columnTitle) return prev;\n        \n        const rowDataObject = transformRowDataToObject(rowData, spreadsheetColumns);\n        const existingRowIndex = prev.findIndex(item => item.rowIndex === String(rowIndex));\n\n        if (existingRowIndex >= 0) {\n          const updatedRow = {\n            ...prev[existingRowIndex],\n            rowData: rowDataObject,\n            changes: {\n              ...prev[existingRowIndex].changes,\n              [columnTitle]: { newValue, oldValue },\n            },\n          };\n          \n          const newArray = [...prev];\n          newArray[existingRowIndex] = updatedRow;\n          return newArray;\n        } else {\n          return [\n            ...prev,\n            {\n              rowIndex: String(rowIndex),\n              rowData: rowDataObject,\n              changes: {\n                [columnTitle]: { newValue, oldValue },\n              },\n            },\n          ];\n        }\n      });\n    } catch (error) {\n      console.error(\"Error tracking cell change:\", error);\n    }\n  }, [spreadsheetColumns, transformRowDataToObject]);\n  \n  const processBonusToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Bonus\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: bonusRelatedCells,\n          relatedFields: [\n            { index: bonusAmountIndex, name: \"Bonus Amount\", value: 0 },\n            { index: bonusReasonIndex, name: \"Bonus Reason\", value: null },\n            { index: recursiveBonusIndex, name: \"Repeat Bonus\", value: 'Off' }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, bonusRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = bonusRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, bonusIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing bonus toggle:\", error);\n    }\n  }, [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex, bonusRelatedCells,bonusIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const processIncentiveToggle = useCallback((worksheet, rowIndex, newValue, oldValue) => {\n    if (!worksheet || rowIndex === undefined) return;\n    \n    const isToggleOn = newValue === \"On\";\n    \n    try {\n      if (!isToggleOn) {\n        updateRelatedFieldsData(rowIndex, worksheet, {\n          toggleField: \"Incentive\",\n          oldValue,\n          newValue,\n          isToggleOn,\n          cellIndexes: incentiveRelatedCells,\n          relatedFields: [\n            { index: incentiveAmountIndex, name: \"Incentive Amount\", value: 0 },\n            { index: incentiveReasonIndex, name: \"Incentive Reason\", value: null }\n          ]\n        });\n      } else {\n        setCellStyle(worksheet, incentiveRelatedCells, rowIndex, \"color\", THEME.ACTIVE_COLOR);\n        const dependentFields = incentiveRelatedCells.slice(1);\n        setCellsReadOnly(worksheet, dependentFields, rowIndex, false);\n        trackCellChange(worksheet, incentiveIndex, rowIndex, newValue, oldValue);\n      }\n    } catch (error) {\n      console.error(\"Error processing incentive toggle:\", error);\n    }\n  }, [incentiveAmountIndex, incentiveReasonIndex, incentiveRelatedCells, \n      incentiveIndex, updateRelatedFieldsData, setCellStyle, setCellsReadOnly, trackCellChange]);\n\n  const validateData = useCallback(() => {\n    if (!spreadsheetData || !Array.isArray(spreadsheetData) || spreadsheetData.length === 0) {\n      return false;\n    }\n    \n    try {\n      const latestData = _.cloneDeep(spreadsheetData);\n      const invalidRows = [];\n      \n      if (Array.isArray(modifiedData) && modifiedData.length > 0) {\n        modifiedData.forEach(item => {\n          const index = parseInt(item.rowIndex);\n          if (isNaN(index) || index < 0 || index >= latestData.length) return;\n          \n          if (item.changes) {\n            Object.entries(item.changes).forEach(([columnName, { newValue }]) => {\n              if (latestData[index] && columnName in latestData[index]) {\n                latestData[index][columnName] = newValue;\n              }\n            });\n          }\n        });\n      }\n      let isValid = true;\n    \n      latestData.forEach((row, index) => {\n        if (!row) return;\n        if (row[\"Bonus\"] === \"On\") {\n          const bonusAmount = parseFloat(row[\"Bonus Amount\"]) || 0;\n          const bonusReason = row[\"Bonus Reason\"];\n        \n          if (bonusAmount <= 0 || !bonusReason || String(bonusReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Bonus amount and reason are required when Bonus is On\"\n            });\n          }\n        }\n        \n        if (row[\"Incentive\"] === \"On\") {\n          const incentiveAmount = parseFloat(row[\"Incentive Amount\"]) || 0;\n          const incentiveReason = row[\"Incentive Reason\"];\n          \n          if (incentiveAmount <= 0 || !incentiveReason || String(incentiveReason).trim() === '') {\n            isValid = false;\n            invalidRows.push({\n              index,\n              employee: row[\"Name\"] || `Row ${index + 1}`,\n              issue: \"Incentive amount and reason are required when Incentive is On\"\n            });\n          }\n        }\n      });\n    \n      if (!isValid) {\n        console.warn(\"Validation failed with the following issues:\", invalidRows);\n        toast.error(MESSAGES.VALIDATION_ERROR);\n      }\n    \n      return isValid;\n    } catch (error) {\n      console.error(\"Error validating data:\", error);\n      toast.error(MESSAGES.UNEXPECTED_ERROR);\n      return false;\n    }\n  }, [spreadsheetData, modifiedData]);\n\n  const prepareDataForSave = useCallback(() => {\n    if (!modifiedData || modifiedData.length === 0 || !empConfigsData || !spreadsheetData) {\n      return null;\n    }\n    \n    try {\n      const changes = {};\n      \n      const modifiedRows = modifiedData\n        .map(item => ({ \n          rowIndex: parseInt(item.rowIndex), \n          data: item \n        }))\n        .sort((a, b) => a.rowIndex - b.rowIndex);\n      \n      for (const { rowIndex, data } of modifiedRows) {\n        const rowData = spreadsheetData[rowIndex];\n        if (!rowData) continue;\n        \n        const employeeCode = rowData[\"Emp ID\"];\n        if (!employeeCode || employeeCode === \"Org Configs\") continue;\n\n        const employeeEntry = Object.entries(empConfigsData).find(\n          ([key, value]) => key !== API_KEYS.ORG_CONFIG && value[API_KEYS.CODE]?.toString() === employeeCode?.toString()\n        );\n        \n        if (!employeeEntry) continue;\n        const [, employeeRecord] = employeeEntry;\n        const employeeId = employeeRecord[API_KEYS.ROW_ID];\n\n        if (!changes[employeeId]) {\n          changes[employeeId] = {\n            user_id: employeeId,\n            employee_id: employeeId,\n            employee_name: rowData[\"Name\"],\n            bonus: rowData[\"Bonus\"] === \"On\",\n            bonus_amount: parseFloat(rowData[\"Bonus Amount\"]) || 0,\n            bonus_reason: rowData[\"Bonus Reason\"] || \"\",\n            recursive_bonus: rowData[\"Repeat Bonus\"] === \"On\" ? 1 : 0,\n            incentive: rowData[\"Incentive\"] === \"On\",\n            incentive_amount: parseFloat(rowData[\"Incentive Amount\"]) || 0,\n            incentive_reason: rowData[\"Incentive Reason\"] || \"\"\n          };\n          \n          if (employeeRecord.bonus_incentive_id) {\n            changes[employeeId].id = employeeRecord.bonus_incentive_id;\n          }\n        }\n        \n        if (data.changes) {\n          const skipColumns = new Set([\"Emp ID\", \"Name\", \"Code\", \"Department\", \"Designation\"]);\n          const toggleColumns = new Set([\"Bonus\", \"Incentive\", \"Repeat Bonus\"]);\n          \n          Object.entries(data.changes).forEach(([columnName, { newValue }]) => {\n            if (toggleColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              changes[employeeId][apiFieldName] = newValue === \"On\";\n              \n              if (columnName === \"Repeat Bonus\") {\n                changes[employeeId][\"recursive_bonus\"] = newValue === \"On\" ? 1 : 0;\n              }\n            } else if (!skipColumns.has(columnName)) {\n              const apiFieldName = columnName.toLowerCase().replace(/\\s+/g, \"_\");\n              \n              if (columnName === \"Bonus Amount\" || columnName === \"Incentive Amount\") {\n                changes[employeeId][apiFieldName] = parseFloat(newValue) || 0;\n              } else {\n                changes[employeeId][apiFieldName] = newValue;\n              }\n            }\n          });\n        }\n      }\n      \n      return Object.keys(changes).length > 0 \n        ? { \n            changes, \n            config_name: 'bonus_and_incentives', \n            effective_date_from: dateRange.start, \n            effective_date_to: dateRange.end \n          } \n        : null;\n    } catch (error) {\n      console.error(\"Error preparing data for save:\", error);\n      return null;\n    }\n  }, [modifiedData, empConfigsData, spreadsheetData, dateRange]);\n\n  const handleSave = useCallback(() => {\n    if (isSaving || !modifiedData || modifiedData.length === 0) return;\n    \n    try {\n      setIsSaving(true);\n      \n      const isValid = validateData();\n      if (!isValid) {\n        setIsSaving(false);\n        return;\n      }\n      \n      const payload = prepareDataForSave();\n      if (!payload) {\n        toast.warning(MESSAGES.NO_CHANGES);\n        setIsSaving(false);\n        return;\n      }\n\n      mutate(payload);\n    } catch (error) {\n      console.error(\"Error saving configuration:\", error);\n      toast.error(MESSAGES.SAVE_ERROR);\n      setIsSaving(false);\n    }\n  }, [ isSaving, modifiedData, validateData,\n    prepareDataForSave, mutate ]);\n\n  const initializeSpreadsheet = useCallback((worksheet) => {\n    if (!worksheet || !worksheet.records) {\n      console.log(\"Worksheet not available for initialization\");\n      return;\n    }\n    \n    try {\n      const records = worksheet.records;\n      const worksheetCols = worksheet?.cols || []\n\n      for (let i = 0; i < worksheetCols.length; i++) {\n        const col = worksheetCols[i];\n\n        if (!Object.hasOwn(col, 'title')) {\n          try {\n            const cellIndex = col.x;\n            const colName = getColumnName(cellIndex );\n            if (colName) {\n              const colProp = col || {};\n              colProp.locked = true\n              colProp.readOnly= true\n              worksheet.setProperties(colName, colProp);\n            }\n          } catch (error) {\n            console.warn(`Error setting column ${col.x} to read-only:`, error);\n          }\n        }\n      }\n\n      for (let row = 0; row < records.length; row++) {\n        if (bonusIndex !== -1) {\n          const bonusValue = worksheet.getValueFromCoords(bonusIndex, row);\n          const isActive = bonusValue === \"On\";\n\n          setCellStyle(worksheet, bonusRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n          const bonusDependentFields = [bonusAmountIndex, bonusReasonIndex, recursiveBonusIndex];\n          setCellsReadOnly(worksheet, bonusDependentFields, row, !isActive);\n        }\n\n        if (incentiveIndex !== -1) {\n          const incentiveValue = worksheet.getValueFromCoords(incentiveIndex, row);\n          const isActive = incentiveValue === \"On\";\n          setCellStyle(worksheet, incentiveRelatedCells, row, \"color\", isActive ? THEME.ACTIVE_COLOR : THEME.DEFAULT_COLOR);\n            const incentiveDependentFields = [incentiveAmountIndex, incentiveReasonIndex];\n          setCellsReadOnly(worksheet, incentiveDependentFields, row, !isActive);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing spreadsheet:\", error);\n    }\n  }, [\n    bonusIndex, \n    bonusAmountIndex, \n    bonusReasonIndex, \n    recursiveBonusIndex,\n    bonusRelatedCells,\n    incentiveIndex,\n    incentiveAmountIndex,\n    incentiveReasonIndex,\n    incentiveRelatedCells,\n    setCellStyle,\n    setCellsReadOnly\n  ]);\n\n  const calculateSelectionDetails = useCallback((pxVal, pyVal, uxVal, uyVal) => {\n    if (typeof pxVal === \"number\" && typeof pyVal === \"number\" && \n        typeof uxVal === \"number\" && typeof uyVal === \"number\") {\n      const startCol = Math.min(pxVal, uxVal);\n      const endCol = Math.max(pxVal, uxVal);\n      const startRow = Math.min(pyVal, uyVal);\n      const endRow = Math.max(pyVal, uyVal);\n      const selectionCount = (endCol - startCol + 1) * (endRow - startRow + 1);\n      return { startCol, endCol, startRow, endRow, selectionCount };\n    }\n    return null;\n  }, []);\n\n  const validateToggleColumnPaste = useCallback((spreadsheetInstance) => {\n    if (!spreadsheetInstance.paste) return;\n\n    const originalPasteFunction = spreadsheetInstance.paste;\n    const toggleColumns = new Set([bonusIndex, recursiveBonusIndex, incentiveIndex]);\n    const amountColumns = new Set([bonusAmountIndex, incentiveAmountIndex]);\n    \n    spreadsheetInstance.paste = function(data, ...args) {\n      try {\n        const selectedColumns = spreadsheetInstance?.getSelectedColumns();\n        if (!selectedColumns) return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n\n        const isTargetingToggleColumn = selectedColumns?.some(columnIndex => toggleColumns.has(columnIndex));\n        const isTargetingAmountColumn = selectedColumns?.some(columnIndex => amountColumns.has(columnIndex));\n\n        if (isTargetingToggleColumn || isTargetingAmountColumn) {\n          let pastedValue = \"\";\n          if (typeof data === 'number' && args.length > 1 && typeof args[1] === 'string') {\n            pastedValue = args[1].trim().replace(/\\r?\\n$/, '');\n          } else if (typeof data === 'string') {\n            pastedValue = data.trim();\n          } else {\n            pastedValue = String(data).trim();\n          }\n\n          const isValidToggleValue = pastedValue === \"On\" || pastedValue === \"Off\";\n          const isValidAmountValue = !isNaN(pastedValue);\n\n          if (!isValidToggleValue && isTargetingToggleColumn) {\n            toast.warning(`Only \"On\" or \"Off\" values can be pasted in toggle columns.`);\n            return false;\n          }\n\n          if (!isValidAmountValue && isTargetingAmountColumn) {\n            toast.warning(`Please enter numeric values on amount fields`);\n            return false;\n          }\n        }\n\n        return originalPasteFunction.call(spreadsheetInstance, data, ...args);\n      } catch (error) {\n        console.error(\"Error validating paste operation:\", error);\n        toast.warning(\"Could not validate paste content.\");\n        return false;\n      }\n    };\n  }, [bonusIndex, recursiveBonusIndex, incentiveIndex, bonusAmountIndex,incentiveAmountIndex]);\n\n  const initializeSpreadsheetWithCustomBehaviors = useCallback((worksheetObject) => {\n    if (!worksheetObject?.worksheets || !worksheetObject.worksheets[0]) {\n      console.warn(\"Worksheet object not available for initialization\");\n      return;\n    }\n\n    const activeWorksheet = worksheetObject.worksheets[0];\n    if (activeWorksheet.hideIndex) { activeWorksheet.hideIndex(); }\n    initializeSpreadsheet(activeWorksheet);\n    validateToggleColumnPaste(activeWorksheet);\n  }, [initializeSpreadsheet, validateToggleColumnPaste]);\n\n  const processMultiCellCopyOperation = useCallback((worksheetObject, selectionCoordinates) => {\n    if (!selectionCoordinates || !Array.isArray(selectionCoordinates)) return;\n\n    const [startColPosition, startRowPosition, endColPosition, endRowPosition] = selectionCoordinates;\n    const selectionDetails = calculateSelectionDetails(\n      startColPosition, startRowPosition, endColPosition, endRowPosition\n    );\n\n    if (selectionDetails && selectionDetails.selectionCount > 1) {\n      worksheetObject.updateSelectionFromCoords(\n        selectionDetails.startCol, \n        selectionDetails.startRow, \n        selectionDetails.startCol, \n        selectionDetails.startRow\n      );\n      worksheetObject.copy();\n    }\n  }, [calculateSelectionDetails]);\n\n  const processCellValueChange = useCallback((worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue) => {\n    const columnNumber = parseInt(columnIndexStr, 10);\n    const isToggleControlColumn = columnNumber === bonusIndex || columnNumber === recursiveBonusIndex || columnNumber === incentiveIndex;\n\n    if (isRestoringDropdownValueRef.current) {\n      return;\n    }\n\n    const isEmptyValueBug = isToggleControlColumn && ((!newCellValue || newCellValue === \"\") && previousValue);\n\n    if (isEmptyValueBug) {\n      isRestoringDropdownValueRef.current = true;\n      setTimeout(() => {\n        worksheetObject.setValueFromCoords(columnNumber, rowIndexValue, previousValue);\n        setTimeout(() => {\n          isRestoringDropdownValueRef.current = false;\n        }, 50);\n      }, 100);\n    } else {\n      if (columnNumber === bonusIndex) {\n        processBonusToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else if (columnNumber === incentiveIndex) {\n        processIncentiveToggle(worksheetObject, rowIndexValue, newCellValue, previousValue);\n      } else {\n        trackCellChange(worksheetObject, columnIndexStr, rowIndexValue, newCellValue, previousValue);\n      }\n    }\n  }, [\n    bonusIndex,\n    recursiveBonusIndex,\n    incentiveIndex,\n    trackCellChange,\n    processBonusToggle,\n    processIncentiveToggle\n  ]);\n\n  const globalEventHandler = useCallback((eventName, worksheet, section, colIndex, rowIndex, newValue, oldValue) => {\n    try {\n      switch (eventName) {\n        case \"onload\":\n          return initializeSpreadsheetWithCustomBehaviors(worksheet);\n        case \"oncopy\":\n          return processMultiCellCopyOperation(worksheet, section);\n        case \"onchange\":\n          return processCellValueChange(worksheet, colIndex, rowIndex, newValue, oldValue);\n        default:\n          return;\n      }\n    } catch (error) {\n      console.error(\"Error handling spreadsheet event:\", error);\n    }\n  }, [initializeSpreadsheetWithCustomBehaviors, processMultiCellCopyOperation, processCellValueChange]);\n\n  useEffect(() => {\n    if (dateRange.start && dateRange.end) {\n      dispatch(\n        getEmployeeConfigsData({\n          effective_date_from: dateRange.start,\n          effective_date_to: dateRange.end,\n          config_name: 'bonus_and_incentives'\n        })\n      );\n    }\n  }, [dateRange, dispatch]);\n\n  useEffect(() => {\n    if (location.state) {\n      if (location.state.effective_date_from && location.state.effective_date_to) {\n        setDateRange({\n          start: location.state.effective_date_from,\n          end: location.state.effective_date_to\n        });\n      } else if (location.state.from && location.state.to) {\n        setDateRange({\n          start: location.state.from,\n          end: location.state.to\n        });\n      }\n\n      if (location.state.header) {\n        setPageHeader(location.state.header);\n      }\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (!_.isEmpty(empConfigsData) && empConfigsData !== prevEmpConfigsDataRef.current) {\n      try {\n        prevEmpConfigsDataRef.current = empConfigsData;\n        setShowSpreadsheet(false);\n        spreadsheetRef.current = null;\n\n        const result = processApiDataForSpreadsheet(empConfigsData);\n        \n        setSpreadsheetData(result.data);\n        setSpreadsheetColumns(result.columns);\n        setModifiedData([]);\n        setSpreadsheetKey(prevKey => prevKey + 1);\n        setTimeout(() => {\n          setShowSpreadsheet(true);\n        }, 0);\n      } catch (error) {\n        console.error(\"Error processing API data:\", error);\n        toast.error(MESSAGES.DATA_LOAD_ERROR);\n      }\n    }\n  }, [windowDimension, empConfigsData, processApiDataForSpreadsheet, showSpreadsheet]);\n\n  return (\n    <>\n      <Header title=\"Employee Configurations\"/>\n      <div className=\"page-content\">\n        <Container fluid>\n          <Row>\n            <Col lg={12}>\n              <Card className=\"ps-card\">\n                <CardHeader className=\"ps-card-header\">\n                  <div className=\"d-flex align-items-center\">\n                    <div>\n                      <h5 className=\"mb-0\">{pageHeader || \"Employee Configuration Data\"}</h5>\n                      {dateRange.start && dateRange.end && (\n                        <div className=\"date-range-display me-3\">\n                          <small>\n                            Showing data from{\" \"}\n                            <strong>\n                              {new Date(dateRange.start).toLocaleDateString()}\n                            </strong>{\" \"}\n                            to{\" \"}\n                            <strong>\n                              {new Date(dateRange.end).toLocaleDateString()}\n                            </strong>\n                          </small>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ms-auto d-flex align-items-center\">\n                      {/* Save Button */}\n                      <div className=\"ms-2\">\n                        <button\n                          onClick={handleSave}\n                          disabled={isSaving || modifiedData.length === 0}\n                          className=\"ps-btn sm-btn primary-btn\"\n                          aria-label=\"Save changes\"\n                          style={{\n                            opacity: isSaving || modifiedData.length === 0 ? 0.7 : 1,\n                          }}\n                        >\n                          {(isSaving || isPending) && (\n                            <Spinner size=\"sm\" className=\"me-2\" />\n                          )}\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardBody>\n                  <div className=\"ps-spredsheetTable table-responsive ps-table-wrapper position-relative ps-employeeConfigs\">\n                    {(isEmpConfigsloading || !showSpreadsheet) ? (\n                      <Skeleton count={8} height={50} />\n                    ) : \n                      !_.isEmpty(Object?.keys(empConfigsData || [])?.filter(key => key !== API_KEYS.ORG_CONFIG)) ? (\n                        <Spreadsheet\n                          ref={spreadsheetRef}\n                          license={licenceKey}\n                          editable={true}\n                          onevent={globalEventHandler}\n                          autoIncrement={false}\n                          nestedHeaders={NESTED_HEADERS}\n                          includeHeadersOnDownload={true}\n                          contextMenu={() => { return false }}\n                          className=\"jss_modern\"\n                        >\n                          <Worksheet\n                            key={spreadsheetKey}\n                            freezeColumns=\"2\"\n                            data={spreadsheetData}\n                            columns={spreadsheetColumns}\n                            nestedHeaders={NESTED_HEADERS}\n                            defaultColAlign=\"center\"\n                            search={false}\n                            tableOverflow={true}\n                            allowInsertRow={false}\n                            allowInsertColumn={false}\n                            allowDeletingRows={false}\n                            rowResize={false}\n                            minDimensions={[1, 1]}\n                          />\n                        </Spreadsheet>\n                    ) : ( <NoDataFound /> )}\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeConfigs;","structuredPatch":[{"oldStart":10,"oldLines":7,"newStart":10,"newLines":6,"lines":[" import Skeleton from \"react-loading-skeleton\";"," import \"react-loading-skeleton/dist/skeleton.css\";"," import _ from \"lodash\";","-import SpreadsheetContainer from \"../../Components/Common/SpreadsheetContainer\";"," import { toast } from \"react-toastify\";"," import { NoDataFound } from \"../../Components/Common/NoDataFound\";"," import { Spreadsheet, Worksheet } from \"@jspreadsheet/react\";"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"0dac936e-7037-4dfb-9b62-1a7cd63ecaa9","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_01JFRtQyJL17rRQHfZD619Tt","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfect! I have successfully applied all the improvements from PTLWFConfigs.jsx to EmployeeConfigs.jsx. Let me provide a summary of what was implemented:\n\n## ✅ All Tasks Completed Successfully!\n\n**High Priority Changes:**\n1. ✅ **Window dimension detection** - Added responsive window tracking with useState and useEffect\n2. ✅ **Dynamic column widths** - Implemented calculateColumnWidths with breakpoints for mobile, tablet, and desktop\n3. ✅ **Enhanced baseColumns** - Updated to use dynamic widths and added wrap: true for better text handling\n4. ✅ **Dynamic CSS injection** - Added comprehensive responsive styling system with modern jss_modern class support\n5. ✅ **Modern spreadsheet implementation** - Replaced SpreadsheetContainer with direct Spreadsheet/Worksheet components\n\n**Medium Priority Changes:**\n6. ✅ **Enhanced spreadsheet initialization** - Added column locking logic for non-titled columns and hideIndex functionality\n7. ✅ **Event handler consistency** - Updated globalEventHandler to match PTLWFConfigs parameter structure\n8. ✅ **Dependencies update** - Added windowDimension to processApiDataForSpreadsheet useEffect\n\n**Low Priority Changes:**\n9. ✅ **Import cleanup** - Added required imports (NoDataFound, Spreadsheet, Worksheet) and removed unused SpreadsheetContainer\n10. ✅ **Component consistency** - Maintained proper CSS class naming\n\n## Key Improvements Applied:\n- **Responsive Design**: The component now adapts to different screen sizes (mobile, tablet, desktop, 4K)\n- **Dynamic Styling**: CSS is injected dynamically based on screen dimensions\n- **Modern UI**: Uses jss_modern class with enhanced styling and sticky headers\n- **Better Performance**: Direct Spreadsheet/Worksheet usage instead of wrapper component\n- **Enhanced UX**: Proper column locking, text wrapping, and responsive column widths\n\nThe EmployeeConfigs.jsx file now has the same responsive behavior, dynamic styling, and modern spreadsheet implementation as PTLWFConfigs.jsx, providing a consistent user experience across both components."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":355,"cache_read_input_tokens":97384,"output_tokens":494,"service_tier":"standard"}},"requestId":"req_011CRRXnGQaqCPkBH7TDR4oq","type":"assistant","uuid":"24503372-642f-4f56-ae78-051b32de45e4","timestamp":"2025-07-24T08:31:05.457Z"}
{"parentUuid":"24503372-642f-4f56-ae78-051b32de45e4","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","type":"user","message":{"role":"user","content":"clear"},"uuid":"d728b491-68f8-43fb-9368-5ec058e484d4","timestamp":"2025-07-24T13:37:05.121Z"}
{"parentUuid":"d728b491-68f8-43fb-9368-5ec058e484d4","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"550fdce5-3aab-49c7-8b15-25be06d3afc7","version":"1.0.58","gitBranch":"migration_and_roster","message":{"id":"msg_019P9r5kk5c2NJHmGUNBaHkW","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I can see that you've updated the CSS class from `ps-employeeConfigs` to `ps-selection` in both files and added corresponding styles in the SCSS file. The changes look good - you've created a unified styling approach with the `.ps-selection` class that can be shared between components.\n\nThe implementation is now complete with all the responsive features successfully applied to the EmployeeConfigs.jsx file, matching the improvements from PTLWFConfigs.jsx. The components now have:\n\n- ✅ Dynamic window dimension detection\n- ✅ Responsive column width calculations  \n- ✅ Dynamic CSS injection for modern styling\n- ✅ Direct Spreadsheet/Worksheet implementation\n- ✅ Enhanced initialization with column locking\n- ✅ Consistent event handling\n- ✅ Proper dependency management\n- ✅ Unified CSS styling with the new `.ps-selection` class\n\nBoth components should now provide a consistent, responsive user experience across different screen sizes."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":99645,"cache_read_input_tokens":0,"output_tokens":226,"service_tier":"standard"}},"requestId":"req_011CRRw8cmAyAHPHTBgczx2X","type":"assistant","uuid":"3a4ba8ec-da6f-400b-bb27-82b7781b5c39","timestamp":"2025-07-24T13:37:16.876Z"}
