{"type":"summary","summary":"Terminal Command Execution and Screen Clearing","leafUuid":"5d933b22-13f3-4d6b-b15d-138f68c78efb"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":"<command-message>commit_buddy is runningâ€¦</command-message>\n<command-name>/commit_buddy</command-name>"},"uuid":"1d258126-ac66-4f38-9a1c-e67e6ba879b6","timestamp":"2025-08-01T11:57:43.093Z"}
{"parentUuid":"1d258126-ac66-4f38-9a1c-e67e6ba879b6","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"text","text":"see the changes, review it and give me one liner, very short and meanigful commit message."}]},"isMeta":true,"uuid":"cd36b290-8a34-4194-a51f-58ad475d2476","timestamp":"2025-08-01T11:57:43.093Z"}
{"parentUuid":"cd36b290-8a34-4194-a51f-58ad475d2476","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","message":{"id":"msg_016K9ovszYVTzkqAfMJ9WCmo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll review the changes and create a meaningful commit message for you."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":16183,"cache_read_input_tokens":0,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRgx2TcmK2FyjPC7wSmdj","type":"assistant","uuid":"ec797b6b-2af9-4b9c-9be3-3a98dba24afa","timestamp":"2025-08-01T11:57:46.256Z"}
{"parentUuid":"ec797b6b-2af9-4b9c-9be3-3a98dba24afa","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","message":{"id":"msg_016K9ovszYVTzkqAfMJ9WCmo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_013EciFySpkrarr64Hv52Yvc","name":"Bash","input":{"command":"git status","description":"Check current git status"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":16183,"cache_read_input_tokens":0,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRgx2TcmK2FyjPC7wSmdj","type":"assistant","uuid":"564465d4-c7bb-4670-852b-7f2389c3912f","timestamp":"2025-08-01T11:57:48.065Z"}
{"parentUuid":"564465d4-c7bb-4670-852b-7f2389c3912f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","message":{"id":"msg_016K9ovszYVTzkqAfMJ9WCmo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01FswLcdCGyhvUn42CMC8tkc","name":"Bash","input":{"command":"git diff --cached","description":"Show staged changes"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":16183,"cache_read_input_tokens":0,"output_tokens":201,"service_tier":"standard"}},"requestId":"req_011CRgx2TcmK2FyjPC7wSmdj","type":"assistant","uuid":"b685264a-5105-45de-83a0-ecd20d4a00b3","timestamp":"2025-08-01T11:57:48.160Z"}
{"parentUuid":"b685264a-5105-45de-83a0-ecd20d4a00b3","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","message":{"id":"msg_016K9ovszYVTzkqAfMJ9WCmo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01BGYgvQ56MfbG5vA2X9trVX","name":"Bash","input":{"command":"git diff","description":"Show unstaged changes"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":16183,"cache_read_input_tokens":0,"output_tokens":201,"service_tier":"standard"}},"requestId":"req_011CRgx2TcmK2FyjPC7wSmdj","type":"assistant","uuid":"89fa28e3-11b4-4da8-ba19-4aab30252a38","timestamp":"2025-08-01T11:57:48.219Z"}
{"parentUuid":"89fa28e3-11b4-4da8-ba19-4aab30252a38","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FswLcdCGyhvUn42CMC8tkc","type":"tool_result","content":"diff --git a/backend/lambda_functions/payroll_get_employees_api.js b/backend/lambda_functions/payroll_get_employees_api.js\nindex 9dad0bd1..efa66322 100644\n--- a/backend/lambda_functions/payroll_get_employees_api.js\n+++ b/backend/lambda_functions/payroll_get_employees_api.js\n@@ -383,8 +383,8 @@ exports.handler = async (event, context) => {\n             employees as emp \n             LEFT JOIN departments as dept ON dept.id = emp.department_id and dept.ho_id = emp.ho_id\n             LEFT JOIN designations as desig ON desig.id = emp.designation_id and desig.ho_id = emp.ho_id\n-            LEFT JOIN employee_shifts_new AS esn ON esn.employee_id = emp.id AND esn.status = 1\n-            LEFT JOIN shifts AS sh ON sh.id = esn.shift_id\n+            LEFT JOIN employee_shift_assignments AS esn ON esn.employee_id = emp.id AND esn.status = 1\n+            LEFT JOIN shifts AS sh ON sh.id = esn.shift_id AND sh.status = 1\n             LEFT JOIN employee_branches AS eb ON eb.employee_id = emp.id and eb.status = 1\n             LEFT JOIN organizations AS orgs ON orgs.id = eb.branch_id\n           WHERE \ndiff --git a/backend/lambda_functions/payroll_shift_management_new_api.js b/backend/lambda_functions/payroll_shift_management_new_api.js\nindex 1401b124..df4a3d71 100644\n--- a/backend/lambda_functions/payroll_shift_management_new_api.js\n+++ b/backend/lambda_functions/payroll_shift_management_new_api.js\n@@ -2178,13 +2178,11 @@ async function checkShiftOverlaps(request_body, db) {\n                   ELSE end_time\n               END AS end_time\n           FROM \n-              employee_shift_details\n+              shift_details\n           WHERE \n               shift_id IN (?)\n               AND status = 1\n               AND day BETWEEN 1 AND 7\n-              AND employee_id IS NULL\n-              AND specific_date IS NULL\n       ),\n       normalized_shifts AS (\n           SELECT \n@@ -2374,11 +2372,10 @@ async function getEmployeessWeekOffs(ho_id,emp_ids,db){\n       WITH esd AS (\n         SELECT *,\n               RANK() OVER (PARTITION BY employee_id ORDER BY shift_id) rnk\n-          FROM employee_shift_details\n+          FROM employee_weekoffs\n           WHERE ho_id = ?\n           AND employee_id IN (?)\n           AND day IS NOT NULL\n-          AND is_weekoff = 1\n           AND status = 1\n       )\n       SELECT * FROM esd WHERE rnk = 1\ndiff --git a/src/Routes/allRoutes.js b/src/Routes/allRoutes.js\nindex d4b4010b..67607708 100644\n--- a/src/Routes/allRoutes.js\n+++ b/src/Routes/allRoutes.js\n@@ -17,7 +17,7 @@ import EmployeesList from \"../pages/EmployeeManagement/EmployeesList\";\n // import ShiftTime from \"../pages/ShiftManagement/ShiftTime\";\n // import ShiftTimeNew from \"../pages/ShiftManagement/ShiftTimeNew\";\n // import EmployeesShifts from \"../pages/EmployeesShifts/EmployeesShifts\";\n-// import EmployeesShiftsNew from \"../pages/EmployeesShifts/EmployeesShiftsNew\";\n+import EmployeesShiftsNew from \"../pages/EmployeesShifts/EmployeesShiftsNew\";\n // import ManageWeeklyoff from \"../pages/EmployeesShifts/ManageWeeklyoff\";\n import DeviceConfiguration from \"../pages/DeviceConfiguration/DeviceConfiguration\";\n import Reports from \"../pages/Reports/ReportIndex\";\n@@ -101,7 +101,7 @@ const authProtectedRoutes = [\n   // { path: \"/shiftTime\", component: <ShiftTime />},\n   // { path: \"/ShiftTimeNew\", component: <ShiftTimeNew />},\n   // { path: \"/employees-shifts\", component: <EmployeesShifts />},\n-  // { path: \"/employees-shifts-assign-new\", component: <EmployeesShiftsNew />},\n+  { path: \"/employees-shifts-assign-new\", component: <EmployeesShiftsNew />},\n   { path: \"/deviceConfiguration\", component: <DeviceConfiguration />},\n   { path: \"/ReportConfigur\", component: <ReportConfigur/>},\n   { path: \"/Profile\", component: <Profile/>},\ndiff --git a/src/helpers/detect_shifts_overlap.js b/src/helpers/detect_shifts_overlap.js\nnew file mode 100644\nindex 00000000..fbba2b8e\n--- /dev/null\n+++ b/src/helpers/detect_shifts_overlap.js\n@@ -0,0 +1,181 @@\n+/**\n+ * Detects overlaps between shift timings\n+ * @param {Array} shiftData - Array of shift objects with shift_id, day, start_time, end_time, status\n+ * @param {Object} options - Optional configuration\n+ * @param {Array} options.shiftIds - Filter by specific shift IDs\n+ * @param {boolean} options.debug - Enable debug logging\n+ * @param {boolean} options.includeNoOverlap - Include 'No Overlap' results (default: true)\n+ * @returns {Array} Array of overlap comparison results\n+ */\n+function detectShiftOverlaps(shiftData, options = {}) {\n+    // Input validation\n+    if (!shiftData || !Array.isArray(shiftData)) {\n+        throw new Error('shiftData must be a non-empty array');\n+    }\n+\n+    if (shiftData.length === 0) {\n+        return [];\n+    }\n+\n+    const { shiftIds = null, debug = false, includeNoOverlap = true } = options;\n+\n+    // convert time string to seconds\n+    function timeToSeconds(timeStr) {\n+        try {\n+            if (!timeStr || typeof timeStr !== 'string') {\n+                throw new Error(`Invalid time string: ${timeStr}`);\n+            }\n+            const [hours, minutes, seconds] = timeStr.split(':').map(Number);\n+            if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {\n+                throw new Error(`Invalid time format: ${timeStr}`);\n+            }\n+            return hours * 3600 + minutes * 60 + seconds;\n+        } catch (error) {\n+            if (debug) console.warn(`Time conversion error: ${error.message}`);\n+            return 0;\n+        }\n+    }\n+\n+    // validate shift object\n+    function isValidShift(shift) {\n+        return shift && \n+               typeof shift.shift_id !== 'undefined' && \n+               typeof shift.day !== 'undefined' && \n+               typeof shift.start_time === 'string' && \n+               typeof shift.end_time === 'string' && \n+               typeof shift.status !== 'undefined';\n+    }\n+\n+    try {\n+        const shiftTimes = shiftData\n+            .filter(shift => {\n+                if (!isValidShift(shift)) {\n+                    if (debug) console.warn('Invalid shift object:', shift);\n+                    return false;\n+                }\n+                const basicFilter = shift.status === 1 && shift.day >= 1 && shift.day <= 7;\n+                const shiftIdFilter = !shiftIds || shiftIds.includes(shift.shift_id);\n+                return basicFilter && shiftIdFilter;\n+            })\n+            .map(shift => {\n+                let endTime = shift.end_time;\n+                // Handle overnight shifts\n+                if (shift.end_time < shift.start_time) {\n+                    try {\n+                        const [hours, minutes, seconds] = shift.end_time.split(':').map(Number);\n+                        const adjustedHours = hours + 24;\n+                        endTime = `${adjustedHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2, '0')}`;\n+                    } catch (error) {\n+                        if (debug) console.warn(`Overnight shift processing error for shift ${shift.shift_id}:`, error.message);\n+                        endTime = shift.end_time;\n+                    }\n+                }\n+                \n+                return {\n+                    shift_id: Number(shift.shift_id),\n+                    start_time: shift.start_time,\n+                    end_time: endTime\n+                };\n+            });\n+\n+        if (debug) console.log(`Processed ${shiftTimes.length} valid shifts`);\n+\n+        if (shiftTimes.length === 0) {\n+            return [];\n+        }\n+\n+        // Normalize to seconds\n+        const normalizedShifts = shiftTimes.map(shift => ({\n+            shift_id: shift.shift_id,\n+            start_seconds: timeToSeconds(shift.start_time),\n+            end_seconds: timeToSeconds(shift.end_time)\n+        }));\n+\n+        // Adjust for overnight shifts\n+        const adjustedShifts = normalizedShifts.map(shift => ({\n+            shift_id: shift.shift_id,\n+            start_seconds: shift.start_seconds,\n+            end_seconds: shift.end_seconds <= shift.start_seconds ?\n+                shift.end_seconds + 86400 : shift.end_seconds\n+        }));\n+\n+        // Compare all pairs and detect overlaps\n+        const overlapResults = [];\n+\n+        for (let i = 0; i < adjustedShifts.length; i++) {\n+            for (let j = i + 1; j < adjustedShifts.length; j++) {\n+                const shift1 = adjustedShifts[i];\n+                const shift2 = adjustedShifts[j];\n+\n+                // Only compare if shift1.shift_id < shift2.shift_id\n+                if (shift1.shift_id < shift2.shift_id) {\n+                    // Check for overlap\n+                    const hasOverlap = (\n+                        (shift2.start_seconds >= shift1.start_seconds && shift2.start_seconds <= shift1.end_seconds) ||\n+                        (shift2.end_seconds >= shift1.start_seconds && shift2.end_seconds <= shift1.end_seconds) ||\n+                        (shift1.start_seconds >= shift2.start_seconds && shift1.start_seconds <= shift2.end_seconds) ||\n+                        (shift1.end_seconds >= shift2.start_seconds && shift1.end_seconds <= shift2.end_seconds)\n+                    );\n+\n+                    const result = {\n+                        shift_id1: shift1.shift_id,\n+                        shift_id2: shift2.shift_id,\n+                        start_seconds1: shift1.start_seconds,\n+                        end_seconds1: shift1.end_seconds,\n+                        start_seconds2: shift2.start_seconds,\n+                        end_seconds2: shift2.end_seconds,\n+                        overlap_status: hasOverlap ? 'Overlap' : 'No Overlap'\n+                    };\n+\n+                    if (includeNoOverlap || hasOverlap) {\n+                        overlapResults.push(result);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (debug) {\n+            const overlapCount = overlapResults.filter(r => r.overlap_status === 'Overlap').length;\n+            console.log(`Overlap detection complete: ${overlapCount} overlaps found out of ${overlapResults.length} comparisons`);\n+        }\n+\n+        return overlapResults;\n+\n+    } catch (error) {\n+        if (debug) console.error('Error in detectShiftOverlaps:', error.message);\n+        throw new Error(`Shift overlap detection failed: ${error.message}`);\n+    }\n+}\n+\n+// Test data\n+//   const testShiftData = [\n+    // Shift 88 - All days 10:00-19:00\n+    //   { id: 1, shift_id: 88, day: 1, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 2, shift_id: 88, day: 2, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 3, shift_id: 88, day: 3, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 4, shift_id: 88, day: 4, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 5, shift_id: 88, day: 5, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 6, shift_id: 88, day: 6, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 7, shift_id: 88, day: 7, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+\n+    // Shift 707 - All days 16:00-17:00 (overlaps with 88)\n+    //   { id: 1644, shift_id: 707, day: 1, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1645, shift_id: 707, day: 2, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1646, shift_id: 707, day: 3, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1647, shift_id: 707, day: 4, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1648, shift_id: 707, day: 5, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1649, shift_id: 707, day: 6, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1650, shift_id: 707, day: 7, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+\n+    // Shift 725 - All days 11:55-13:00 (overlaps with 88)\n+    //   { id: 1686, shift_id: 725, day: 1, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1687, shift_id: 725, day: 2, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1688, shift_id: 725, day: 3, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1689, shift_id: 725, day: 4, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1690, shift_id: 725, day: 5, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1691, shift_id: 725, day: 6, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1692, shift_id: 725, day: 7, start_time: '11:55:00', end_time: '13:00:00', status: 1 }\n+//   ];\n+\n+//   const results = detectShiftOverlaps(testShiftData, { debug: true, includeNoOverlap: true });\n+//   console.log('Overlap Results:', results.length);\ndiff --git a/src/pages/ShiftManagement/CommonShiftTime.js b/src/pages/ShiftManagement/CommonShiftTime.js\nindex e9f90504..ff2316c9 100644\n--- a/src/pages/ShiftManagement/CommonShiftTime.js\n+++ b/src/pages/ShiftManagement/CommonShiftTime.js\n@@ -1103,7 +1103,7 @@ const CommonShiftTime = () => {\n                                         </h5>\n \n                                         <div className=\"d-flex\">\n-                                            <Link to=\"/shift-assignment\">\n+                                            <Link to=\"/employees-shifts-assign-new\">\n                                                 <button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn me-3\" id=\"assign-btn\">\n                                                     Assign Shift\n                                                 </button>\n@@ -1189,7 +1189,7 @@ const CommonShiftTime = () => {\n                             <button type=\"button\" className=\"btn w-sm btn-light\" data-bs-dismiss=\"modal\" onClick={() => closeModal2()}>\n                                 Later\n                             </button>\n-                            <Link to=\"/shift-assignment\">\n+                            <Link to=\"/employees-shifts-assign-new\">\n                                 <button type=\"button\" className=\"btn w-sm btn-blue\">\n                                     Assign Shift\n                                 </button>","is_error":false}]},"uuid":"962e1f17-ee2f-4a15-ac92-171834d953fc","timestamp":"2025-08-01T11:57:48.329Z","toolUseResult":{"stdout":"diff --git a/backend/lambda_functions/payroll_get_employees_api.js b/backend/lambda_functions/payroll_get_employees_api.js\nindex 9dad0bd1..efa66322 100644\n--- a/backend/lambda_functions/payroll_get_employees_api.js\n+++ b/backend/lambda_functions/payroll_get_employees_api.js\n@@ -383,8 +383,8 @@ exports.handler = async (event, context) => {\n             employees as emp \n             LEFT JOIN departments as dept ON dept.id = emp.department_id and dept.ho_id = emp.ho_id\n             LEFT JOIN designations as desig ON desig.id = emp.designation_id and desig.ho_id = emp.ho_id\n-            LEFT JOIN employee_shifts_new AS esn ON esn.employee_id = emp.id AND esn.status = 1\n-            LEFT JOIN shifts AS sh ON sh.id = esn.shift_id\n+            LEFT JOIN employee_shift_assignments AS esn ON esn.employee_id = emp.id AND esn.status = 1\n+            LEFT JOIN shifts AS sh ON sh.id = esn.shift_id AND sh.status = 1\n             LEFT JOIN employee_branches AS eb ON eb.employee_id = emp.id and eb.status = 1\n             LEFT JOIN organizations AS orgs ON orgs.id = eb.branch_id\n           WHERE \ndiff --git a/backend/lambda_functions/payroll_shift_management_new_api.js b/backend/lambda_functions/payroll_shift_management_new_api.js\nindex 1401b124..df4a3d71 100644\n--- a/backend/lambda_functions/payroll_shift_management_new_api.js\n+++ b/backend/lambda_functions/payroll_shift_management_new_api.js\n@@ -2178,13 +2178,11 @@ async function checkShiftOverlaps(request_body, db) {\n                   ELSE end_time\n               END AS end_time\n           FROM \n-              employee_shift_details\n+              shift_details\n           WHERE \n               shift_id IN (?)\n               AND status = 1\n               AND day BETWEEN 1 AND 7\n-              AND employee_id IS NULL\n-              AND specific_date IS NULL\n       ),\n       normalized_shifts AS (\n           SELECT \n@@ -2374,11 +2372,10 @@ async function getEmployeessWeekOffs(ho_id,emp_ids,db){\n       WITH esd AS (\n         SELECT *,\n               RANK() OVER (PARTITION BY employee_id ORDER BY shift_id) rnk\n-          FROM employee_shift_details\n+          FROM employee_weekoffs\n           WHERE ho_id = ?\n           AND employee_id IN (?)\n           AND day IS NOT NULL\n-          AND is_weekoff = 1\n           AND status = 1\n       )\n       SELECT * FROM esd WHERE rnk = 1\ndiff --git a/src/Routes/allRoutes.js b/src/Routes/allRoutes.js\nindex d4b4010b..67607708 100644\n--- a/src/Routes/allRoutes.js\n+++ b/src/Routes/allRoutes.js\n@@ -17,7 +17,7 @@ import EmployeesList from \"../pages/EmployeeManagement/EmployeesList\";\n // import ShiftTime from \"../pages/ShiftManagement/ShiftTime\";\n // import ShiftTimeNew from \"../pages/ShiftManagement/ShiftTimeNew\";\n // import EmployeesShifts from \"../pages/EmployeesShifts/EmployeesShifts\";\n-// import EmployeesShiftsNew from \"../pages/EmployeesShifts/EmployeesShiftsNew\";\n+import EmployeesShiftsNew from \"../pages/EmployeesShifts/EmployeesShiftsNew\";\n // import ManageWeeklyoff from \"../pages/EmployeesShifts/ManageWeeklyoff\";\n import DeviceConfiguration from \"../pages/DeviceConfiguration/DeviceConfiguration\";\n import Reports from \"../pages/Reports/ReportIndex\";\n@@ -101,7 +101,7 @@ const authProtectedRoutes = [\n   // { path: \"/shiftTime\", component: <ShiftTime />},\n   // { path: \"/ShiftTimeNew\", component: <ShiftTimeNew />},\n   // { path: \"/employees-shifts\", component: <EmployeesShifts />},\n-  // { path: \"/employees-shifts-assign-new\", component: <EmployeesShiftsNew />},\n+  { path: \"/employees-shifts-assign-new\", component: <EmployeesShiftsNew />},\n   { path: \"/deviceConfiguration\", component: <DeviceConfiguration />},\n   { path: \"/ReportConfigur\", component: <ReportConfigur/>},\n   { path: \"/Profile\", component: <Profile/>},\ndiff --git a/src/helpers/detect_shifts_overlap.js b/src/helpers/detect_shifts_overlap.js\nnew file mode 100644\nindex 00000000..fbba2b8e\n--- /dev/null\n+++ b/src/helpers/detect_shifts_overlap.js\n@@ -0,0 +1,181 @@\n+/**\n+ * Detects overlaps between shift timings\n+ * @param {Array} shiftData - Array of shift objects with shift_id, day, start_time, end_time, status\n+ * @param {Object} options - Optional configuration\n+ * @param {Array} options.shiftIds - Filter by specific shift IDs\n+ * @param {boolean} options.debug - Enable debug logging\n+ * @param {boolean} options.includeNoOverlap - Include 'No Overlap' results (default: true)\n+ * @returns {Array} Array of overlap comparison results\n+ */\n+function detectShiftOverlaps(shiftData, options = {}) {\n+    // Input validation\n+    if (!shiftData || !Array.isArray(shiftData)) {\n+        throw new Error('shiftData must be a non-empty array');\n+    }\n+\n+    if (shiftData.length === 0) {\n+        return [];\n+    }\n+\n+    const { shiftIds = null, debug = false, includeNoOverlap = true } = options;\n+\n+    // convert time string to seconds\n+    function timeToSeconds(timeStr) {\n+        try {\n+            if (!timeStr || typeof timeStr !== 'string') {\n+                throw new Error(`Invalid time string: ${timeStr}`);\n+            }\n+            const [hours, minutes, seconds] = timeStr.split(':').map(Number);\n+            if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {\n+                throw new Error(`Invalid time format: ${timeStr}`);\n+            }\n+            return hours * 3600 + minutes * 60 + seconds;\n+        } catch (error) {\n+            if (debug) console.warn(`Time conversion error: ${error.message}`);\n+            return 0;\n+        }\n+    }\n+\n+    // validate shift object\n+    function isValidShift(shift) {\n+        return shift && \n+               typeof shift.shift_id !== 'undefined' && \n+               typeof shift.day !== 'undefined' && \n+               typeof shift.start_time === 'string' && \n+               typeof shift.end_time === 'string' && \n+               typeof shift.status !== 'undefined';\n+    }\n+\n+    try {\n+        const shiftTimes = shiftData\n+            .filter(shift => {\n+                if (!isValidShift(shift)) {\n+                    if (debug) console.warn('Invalid shift object:', shift);\n+                    return false;\n+                }\n+                const basicFilter = shift.status === 1 && shift.day >= 1 && shift.day <= 7;\n+                const shiftIdFilter = !shiftIds || shiftIds.includes(shift.shift_id);\n+                return basicFilter && shiftIdFilter;\n+            })\n+            .map(shift => {\n+                let endTime = shift.end_time;\n+                // Handle overnight shifts\n+                if (shift.end_time < shift.start_time) {\n+                    try {\n+                        const [hours, minutes, seconds] = shift.end_time.split(':').map(Number);\n+                        const adjustedHours = hours + 24;\n+                        endTime = `${adjustedHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2, '0')}`;\n+                    } catch (error) {\n+                        if (debug) console.warn(`Overnight shift processing error for shift ${shift.shift_id}:`, error.message);\n+                        endTime = shift.end_time;\n+                    }\n+                }\n+                \n+                return {\n+                    shift_id: Number(shift.shift_id),\n+                    start_time: shift.start_time,\n+                    end_time: endTime\n+                };\n+            });\n+\n+        if (debug) console.log(`Processed ${shiftTimes.length} valid shifts`);\n+\n+        if (shiftTimes.length === 0) {\n+            return [];\n+        }\n+\n+        // Normalize to seconds\n+        const normalizedShifts = shiftTimes.map(shift => ({\n+            shift_id: shift.shift_id,\n+            start_seconds: timeToSeconds(shift.start_time),\n+            end_seconds: timeToSeconds(shift.end_time)\n+        }));\n+\n+        // Adjust for overnight shifts\n+        const adjustedShifts = normalizedShifts.map(shift => ({\n+            shift_id: shift.shift_id,\n+            start_seconds: shift.start_seconds,\n+            end_seconds: shift.end_seconds <= shift.start_seconds ?\n+                shift.end_seconds + 86400 : shift.end_seconds\n+        }));\n+\n+        // Compare all pairs and detect overlaps\n+        const overlapResults = [];\n+\n+        for (let i = 0; i < adjustedShifts.length; i++) {\n+            for (let j = i + 1; j < adjustedShifts.length; j++) {\n+                const shift1 = adjustedShifts[i];\n+                const shift2 = adjustedShifts[j];\n+\n+                // Only compare if shift1.shift_id < shift2.shift_id\n+                if (shift1.shift_id < shift2.shift_id) {\n+                    // Check for overlap\n+                    const hasOverlap = (\n+                        (shift2.start_seconds >= shift1.start_seconds && shift2.start_seconds <= shift1.end_seconds) ||\n+                        (shift2.end_seconds >= shift1.start_seconds && shift2.end_seconds <= shift1.end_seconds) ||\n+                        (shift1.start_seconds >= shift2.start_seconds && shift1.start_seconds <= shift2.end_seconds) ||\n+                        (shift1.end_seconds >= shift2.start_seconds && shift1.end_seconds <= shift2.end_seconds)\n+                    );\n+\n+                    const result = {\n+                        shift_id1: shift1.shift_id,\n+                        shift_id2: shift2.shift_id,\n+                        start_seconds1: shift1.start_seconds,\n+                        end_seconds1: shift1.end_seconds,\n+                        start_seconds2: shift2.start_seconds,\n+                        end_seconds2: shift2.end_seconds,\n+                        overlap_status: hasOverlap ? 'Overlap' : 'No Overlap'\n+                    };\n+\n+                    if (includeNoOverlap || hasOverlap) {\n+                        overlapResults.push(result);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (debug) {\n+            const overlapCount = overlapResults.filter(r => r.overlap_status === 'Overlap').length;\n+            console.log(`Overlap detection complete: ${overlapCount} overlaps found out of ${overlapResults.length} comparisons`);\n+        }\n+\n+        return overlapResults;\n+\n+    } catch (error) {\n+        if (debug) console.error('Error in detectShiftOverlaps:', error.message);\n+        throw new Error(`Shift overlap detection failed: ${error.message}`);\n+    }\n+}\n+\n+// Test data\n+//   const testShiftData = [\n+    // Shift 88 - All days 10:00-19:00\n+    //   { id: 1, shift_id: 88, day: 1, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 2, shift_id: 88, day: 2, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 3, shift_id: 88, day: 3, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 4, shift_id: 88, day: 4, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 5, shift_id: 88, day: 5, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 6, shift_id: 88, day: 6, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+    //   { id: 7, shift_id: 88, day: 7, start_time: '10:00:00', end_time: '19:00:00', status: 1 },\n+\n+    // Shift 707 - All days 16:00-17:00 (overlaps with 88)\n+    //   { id: 1644, shift_id: 707, day: 1, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1645, shift_id: 707, day: 2, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1646, shift_id: 707, day: 3, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1647, shift_id: 707, day: 4, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1648, shift_id: 707, day: 5, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1649, shift_id: 707, day: 6, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+    //   { id: 1650, shift_id: 707, day: 7, start_time: '16:00:00', end_time: '17:00:00', status: 1 },\n+\n+    // Shift 725 - All days 11:55-13:00 (overlaps with 88)\n+    //   { id: 1686, shift_id: 725, day: 1, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1687, shift_id: 725, day: 2, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1688, shift_id: 725, day: 3, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1689, shift_id: 725, day: 4, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1690, shift_id: 725, day: 5, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1691, shift_id: 725, day: 6, start_time: '11:55:00', end_time: '13:00:00', status: 1 },\n+    //   { id: 1692, shift_id: 725, day: 7, start_time: '11:55:00', end_time: '13:00:00', status: 1 }\n+//   ];\n+\n+//   const results = detectShiftOverlaps(testShiftData, { debug: true, includeNoOverlap: true });\n+//   console.log('Overlap Results:', results.length);\ndiff --git a/src/pages/ShiftManagement/CommonShiftTime.js b/src/pages/ShiftManagement/CommonShiftTime.js\nindex e9f90504..ff2316c9 100644\n--- a/src/pages/ShiftManagement/CommonShiftTime.js\n+++ b/src/pages/ShiftManagement/CommonShiftTime.js\n@@ -1103,7 +1103,7 @@ const CommonShiftTime = () => {\n                                         </h5>\n \n                                         <div className=\"d-flex\">\n-                                            <Link to=\"/shift-assignment\">\n+                                            <Link to=\"/employees-shifts-assign-new\">\n                                                 <button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn me-3\" id=\"assign-btn\">\n                                                     Assign Shift\n                                                 </button>\n@@ -1189,7 +1189,7 @@ const CommonShiftTime = () => {\n                             <button type=\"button\" className=\"btn w-sm btn-light\" data-bs-dismiss=\"modal\" onClick={() => closeModal2()}>\n                                 Later\n                             </button>\n-                            <Link to=\"/shift-assignment\">\n+                            <Link to=\"/employees-shifts-assign-new\">\n                                 <button type=\"button\" className=\"btn w-sm btn-blue\">\n                                     Assign Shift\n                                 </button>","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"962e1f17-ee2f-4a15-ac92-171834d953fc","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013EciFySpkrarr64Hv52Yvc","type":"tool_result","content":"On branch shift_and_weekoff_revamp\nYour branch is up to date with 'origin/shift_and_weekoff_revamp'.\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\tmodified:   backend/lambda_functions/payroll_get_employees_api.js\n\tmodified:   backend/lambda_functions/payroll_shift_management_new_api.js\n\tmodified:   src/Routes/allRoutes.js\n\tnew file:   src/helpers/detect_shifts_overlap.js\n\tmodified:   src/pages/ShiftManagement/CommonShiftTime.js\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   backend/dao/ReportsDao.js\n\tmodified:   src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.vscode/\n\tCLAUDE.md\n\tMaster_Branch.md\n\tproject_deep_dive.md\n\tproject_knowledge.md","is_error":false}]},"uuid":"f4bae6e2-a310-4330-ab4b-b9bad67502f0","timestamp":"2025-08-01T11:57:48.356Z","toolUseResult":{"stdout":"On branch shift_and_weekoff_revamp\nYour branch is up to date with 'origin/shift_and_weekoff_revamp'.\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\tmodified:   backend/lambda_functions/payroll_get_employees_api.js\n\tmodified:   backend/lambda_functions/payroll_shift_management_new_api.js\n\tmodified:   src/Routes/allRoutes.js\n\tnew file:   src/helpers/detect_shifts_overlap.js\n\tmodified:   src/pages/ShiftManagement/CommonShiftTime.js\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   backend/dao/ReportsDao.js\n\tmodified:   src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.vscode/\n\tCLAUDE.md\n\tMaster_Branch.md\n\tproject_deep_dive.md\n\tproject_knowledge.md","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"f4bae6e2-a310-4330-ab4b-b9bad67502f0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"738e298a-86f1-4386-946a-9def19396f1c","version":"1.0.65","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01BGYgvQ56MfbG5vA2X9trVX","type":"tool_result","content":"diff --git a/backend/dao/ReportsDao.js b/backend/dao/ReportsDao.js\nindex 9e0ab3cf..aa7b1ea4 100644\n--- a/backend/dao/ReportsDao.js\n+++ b/backend/dao/ReportsDao.js\n@@ -211,7 +211,19 @@ export default class ReportsDao {\n                         `) ` +\n                         `ELSE NULL ` +\n                         `END` +\n-                    `) AS 'day_${month}_${day}'`\n+                    `) AS 'day_${month}_${day}'`,\n+                    `MAX(` +\n+                        `CASE WHEN ${prefix}attandance_date = '${formattedDate}' ` +\n+                        `THEN ${prefix}effective_working_hrs ` +\n+                        `ELSE NULL ` +\n+                        `END` +\n+                    `) AS 'working_hours_day_${month}_${day}'`,\n+                    `MAX(` +\n+                        `CASE WHEN ${prefix}attandance_date = '${formattedDate}' ` +\n+                        `THEN ${prefix}tag_str ` +\n+                        `ELSE NULL ` +\n+                        `END` +\n+                    `) AS 'tag_day_${month}_${day}'`\n                 );\n             } else {\n                 columns.push(\n@@ -923,6 +935,7 @@ export default class ReportsDao {\n             ds.device_employee_id,\n             des.name as designation,\n             dep.name as department,\n+            1 as salary_type,\n             COUNT(CASE WHEN ds.calculated_status = 'Full Day' THEN 1 END) as working_days,\n             COUNT(CASE WHEN ds.calculated_status = 'Absent' THEN 1 END) as absent_days,\n             ${columns}\ndiff --git a/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx b/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\nindex 4ae76ff6..59306aea 100644\n--- a/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\n+++ b/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\n@@ -1,11 +1,11 @@\n import React, { useEffect, useState, useCallback, useMemo, useRef, lazy, Suspense } from \"react\";\n-import { useDispatch, useSelector } from \"react-redux\";\n+import { useSelector } from \"react-redux\";\n import { Container, Card, Row, Col, CardHeader, Spinner, Offcanvas, CardBody, } from \"reactstrap\";\n import Header from \"../../Layouts/Header\";\n import Flatpickr from \"react-flatpickr\";\n import { Dropdown as Library1Dropdown } from \"primereact/dropdown\";\n import { MultiSelect } from \"primereact/multiselect\";\n-import { getMusterSpreadsheetReports as fetchMusterReports } from \"../../store/actions\";\n+import { getMusterSpreadSheetReports } from \"../../helpers/nodebackend_helper\";\n import dayjs from \"dayjs\";\n import _, { debounce, groupBy } from \"lodash\";\n import AttendanveSidebar from \"../Reports/AttendanveSidebar\";\n@@ -16,12 +16,14 @@ import { handleExportExcel } from \"../../Components/Common/SpreadsheetWrapper\";\n import { toast } from \"react-toastify\";\n import \"primereact/resources/themes/lara-light-indigo/theme.css\";\n import \"primereact/resources/primereact.min.css\";\n-import { bulkAttendanceUpdateApi, getPayrollFreezeListing, } from \"../../helpers/awsapibackend_helper\";\n-import { useMutation, useQuery } from \"@tanstack/react-query\";\n-import { PAYROLL_FREEZE_LISTING, } from \"../../reactQueryKeys/PayrollQueryKeys\";\n+import { bulkAttendanceUpdateApi, getPayrollFreezeListing, get_freeze_unfreeze_configs } from \"../../helpers/awsapibackend_helper\";\n+import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\n+import { PAYROLL_FREEZE_LISTING, REPORT_FREEZE_UNFREEZE_CONFIG } from \"../../reactQueryKeys/PayrollQueryKeys\";\n import { useLocation, useNavigate, } from \"react-router-dom\";\n import ConfirmationPopup from \"../../Components/Common/ConfirmationPopup\";\n import CommonTooltip from '../../Components/Common/CommonTooltip';\n+import { getWorkingStatus } from \"../Reports/ReportHelpers/attendanceMasterConfigsHelper\";\n+import { getDateForDay } from \"../Reports/ReportHelpers/musterConfigsHelper\";\n \n const SpreadsheetContainer = lazy(() => import('../../Components/Common/SpreadsheetContainer'));\n \n@@ -151,28 +153,87 @@ function findEmployeeByCode(employeeMap, code) {\n }\n \n const BulkAttendanceUpdate = () => {\n-  const dispatch = useDispatch();\n+  const queryClient = useQueryClient();\n   \n   const {\n-    musterReports,\n-    musterReportSuccess,\n     organizations,\n-    reportStartDate,\n-    reportEndDate,\n   } = useSelector((state) => ({\n-    musterReports: state.Report.musterSpreadsheetReports,\n-    musterReportSuccess: state.Report.musterSpreadsheetReportSuccess,\n     organizations: state.Organizations.organizations,\n-    reportStartDate: state.Report.reportStartDate,\n-    reportEndDate: state.Report.reportEndDate,\n-    isBulkTagsUpdate: state.Report.isBulkTagsUpdate,\n-    bulkTagsUpdateError: state.Report.bulkTagsUpdateError\n   }));\n+\n+  const [selectedFilterBranch, setSelectedFilterBranch] = useState(\"\");\n+  const [currentDate] = useState(dayjs(new Date()).toDate());\n+  const [selectedFilterStartDate, setSelectedFilterStartDate] = useState(dayjs(currentDate).startOf(\"month\").toDate());\n+  const [selectedFilterEndDate, setSelectedFilterEndDate] = useState(currentDate);\n+  const [resultFromDate, setResultFromDate] = useState(dayjs(selectedFilterStartDate).format(\"YYYY-MM-DD\"));\n+  const [resultToDate, setResultToDate] = useState(dayjs(selectedFilterEndDate).format(\"YYYY-MM-DD\"));\n+\n+  const {\n+    data: musterReportsData,\n+    isLoading: isMusterReportsLoading,\n+    isSuccess: musterReportSuccess,\n+    refetch: refetchMusterReports,\n+    isRefetching: isMusterReportsRefetching,\n+    error: musterReportsError,\n+    isError: isMusterReportsError\n+  } = useQuery({\n+    queryKey: ['musterReports', resultFromDate, resultToDate, selectedFilterBranch],\n+    queryFn: () => getMusterSpreadSheetReports({\n+      filter_start_date: resultFromDate,\n+      filter_end_date: resultToDate,\n+      filter_branch: selectedFilterBranch\n+    }),\n+    enabled: Boolean(resultFromDate && resultToDate),\n+    staleTime: 5 * 60 * 1000, // 5 minutes\n+    retry: 3,\n+    select: (data) => data?.data || [],\n+    onError: (error) => {\n+      console.error('Failed to load muster reports:', error);\n+      toast.error('Failed to load attendance data. Please try again.');\n+    }\n+  });\n+\n+  // Memoize musterReports to avoid re-creation on every render\n+  const musterReports = useMemo(() => musterReportsData || [], [musterReportsData]);\n+  const reportStartDate = resultFromDate;\n+  const reportEndDate = resultToDate;\n+\n+  // Format optimized data to spreadsheet format (replaces formatBulkAttendanceData from Redux)\n+  const formatOptimizedDataForSpreadsheet = useCallback((apiData) => {\n+    if (!apiData || !Array.isArray(apiData)) return apiData;\n+    console.log(\"Formatting optimized data for spreadsheet:\", apiData);\n+\n+    return apiData.map(row => {\n+      const formattedRow = { ...row };\n+      \n+      Object.keys(row).forEach(key => {\n+        // Match pattern: day_MM_DD\n+        const dayMatch = key.match(/^day_(\\d+)_(\\d+)$/);\n+        if (dayMatch && row[key]) {\n+          const [, month, day] = dayMatch;\n+          const concatenatedValue = row[key];\n+          \n+          // Parse concatenated format: status#tag#error#leave#holiday#jeIds\n+          const parts = concatenatedValue.split('#');\n+          const [status, tag, error, leave, holiday, jeIds] = parts.map(val => val === 'null' ? null : val);\n+          \n+          // Create separate columns\n+          formattedRow[`day_${month}_${day}`] = status;\n+          formattedRow[`tag_day_${month}_${day}`] = tag;\n+          formattedRow[`err_day_${month}_${day}`] = error;\n+          formattedRow[`leave_name_day_${month}_${day}`] = leave;\n+          formattedRow[`holiday_name_day_${month}_${day}`] = holiday;\n+          formattedRow[`jeIds_day_${month}_${day}`] = jeIds;\n+        }\n+      });\n+      \n+      return formattedRow;\n+    });\n+  }, []);\n+\n+  const [updatedData, setUpdatedData] = useState([]);\n   const [nestedHeaders, setNestedHeaders] = useState([]);\n   const [initialRenderCount, setInitialRenderCount] = useState(0)\n-  const [selectedFilterBranch, setSelectedFilterBranch] = useState(\"\");\n-  const [selectedFilterStartDate, setSelectedFilterStartDate] = useState(null);\n-  const [selectedFilterEndDate, setSelectedFilterEndDate] = useState(null);\n   const [isSearchLoading, setIsSearchLoading] = useState(false);\n   const [organizationsList, setOrganizationsList] = useState([]);\n   const [spreadsheetData, setSpreadsheetData] = useState([]);\n@@ -184,19 +245,18 @@ const BulkAttendanceUpdate = () => {\n   const [regsidebardata, setRegSidebarData] = useState({});\n   const [attendanceLog, setAttendanceLog] = useState(false);\n   const [yesterdayDate] = useState(dayjs(new Date()).subtract(1, \"day\").toDate());\n-  const [maxToDate, setMaxToDate] = useState(yesterdayDate);\n+  const [maxToDate, setMaxToDate] = useState(currentDate);\n   const [tagLoader, setTagLoader] = useState(false);\n   const [showSpreadsheet, setShowSpreadsheet] = useState(false);\n   const [selectedColumns, setSelectedColumns] = useState([]);\n   const [isAllSelected, setIsAllSelected] = useState(false);\n   const [selectedDays, setSelectedDays] = useState(0);\n-  const [resultFromDate, setResultFromDate] = useState(dayjs(selectedFilterStartDate).format(\"YYYY-MM-DD\"));\n-  const [resultToDate, setResultToDate] = useState(dayjs(selectedFilterEndDate).format(\"YYYY-MM-DD\"));\n   const [unlockStartDate, setUnlockStartDate] = useState(null);\n   const [unlockEndDate, setUnlockEndDate] = useState(null);\n   const [isUnlocked, setIsUnlocked] = useState(false);\n   const [isConfirmationPopupOpen, setIsConfirmationPopupOpen] = useState(false);\n   const [isInitializing, setIsInitializing] = useState(true);\n+  const [freezeDates, setFreezeDates] = useState([]);\n   \n   const navigate = useNavigate();\n   const location = useLocation();\n@@ -207,6 +267,94 @@ const BulkAttendanceUpdate = () => {\n   const bulkUpdateFlagRef = useRef(false);\n   const isRevertingRef = useRef(false);\n \n+  // Freeze config query (moved before handleDayWorkHour)\n+  const {\n+    data: freezeConfigData,\n+    isLoading: freezeConfigDataLoading,\n+    refetch: refetchFreezeUnfreezeConfig,\n+    isRefetching: freezeConfigDataRefetching,\n+    error: freezeConfigError,\n+    isError: isFreezeConfigError\n+  } = useQuery({\n+    queryKey: [REPORT_FREEZE_UNFREEZE_CONFIG, resultFromDate, resultToDate],\n+    queryFn: () => get_freeze_unfreeze_configs({\n+      from_date : resultFromDate,\n+      to_date : resultToDate\n+    }),\n+    enabled: Boolean(resultFromDate && resultToDate),\n+    staleTime: 10*(60*1000),\n+    retry: 3,\n+    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n+    onError: (error) => {\n+      console.error('Failed to load freeze configuration:', error);\n+      toast.error('Failed to load freeze configuration. Some features may not work correctly.');\n+    }\n+  });\n+\n+  // Handle day work hour calculation for real-time status (moved before usage)\n+  const handleDayWorkHour = useCallback((key, status, emp_id, salary_type, tag) => {\n+    try {\n+      const date = getDateForDay(resultFromDate, resultToDate, key);\n+      return getWorkingStatus(\n+        freezeConfigData?.data, \n+        emp_id, \n+        date,\n+        status,\n+        salary_type, \n+        tag,\n+        \"MusterReport\"\n+      );\n+    } catch (error) {\n+      console.warn('Error in handleDayWorkHour calculation, falling back to status:', error);\n+      // Fallback to the original status if calculation fails\n+      return status;\n+    }\n+  }, [resultFromDate, resultToDate, freezeConfigData]);\n+\n+  // Update attendance data function similar to MusterReport.js (moved after handleDayWorkHour)\n+  const updateAttendanceData = useCallback((attendanceData) => {\n+    // First format the data for spreadsheet compatibility\n+    const formattedData = formatOptimizedDataForSpreadsheet(attendanceData);\n+    \n+    return formattedData.map(employeeData => {\n+      let updatedEmployeeData = { ...employeeData };\n+      \n+      Object.keys(updatedEmployeeData).forEach(key => {\n+        if (/^day_(1[0-2]|[1-9])_\\d+$/.test(key)) {\n+          updatedEmployeeData[key] = handleDayWorkHour(\n+            key,\n+            employeeData[key],\n+            employeeData.user_id,\n+            employeeData.salary_type,\n+            employeeData[`tag_day_${key.split('_')[1]}_${key.split('_')[2]}`]\n+          );\n+        }\n+      });\n+      \n+      return updatedEmployeeData;\n+    });\n+  }, [handleDayWorkHour, formatOptimizedDataForSpreadsheet]);\n+\n+  // Process attendance data when musterReports or freezeConfigData changes (moved after dependencies)\n+  useEffect(() => {\n+    if (musterReports.length && freezeConfigData) {\n+      const updated = updateAttendanceData(musterReports);\n+      setUpdatedData(updated);\n+    } else {\n+      setUpdatedData([]);\n+    }\n+  }, [musterReports, freezeConfigData, updateAttendanceData]);\n+\n+  // Reset isSearchLoading when muster reports finish loading\n+  useEffect(() => {\n+    if (musterReportSuccess && !isMusterReportsLoading && !isMusterReportsRefetching) {\n+      setIsSearchLoading(false);\n+    }\n+  }, [musterReportSuccess, isMusterReportsLoading, isMusterReportsRefetching]);\n+\n+\n+  console.log(\"Updated attendance data:\", updatedData);\n+\n   const getDateWithinRange = useCallback((startStr, endStr, displayDay) => {\n       const start = dayjs(startStr, \"YYYY-MM-DD\");\n       const end = dayjs(endStr, \"YYYY-MM-DD\");\n@@ -249,24 +397,27 @@ const BulkAttendanceUpdate = () => {\n   const { mutate: submitBulkTagUpdates, isPending: isTagUpdatePending } = useMutation({\n \n     mutationFn: bulkAttendanceUpdateApi,\n-    onSuccess: (data) => {\n+    onSuccess: async (data) => {\n       if (data?.statusCode === 200) {\n         toast.success(data?.message || \"Changes saved successfully\");\n-        // Reset state\n-        setIsSearchLoading(true);\n+        \n+        // Reset component state\n+        setModifiedData([]);\n         setSpreadsheetData([]);\n         setSpreadsheetKey((prev) => prev + 1);\n-        setModifiedData([]);\n         \n+        // Invalidate and refetch muster reports data\n+        await queryClient.invalidateQueries({\n+          queryKey: ['musterReports', resultFromDate, resultToDate, selectedFilterBranch]\n+        });\n+        \n+        // Force refetch to get fresh data\n         if (reportStartDate && reportEndDate) {\n-          dispatch(\n-            fetchMusterReports({\n-              filter_start_date: reportStartDate,\n-              filter_end_date: reportEndDate,\n-              filter_branch: selectedFilterBranch,\n-            })\n-          );\n+          await refetchMusterReports();\n         }\n+        \n+        // Reset loading state after data is refreshed\n+        setIsSearchLoading(false);\n       } else {\n         toast.error(data?.message || \"Failed to save changes\");\n       }\n@@ -416,6 +567,41 @@ const BulkAttendanceUpdate = () => {\n       ? rowBalanceObj[mrow.code][leave]\n       : baseBalanceMap[leave];\n   }, []);\n+\n+\n+  // Check if a date is within freeze config date ranges\n+  const isDateInFreezeRange = useCallback((date) => {\n+    // If freeze config failed to load, fall back to checking payroll freeze dates\n+    if (isFreezeConfigError || !freezeConfigData?.data?.freeze_config) {\n+      if (freezeDates && freezeDates.length > 0) {\n+        const targetDate = dayjs(date).format('YYYY-MM-DD');\n+        return freezeDates.some(freezeDate => {\n+          return targetDate >= freezeDate.from_date && targetDate <= freezeDate.to_date;\n+        });\n+      }\n+      return false;\n+    }\n+    \n+    const targetDate = dayjs(date);\n+    \n+    // Check freeze config entries\n+    for (const entry of freezeConfigData.data.freeze_config) {\n+      // Check each date range in the entry\n+      for (const range in entry) {\n+        if (range.includes(' - ')) {\n+          const [start, end] = range.split(' - ');\n+          const startDate = dayjs(start);\n+          const endDate = dayjs(end);\n+          \n+          if (targetDate.isSameOrAfter(startDate) && targetDate.isSameOrBefore(endDate)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    \n+    return false;\n+  }, [freezeConfigData, isFreezeConfigError, freezeDates]);\n   \n   // Build dropdown source based on cell value\n   const buildDropdownSource = useCallback((currentValue, cellSourceExcludingWOH, distinct_leave_names, mrow, rowBalanceMapsObj, baseBalanceMap) => {\n@@ -530,7 +716,7 @@ const BulkAttendanceUpdate = () => {\n   []);\n \n   // Create cell properties for dropdown cells\n-  const createCellProperties = useCallback((dropdownSource, validateFn, currentValue) => {\n+  const createCellProperties = useCallback((dropdownSource, validateFn, currentValue, columnTitle = null) => {\n     const cellProps = {\n       type: \"dropdown\",\n       width: 80,\n@@ -543,15 +729,22 @@ const BulkAttendanceUpdate = () => {\n       validate: validateFn,\n     };\n \n-    // Make the cell read-only if it's \"H\" (Holiday) or \"WO\" (Week Off)\n-    if (currentValue === ATTENDANCE_CODES.HOLIDAY) {\n-    // if (currentValue === ATTENDANCE_CODES.HOLIDAY || currentValue === ATTENDANCE_CODES.WEEK_OFF) {\n+    // Check if column is in freeze range\n+    let isColumnLocked = false;\n+    if (columnTitle && isValidDay(columnTitle)) {\n+      const dateForCheck = getDateWithinRange(resultFromDate, resultToDate, columnTitle);\n+      isColumnLocked = isDateInFreezeRange(dateForCheck);\n+    }\n \n+    // Make the cell read-only if it's \"H\" (Holiday), \"WO\" (Week Off), or in freeze range\n+    if (currentValue === ATTENDANCE_CODES.HOLIDAY || isColumnLocked) {\n+    // if (currentValue === ATTENDANCE_CODES.HOLIDAY || currentValue === ATTENDANCE_CODES.WEEK_OFF) {\n       cellProps.readOnly = true;\n+      cellProps.className = isColumnLocked ? 'freeze-locked-column' : '';\n     }\n   \n     return cellProps;\n-  }, []);\n+  }, [isDateInFreezeRange, resultFromDate, resultToDate, getDateWithinRange]);\n   \n   // Create a validation function for leave balance checks\n   const createValidateFunction = useCallback((currentWorkSheet, col, rowIndex, currentValue, mrow, distinct_leave_names, rowBalanceMapsObj, baseBalanceMap) => {\n@@ -589,7 +782,7 @@ const BulkAttendanceUpdate = () => {\n     const columnsLength = daysColumns.length;\n \n     // Get the muster report row data for this row\n-    const mrow = musterReports[rowIndex];\n+    const mrow = updatedData[rowIndex];\n     // Compute the base leave balances and the leave aliases for this employee\n     const baseBalanceMap = computeBalanceMap(mrow);\n     const leaveAliasesMapping = computeLeaveAliases(mrow);\n@@ -627,12 +820,13 @@ const BulkAttendanceUpdate = () => {\n       );\n       \n       // Create cell properties\n-      const cellProps = createCellProperties(dropdownSource, validateFn, currentValue);\n+      const columnTitle = daysColumns[col]?.title;\n+      const cellProps = createCellProperties(dropdownSource, validateFn, currentValue, columnTitle);\n       \n       // Finally, update the cell's property with the new dropdown settings\n       currentWorkSheet.setProperty(col, rowIndex, cellProps);\n     }\n-  }, [musterReports, daysColumns, buildDropdownSource, computeBalanceMap, computeLeaveAliases, getCellSourceExcludingWOH, createValidateFunction, createCellProperties, rowBalanceMapsObj]);\n+  }, [updatedData, daysColumns, buildDropdownSource, computeBalanceMap, computeLeaveAliases, getCellSourceExcludingWOH, createValidateFunction, createCellProperties, rowBalanceMapsObj]);\n   \n   // Get the original cell tag from the initial spreadsheet data\n   const getOriginalCellTag = useCallback((code, day) => {\n@@ -705,16 +899,10 @@ const BulkAttendanceUpdate = () => {\n     setModifiedData([]);\n     setShowSpreadsheet(true);\n \n-    // Fetch data\n-    dispatch(\n-      fetchMusterReports({\n-        filter_start_date: criteria.startDate,\n-        filter_end_date: criteria.endDate,\n-        filter_branch: criteria.branch,\n-      })\n-    );\n+    // Fetch data - React Query will automatically refetch when query key changes\n+    refetchMusterReports();\n   }, [\n-    dispatch,\n+    refetchMusterReports,\n     selectedFilterBranch,\n     selectedFilterStartDate,\n     selectedFilterEndDate,\n@@ -746,7 +934,7 @@ const BulkAttendanceUpdate = () => {\n       (key) => delete rowBalanceMapsObj[key]\n     );\n     \n-    musterReports.forEach((row) => {\n+    updatedData.forEach((row) => {\n       rowBalanceMapsObj[row.code] = computeBalanceMap(row);\n     });\n \n@@ -768,7 +956,7 @@ const BulkAttendanceUpdate = () => {\n     setTimeout(() => {\n       setShowSpreadsheet(true);\n     }, 0);\n-  }, [musterReports, originalSpreadsheetData, daysColumns, generateCellStyles, computeBalanceMap, rowBalanceMapsObj]);\n+  }, [updatedData, originalSpreadsheetData, daysColumns, generateCellStyles, computeBalanceMap, rowBalanceMapsObj]);\n   \n   // Handler for resetting specific columns\n   const handleResetColumns = useCallback(() => {\n@@ -1033,6 +1221,15 @@ const BulkAttendanceUpdate = () => {\n           // Get journal entry IDs for this day\n           const je_ids_key = `jeIds_day_${dateObj.month() + 1}_${dateObj.date()}`;\n           const je_ids = empRecord[je_ids_key];\n+          \n+          // Debug je_ids extraction\n+          console.log(`Debug je_ids for ${code} on ${dayCol}:`, {\n+            je_ids_key,\n+            je_ids,\n+            je_ids_type: typeof je_ids,\n+            empRecord_keys: Object.keys(empRecord).filter(k => k.includes('jeIds')),\n+            empRecord: empRecord\n+          });\n   \n           // Get the original cell tag from initial data\n           const originalCellTag = getOriginalCellTag(code, dayCol);\n@@ -1050,8 +1247,16 @@ const BulkAttendanceUpdate = () => {\n             newValue: newValue,\n           };\n   \n-          // If je_ids is null or empty, add to empty_je_ids_arr\n-          if (!je_ids || je_ids.length === 0) {\n+          // Check for empty je_ids more thoroughly - handle null, undefined, empty string, \"null\" string\n+          const isEmptyJeIds = !je_ids || \n+                              je_ids === null || \n+                              je_ids === undefined || \n+                              je_ids === '' || \n+                              je_ids === 'null' || \n+                              (typeof je_ids === 'string' && je_ids.trim() === '') ||\n+                              (Array.isArray(je_ids) && je_ids.length === 0);\n+          \n+          if (isEmptyJeIds) {\n             const entry = {\n               ...baseEntry,\n               oldTag: getTagValue(originalCellTag),\n@@ -1606,7 +1811,8 @@ const BulkAttendanceUpdate = () => {\n           );\n           \n           // Create cell properties\n-          const cellProps = createCellProperties(dropdownSource, validateFn, currentValue);\n+          const columnTitle = daysColumns[col]?.title;\n+          const cellProps = createCellProperties(dropdownSource, validateFn, currentValue, columnTitle);\n           // const cellVal = currentWorkSheet.getValueFromCoords(col, row);\n           // if (cellVal?.toString() === ATTENDANCE_CODES.HALF_DAY) {\n           // display tooltip for half day values\n@@ -1651,7 +1857,8 @@ const BulkAttendanceUpdate = () => {\n                 worksheet, dayColLoopIndex, originalRowIndex, currentValue,\n                 mrow, distinct_leave_names, rowBalanceMapsObj, baseBalanceMap\n             );\n-            const cellProps = createCellProperties(dropdownSource, validateFn, currentValue);\n+            const columnTitle = daysColumns[dayColLoopIndex]?.title;\n+            const cellProps = createCellProperties(dropdownSource, validateFn, currentValue, columnTitle);\n             worksheet.setProperty(dayColLoopIndex, originalRowIndex, cellProps);\n         }\n       }\n@@ -1812,6 +2019,51 @@ const BulkAttendanceUpdate = () => {\n       .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\n         border-color: #2381D9 !important;\n       }\n+      \n+      /* Styling for freeze-locked columns */\n+      .freeze-locked-column {\n+        background-color: rgba(255, 0, 0, 0.15) !important;\n+        opacity: 0.8 !important;\n+        cursor: not-allowed !important;\n+      }\n+      \n+      /* Additional styling for locked column headers */\n+      th.freeze-locked-column {\n+        background-color: rgba(255, 0, 0, 0.2) !important;\n+        background-image: repeating-linear-gradient(\n+          45deg,\n+          transparent,\n+          transparent 10px,\n+          rgba(255,255,255,.3) 10px,\n+          rgba(255,255,255,.3) 20px\n+        ) !important;\n+        font-style: italic !important;\n+        position: relative !important;\n+        border: 2px solid rgba(255, 0, 0, 0.4) !important;\n+      }\n+      \n+      /* Add locked icon to locked columns */\n+      th.freeze-locked-column::after {\n+        content: \"ðŸ”’\";\n+        position: absolute;\n+        top: 2px;\n+        right: 2px;\n+        font-size: 10px;\n+        opacity: 0.8;\n+        color: #d32f2f;\n+      }\n+      \n+      /* Locked cell styling */\n+      td.freeze-locked-column {\n+        background-color: rgba(255, 0, 0, 0.15) !important;\n+        color: #d32f2f !important;\n+        cursor: not-allowed !important;\n+        border: 1px solid rgba(255, 0, 0, 0.3) !important;\n+      }\n+      \n+      td.freeze-locked-column:hover {\n+        background-color: rgba(255, 0, 0, 0.25) !important;\n+      }\n     `;\n   }, []);\n   \n@@ -1825,7 +2077,6 @@ const BulkAttendanceUpdate = () => {\n     staleTime: 10*(60*1000),\n   });\n \n-  const [freezeDates, setFreezeDates] = useState([]);\n   useEffect(() => {\n     if (\n       payrollFreezDates !== undefined &&\n@@ -1882,24 +2133,24 @@ const BulkAttendanceUpdate = () => {\n   \n   // Update search loading state when report data arrives\n   useEffect(() => {\n-    if (musterReportSuccess || musterReports) {\n+    if (musterReportSuccess || updatedData.length > 0) {\n       setIsSearchLoading(false);\n     }\n-  }, [musterReportSuccess, musterReports]);\n+  }, [musterReportSuccess, updatedData]);\n   \n   \n-  // Initialize rowBalanceMapsObj when musterReports data arrives\n+  // Initialize rowBalanceMapsObj when updatedData arrives\n   useEffect(() => {\n-    if (!_.isEmpty(musterReports)) {\n+    if (!_.isEmpty(updatedData)) {\n       Object.keys(rowBalanceMapsObj).forEach(\n         (key) => delete rowBalanceMapsObj[key]\n       );\n       \n-      musterReports.forEach((row) => {\n+      updatedData.forEach((row) => {\n         rowBalanceMapsObj[row.code] = computeBalanceMap(row);\n       });\n     }\n-  }, [musterReports, rowBalanceMapsObj, computeBalanceMap]);\n+  }, [updatedData, rowBalanceMapsObj, computeBalanceMap]);\n   \n   // Trigger initial search on component mount\n   useEffect(() => {\n@@ -1909,9 +2160,9 @@ const BulkAttendanceUpdate = () => {\n   }    // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [initialRenderCount, selectedFilterStartDate, selectedFilterEndDate]);\n   \n-  // Prepare spreadsheet data and columns when musterReports changes\n+  // Prepare spreadsheet data and columns when updatedData changes\n   useEffect(() => {\n-    if (_.isEmpty(musterReports)) return;\n+    if (_.isEmpty(updatedData)) return;\n \n     const dayArray = generateDayArray(reportStartDate, reportEndDate);\n     const headers = [...DEFAULT_HEADERS, ...dayArray];\n@@ -1928,7 +2179,7 @@ const BulkAttendanceUpdate = () => {\n       };\n     });\n \n-    const newSpreadsheetData = musterReports.map((musterData) => {\n+    const newSpreadsheetData = updatedData.map((musterData) => {\n       const row = {\n         \"Emp ID\": musterData.code,\n         Name: musterData.name,\n@@ -1980,13 +2231,25 @@ const BulkAttendanceUpdate = () => {\n           }\n         }\n         \n-        const { tag } = getStatus(\n+        // Use real-time calculation for attendance status\n+        const workingHours = musterData[`working_hours_day_${monthNum}_${dayNum}`] || dayValue;\n+        const tagValue = musterData[tagKey] || 'Normal';\n+        const calculatedStatus = handleDayWorkHour(\n+          day, \n+          workingHours, \n+          musterData.code, \n+          musterData.salary_type || 1, \n+          tagValue\n+        );\n+        \n+        // Fallback to static calculation if real-time calculation fails\n+        const finalStatus = calculatedStatus || getStatus(\n           musterData[defaultKey],\n           dayValue,\n           defaultKey?.split(\"_\")[0]\n-        );\n+        ).tag;\n         \n-        row[day] = tag;\n+        row[day] = finalStatus;\n       });\n \n       return row;\n@@ -1999,14 +2262,15 @@ const BulkAttendanceUpdate = () => {\n     setNestedHeaders(dynamicNestedHeaders);\n     setSpreadsheetKey((prev) => prev + 1);\n   }, [\n-    musterReports,\n+    updatedData,\n     reportStartDate,\n     reportEndDate,\n     generateDayArray,\n     getStatus,\n     generateCellStyles,\n     generatePrefixedKeys,\n-    generateNestedHeaders\n+    generateNestedHeaders,\n+    handleDayWorkHour\n   ]);\n   \n   // Monitor changes to selectedColumns to update isAllSelected state\n@@ -2192,9 +2456,15 @@ const BulkAttendanceUpdate = () => {\n \n   const displayColumns = daysColumns.map((col, index) => {\n     if (index > 3 && isValidDay(col?.title)) {\n+      const dateForCheck = getDateWithinRange(resultFromDate, resultToDate, col?.title);\n+      const isLocked = isDateInFreezeRange(dateForCheck);\n+      \n       return {\n         ...col,\n-        title: getDayNameFromDate(col?.title)\n+        title: getDayNameFromDate(col?.title),\n+        readOnly: isLocked,\n+        locked: isLocked,\n+        className: isLocked ? 'freeze-locked-column' : ''\n       };\n     }\n     return col;\n@@ -2414,7 +2684,7 @@ const BulkAttendanceUpdate = () => {\n                 \n                 <CardBody>\n                   <div className={`ps-spredsheetTable table-responsive ps-table-wrapper position-relative`}>\n-                    {isInitializing || isSearchLoading || isPayrollFreezeDatesLoading || isTagUpdatePending ? (\n+                    {isInitializing || isSearchLoading || isPayrollFreezeDatesLoading || isTagUpdatePending || isMusterReportsLoading || isMusterReportsRefetching ? (\n                       <Skeleton count={8} height={50} />\n\n... [3 lines truncated] ...","is_error":false}]},"uuid":"23c1b932-4e45-4b63-9758-c09e45a8c084","timestamp":"2025-08-01T11:57:48.396Z","toolUseResult":{"stdout":"diff --git a/backend/dao/ReportsDao.js b/backend/dao/ReportsDao.js\nindex 9e0ab3cf..aa7b1ea4 100644\n--- a/backend/dao/ReportsDao.js\n+++ b/backend/dao/ReportsDao.js\n@@ -211,7 +211,19 @@ export default class ReportsDao {\n                         `) ` +\n                         `ELSE NULL ` +\n                         `END` +\n-                    `) AS 'day_${month}_${day}'`\n+                    `) AS 'day_${month}_${day}'`,\n+                    `MAX(` +\n+                        `CASE WHEN ${prefix}attandance_date = '${formattedDate}' ` +\n+                        `THEN ${prefix}effective_working_hrs ` +\n+                        `ELSE NULL ` +\n+                        `END` +\n+                    `) AS 'working_hours_day_${month}_${day}'`,\n+                    `MAX(` +\n+                        `CASE WHEN ${prefix}attandance_date = '${formattedDate}' ` +\n+                        `THEN ${prefix}tag_str ` +\n+                        `ELSE NULL ` +\n+                        `END` +\n+                    `) AS 'tag_day_${month}_${day}'`\n                 );\n             } else {\n                 columns.push(\n@@ -923,6 +935,7 @@ export default class ReportsDao {\n             ds.device_employee_id,\n             des.name as designation,\n             dep.name as department,\n+            1 as salary_type,\n             COUNT(CASE WHEN ds.calculated_status = 'Full Day' THEN 1 END) as working_days,\n             COUNT(CASE WHEN ds.calculated_status = 'Absent' THEN 1 END) as absent_days,\n             ${columns}\ndiff --git a/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx b/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\nindex 4ae76ff6..59306aea 100644\n--- a/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\n+++ b/src/pages/PayrollManagement/BulkAttendanceUpdate.jsx\n@@ -1,11 +1,11 @@\n import React, { useEffect, useState, useCallback, useMemo, useRef, lazy, Suspense } from \"react\";\n-import { useDispatch, useSelector } from \"react-redux\";\n+import { useSelector } from \"react-redux\";\n import { Container, Card, Row, Col, CardHeader, Spinner, Offcanvas, CardBody, } from \"reactstrap\";\n import Header from \"../../Layouts/Header\";\n import Flatpickr from \"react-flatpickr\";\n import { Dropdown as Library1Dropdown } from \"primereact/dropdown\";\n import { MultiSelect } from \"primereact/multiselect\";\n-import { getMusterSpreadsheetReports as fetchMusterReports } from \"../../store/actions\";\n+import { getMusterSpreadSheetReports } from \"../../helpers/nodebackend_helper\";\n import dayjs from \"dayjs\";\n import _, { debounce, groupBy } from \"lodash\";\n import AttendanveSidebar from \"../Reports/AttendanveSidebar\";\n@@ -16,12 +16,14 @@ import { handleExportExcel } from \"../../Components/Common/SpreadsheetWrapper\";\n import { toast } from \"react-toastify\";\n import \"primereact/resources/themes/lara-light-indigo/theme.css\";\n import \"primereact/resources/primereact.min.css\";\n-import { bulkAttendanceUpdateApi, getPayrollFreezeListing, } from \"../../helpers/awsapibackend_helper\";\n-import { useMutation, useQuery } from \"@tanstack/react-query\";\n-import { PAYROLL_FREEZE_LISTING, } from \"../../reactQueryKeys/PayrollQueryKeys\";\n+import { bulkAttendanceUpdateApi, getPayrollFreezeListing, get_freeze_unfreeze_configs } from \"../../helpers/awsapibackend_helper\";\n+import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\n+import { PAYROLL_FREEZE_LISTING, REPORT_FREEZE_UNFREEZE_CONFIG } from \"../../reactQueryKeys/PayrollQueryKeys\";\n import { useLocation, useNavigate, } from \"react-router-dom\";\n import ConfirmationPopup from \"../../Components/Common/ConfirmationPopup\";\n import CommonTooltip from '../../Components/Common/CommonTooltip';\n+import { getWorkingStatus } from \"../Reports/ReportHelpers/attendanceMasterConfigsHelper\";\n+import { getDateForDay } from \"../Reports/ReportHelpers/musterConfigsHelper\";\n \n const SpreadsheetContainer = lazy(() => import('../../Components/Common/SpreadsheetContainer'));\n \n@@ -151,28 +153,87 @@ function findEmployeeByCode(employeeMap, code) {\n }\n \n const BulkAttendanceUpdate = () => {\n-  const dispatch = useDispatch();\n+  const queryClient = useQueryClient();\n   \n   const {\n-    musterReports,\n-    musterReportSuccess,\n     organizations,\n-    reportStartDate,\n-    reportEndDate,\n   } = useSelector((state) => ({\n-    musterReports: state.Report.musterSpreadsheetReports,\n-    musterReportSuccess: state.Report.musterSpreadsheetReportSuccess,\n     organizations: state.Organizations.organizations,\n-    reportStartDate: state.Report.reportStartDate,\n-    reportEndDate: state.Report.reportEndDate,\n-    isBulkTagsUpdate: state.Report.isBulkTagsUpdate,\n-    bulkTagsUpdateError: state.Report.bulkTagsUpdateError\n   }));\n+\n+  const [selectedFilterBranch, setSelectedFilterBranch] = useState(\"\");\n+  const [currentDate] = useState(dayjs(new Date()).toDate());\n+  const [selectedFilterStartDate, setSelectedFilterStartDate] = useState(dayjs(currentDate).startOf(\"month\").toDate());\n+  const [selectedFilterEndDate, setSelectedFilterEndDate] = useState(currentDate);\n+  const [resultFromDate, setResultFromDate] = useState(dayjs(selectedFilterStartDate).format(\"YYYY-MM-DD\"));\n+  const [resultToDate, setResultToDate] = useState(dayjs(selectedFilterEndDate).format(\"YYYY-MM-DD\"));\n+\n+  const {\n+    data: musterReportsData,\n+    isLoading: isMusterReportsLoading,\n+    isSuccess: musterReportSuccess,\n+    refetch: refetchMusterReports,\n+    isRefetching: isMusterReportsRefetching,\n+    error: musterReportsError,\n+    isError: isMusterReportsError\n+  } = useQuery({\n+    queryKey: ['musterReports', resultFromDate, resultToDate, selectedFilterBranch],\n+    queryFn: () => getMusterSpreadSheetReports({\n+      filter_start_date: resultFromDate,\n+      filter_end_date: resultToDate,\n+      filter_branch: selectedFilterBranch\n+    }),\n+    enabled: Boolean(resultFromDate && resultToDate),\n+    staleTime: 5 * 60 * 1000, // 5 minutes\n+    retry: 3,\n+    select: (data) => data?.data || [],\n+    onError: (error) => {\n+      console.error('Failed to load muster reports:', error);\n+      toast.error('Failed to load attendance data. Please try again.');\n+    }\n+  });\n+\n+  // Memoize musterReports to avoid re-creation on every render\n+  const musterReports = useMemo(() => musterReportsData || [], [musterReportsData]);\n+  const reportStartDate = resultFromDate;\n+  const reportEndDate = resultToDate;\n+\n+  // Format optimized data to spreadsheet format (replaces formatBulkAttendanceData from Redux)\n+  const formatOptimizedDataForSpreadsheet = useCallback((apiData) => {\n+    if (!apiData || !Array.isArray(apiData)) return apiData;\n+    console.log(\"Formatting optimized data for spreadsheet:\", apiData);\n+\n+    return apiData.map(row => {\n+      const formattedRow = { ...row };\n+      \n+      Object.keys(row).forEach(key => {\n+        // Match pattern: day_MM_DD\n+        const dayMatch = key.match(/^day_(\\d+)_(\\d+)$/);\n+        if (dayMatch && row[key]) {\n+          const [, month, day] = dayMatch;\n+          const concatenatedValue = row[key];\n+          \n+          // Parse concatenated format: status#tag#error#leave#holiday#jeIds\n+          const parts = concatenatedValue.split('#');\n+          const [status, tag, error, leave, holiday, jeIds] = parts.map(val => val === 'null' ? null : val);\n+          \n+          // Create separate columns\n+          formattedRow[`day_${month}_${day}`] = status;\n+          formattedRow[`tag_day_${month}_${day}`] = tag;\n+          formattedRow[`err_day_${month}_${day}`] = error;\n+          formattedRow[`leave_name_day_${month}_${day}`] = leave;\n+          formattedRow[`holiday_name_day_${month}_${day}`] = holiday;\n+          formattedRow[`jeIds_day_${month}_${day}`] = jeIds;\n+        }\n+      });\n+      \n+      return formattedRow;\n+    });\n+  }, []);\n+\n+  const [updatedData, setUpdatedData] = useState([]);\n   const [nestedHeaders, setNestedHeaders] = useState([]);\n   const [initialRenderCount, setInitialRenderCount] = useState(0)\n-  const [selectedFilterBranch, setSelectedFilterBranch] = useState(\"\");\n-  const [selectedFilterStartDate, setSelectedFilterStartDate] = useState(null);\n-  const [selectedFilterEndDate, setSelectedFilterEndDate] = useState(null);\n   const [isSearchLoading, setIsSearchLoading] = useState(false);\n   const [organizationsList, setOrganizationsList] = useState([]);\n   const [spreadsheetData, setSpreadsheetData] = useState([]);\n@@ -184,19 +245,18 @@ const BulkAttendanceUpdate = () => {\n   const [regsidebardata, setRegSidebarData] = useState({});\n   const [attendanceLog, setAttendanceLog] = useState(false);\n   const [yesterdayDate] = useState(dayjs(new Date()).subtract(1, \"day\").toDate());\n-  const [maxToDate, setMaxToDate] = useState(yesterdayDate);\n+  const [maxToDate, setMaxToDate] = useState(currentDate);\n   const [tagLoader, setTagLoader] = useState(false);\n   const [showSpreadsheet, setShowSpreadsheet] = useState(false);\n   const [selectedColumns, setSelectedColumns] = useState([]);\n   const [isAllSelected, setIsAllSelected] = useState(false);\n   const [selectedDays, setSelectedDays] = useState(0);\n-  const [resultFromDate, setResultFromDate] = useState(dayjs(selectedFilterStartDate).format(\"YYYY-MM-DD\"));\n-  const [resultToDate, setResultToDate] = useState(dayjs(selectedFilterEndDate).format(\"YYYY-MM-DD\"));\n   const [unlockStartDate, setUnlockStartDate] = useState(null);\n   const [unlockEndDate, setUnlockEndDate] = useState(null);\n   const [isUnlocked, setIsUnlocked] = useState(false);\n   const [isConfirmationPopupOpen, setIsConfirmationPopupOpen] = useState(false);\n   const [isInitializing, setIsInitializing] = useState(true);\n+  const [freezeDates, setFreezeDates] = useState([]);\n   \n   const navigate = useNavigate();\n   const location = useLocation();\n@@ -207,6 +267,94 @@ const BulkAttendanceUpdate = () => {\n   const bulkUpdateFlagRef = useRef(false);\n   const isRevertingRef = useRef(false);\n \n+  // Freeze config query (moved before handleDayWorkHour)\n+  const {\n+    data: freezeConfigData,\n+    isLoading: freezeConfigDataLoading,\n+    refetch: refetchFreezeUnfreezeConfig,\n+    isRefetching: freezeConfigDataRefetching,\n+    error: freezeConfigError,\n+    isError: isFreezeConfigError\n+  } = useQuery({\n+    queryKey: [REPORT_FREEZE_UNFREEZE_CONFIG, resultFromDate, resultToDate],\n+    queryFn: () => get_freeze_unfreeze_configs({\n+      from_date : resultFromDate,\n+      to_date : resultToDate\n+    }),\n+    enabled: Boolean(resultFromDate && resultToDate),\n+    staleTime: 10*(60*1000),\n+    retry: 3,\n+    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n+    onError: (error) => {\n+      console.error('Failed to load freeze configuration:', error);\n+      toast.error('Failed to load freeze configuration. Some features may not work correctly.');\n+    }\n+  });\n+\n+  // Handle day work hour calculation for real-time status (moved before usage)\n+  const handleDayWorkHour = useCallback((key, status, emp_id, salary_type, tag) => {\n+    try {\n+      const date = getDateForDay(resultFromDate, resultToDate, key);\n+      return getWorkingStatus(\n+        freezeConfigData?.data, \n+        emp_id, \n+        date,\n+        status,\n+        salary_type, \n+        tag,\n+        \"MusterReport\"\n+      );\n+    } catch (error) {\n+      console.warn('Error in handleDayWorkHour calculation, falling back to status:', error);\n+      // Fallback to the original status if calculation fails\n+      return status;\n+    }\n+  }, [resultFromDate, resultToDate, freezeConfigData]);\n+\n+  // Update attendance data function similar to MusterReport.js (moved after handleDayWorkHour)\n+  const updateAttendanceData = useCallback((attendanceData) => {\n+    // First format the data for spreadsheet compatibility\n+    const formattedData = formatOptimizedDataForSpreadsheet(attendanceData);\n+    \n+    return formattedData.map(employeeData => {\n+      let updatedEmployeeData = { ...employeeData };\n+      \n+      Object.keys(updatedEmployeeData).forEach(key => {\n+        if (/^day_(1[0-2]|[1-9])_\\d+$/.test(key)) {\n+          updatedEmployeeData[key] = handleDayWorkHour(\n+            key,\n+            employeeData[key],\n+            employeeData.user_id,\n+            employeeData.salary_type,\n+            employeeData[`tag_day_${key.split('_')[1]}_${key.split('_')[2]}`]\n+          );\n+        }\n+      });\n+      \n+      return updatedEmployeeData;\n+    });\n+  }, [handleDayWorkHour, formatOptimizedDataForSpreadsheet]);\n+\n+  // Process attendance data when musterReports or freezeConfigData changes (moved after dependencies)\n+  useEffect(() => {\n+    if (musterReports.length && freezeConfigData) {\n+      const updated = updateAttendanceData(musterReports);\n+      setUpdatedData(updated);\n+    } else {\n+      setUpdatedData([]);\n+    }\n+  }, [musterReports, freezeConfigData, updateAttendanceData]);\n+\n+  // Reset isSearchLoading when muster reports finish loading\n+  useEffect(() => {\n+    if (musterReportSuccess && !isMusterReportsLoading && !isMusterReportsRefetching) {\n+      setIsSearchLoading(false);\n+    }\n+  }, [musterReportSuccess, isMusterReportsLoading, isMusterReportsRefetching]);\n+\n+\n+  console.log(\"Updated attendance data:\", updatedData);\n+\n   const getDateWithinRange = useCallback((startStr, endStr, displayDay) => {\n       const start = dayjs(startStr, \"YYYY-MM-DD\");\n       const end = dayjs(endStr, \"YYYY-MM-DD\");\n@@ -249,24 +397,27 @@ const BulkAttendanceUpdate = () => {\n   const { mutate: submitBulkTagUpdates, isPending: isTagUpdatePending } = useMutation({\n \n     mutationFn: bulkAttendanceUpdateApi,\n-    onSuccess: (data) => {\n+    onSuccess: async (data) => {\n       if (data?.statusCode === 200) {\n         toast.success(data?.message || \"Changes saved successfully\");\n-        // Reset state\n-        setIsSearchLoading(true);\n+        \n+        // Reset component state\n+        setModifiedData([]);\n         setSpreadsheetData([]);\n         setSpreadsheetKey((prev) => prev + 1);\n-        setModifiedData([]);\n         \n+        // Invalidate and refetch muster reports data\n+        await queryClient.invalidateQueries({\n+          queryKey: ['musterReports', resultFromDate, resultToDate, selectedFilterBranch]\n+        });\n+        \n+        // Force refetch to get fresh data\n         if (reportStartDate && reportEndDate) {\n-          dispatch(\n-            fetchMusterReports({\n-              filter_start_date: reportStartDate,\n-              filter_end_date: reportEndDate,\n-              filter_branch: selectedFilterBranch,\n-            })\n-          );\n+          await refetchMusterReports();\n         }\n+        \n+        // Reset loading state after data is refreshed\n+        setIsSearchLoading(false);\n       } else {\n         toast.error(data?.message || \"Failed to save changes\");\n       }\n@@ -416,6 +567,41 @@ const BulkAttendanceUpdate = () => {\n       ? rowBalanceObj[mrow.code][leave]\n       : baseBalanceMap[leave];\n   }, []);\n+\n+\n+  // Check if a date is within freeze config date ranges\n+  const isDateInFreezeRange = useCallback((date) => {\n+    // If freeze config failed to load, fall back to checking payroll freeze dates\n+    if (isFreezeConfigError || !freezeConfigData?.data?.freeze_config) {\n+      if (freezeDates && freezeDates.length > 0) {\n+        const targetDate = dayjs(date).format('YYYY-MM-DD');\n+        return freezeDates.some(freezeDate => {\n+          return targetDate >= freezeDate.from_date && targetDate <= freezeDate.to_date;\n+        });\n+      }\n+      return false;\n+    }\n+    \n+    const targetDate = dayjs(date);\n+    \n+    // Check freeze config entries\n+    for (const entry of freezeConfigData.data.freeze_config) {\n+      // Check each date range in the entry\n+      for (const range in entry) {\n+        if (range.includes(' - ')) {\n+          const [start, end] = range.split(' - ');\n+          const startDate = dayjs(start);\n+          const endDate = dayjs(end);\n+          \n+          if (targetDate.isSameOrAfter(startDate) && targetDate.isSameOrBefore(endDate)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    \n+    return false;\n+  }, [freezeConfigData, isFreezeConfigError, freezeDates]);\n   \n   // Build dropdown source based on cell value\n   const buildDropdownSource = useCallback((currentValue, cellSourceExcludingWOH, distinct_leave_names, mrow, rowBalanceMapsObj, baseBalanceMap) => {\n@@ -530,7 +716,7 @@ const BulkAttendanceUpdate = () => {\n   []);\n \n   // Create cell properties for dropdown cells\n-  const createCellProperties = useCallback((dropdownSource, validateFn, currentValue) => {\n+  const createCellProperties = useCallback((dropdownSource, validateFn, currentValue, columnTitle = null) => {\n     const cellProps = {\n       type: \"dropdown\",\n       width: 80,\n@@ -543,15 +729,22 @@ const BulkAttendanceUpdate = () => {\n       validate: validateFn,\n     };\n \n-    // Make the cell read-only if it's \"H\" (Holiday) or \"WO\" (Week Off)\n-    if (currentValue === ATTENDANCE_CODES.HOLIDAY) {\n-    // if (currentValue === ATTENDANCE_CODES.HOLIDAY || currentValue === ATTENDANCE_CODES.WEEK_OFF) {\n+    // Check if column is in freeze range\n+    let isColumnLocked = false;\n+    if (columnTitle && isValidDay(columnTitle)) {\n+      const dateForCheck = getDateWithinRange(resultFromDate, resultToDate, columnTitle);\n+      isColumnLocked = isDateInFreezeRange(dateForCheck);\n+    }\n \n+    // Make the cell read-only if it's \"H\" (Holiday), \"WO\" (Week Off), or in freeze range\n+    if (currentValue === ATTENDANCE_CODES.HOLIDAY || isColumnLocked) {\n+    // if (currentValue === ATTENDANCE_CODES.HOLIDAY || currentValue === ATTENDANCE_CODES.WEEK_OFF) {\n       cellProps.readOnly = true;\n+      cellProps.className = isColumnLocked ? 'freeze-locked-column' : '';\n     }\n   \n     return cellProps;\n-  }, []);\n+  }, [isDateInFreezeRange, resultFromDate, resultToDate, getDateWithinRange]);\n   \n   // Create a validation function for leave balance checks\n   const createValidateFunction = useCallback((currentWorkSheet, col, rowIndex, currentValue, mrow, distinct_leave_names, rowBalanceMapsObj, baseBalanceMap) => {\n@@ -589,7 +782,7 @@ const BulkAttendanceUpdate = () => {\n     const columnsLength = daysColumns.length;\n \n     // Get the muster report row data for this row\n-    const mrow = musterReports[rowIndex];\n+    const mrow = updatedData[rowIndex];\n     // Compute the base leave balances and the leave aliases for this employee\n     const baseBalanceMap = computeBalanceMap(mrow);\n     const leaveAliasesMapping = computeLeaveAliases(mrow);\n@@ -627,12 +820,13 @@ const BulkAttendanceUpdate = () => {\n       );\n       \n       // Create cell properties\n-      const cellProps = createCellProperties(dropdownSource, validateFn, currentValue);\n+      const columnTitle = daysColumns[col]?.title;\n+      const cellProps = createCellProperties(dropdownSource, validateFn, currentValue, columnTitle);\n       \n       // Finally, update the cell's property with the new dropdown settings\n       currentWorkSheet.setProperty(col, rowIndex, cellProps);\n     }\n-  }, [musterReports, daysColumns, buildDropdownSource, computeBalanceMap, computeLeaveAliases, getCellSourceExcludingWOH, createValidateFunction, createCellProperties, rowBalanceMapsObj]);\n+  }, [updatedData, daysColumns, buildDropdownSource, computeBalanceMap, computeLeaveAliases, getCellSourceExcludingWOH, createValidateFunction, createCellProperties, rowBalanceMapsObj]);\n   \n   // Get the original cell tag from the initial spreadsheet data\n   const getOriginalCellTag = useCallback((code, day) => {\n@@ -705,16 +899,10 @@ const BulkAttendanceUpdate = () => {\n     setModifiedData([]);\n     setShowSpreadsheet(true);\n \n-    // Fetch data\n-    dispatch(\n-      fetchMusterReports({\n-        filter_start_date: criteria.startDate,\n-        filter_end_date: criteria.endDate,\n-        filter_branch: criteria.branch,\n-      })\n-    );\n+    // Fetch data - React Query will automatically refetch when query key changes\n+    refetchMusterReports();\n   }, [\n-    dispatch,\n+    refetchMusterReports,\n     selectedFilterBranch,\n     selectedFilterStartDate,\n     selectedFilterEndDate,\n@@ -746,7 +934,7 @@ const BulkAttendanceUpdate = () => {\n       (key) => delete rowBalanceMapsObj[key]\n     );\n     \n-    musterReports.forEach((row) => {\n+    updatedData.forEach((row) => {\n       rowBalanceMapsObj[row.code] = computeBalanceMap(row);\n     });\n \n@@ -768,7 +956,7 @@ const BulkAttendanceUpdate = () => {\n     setTimeout(() => {\n       setShowSpreadsheet(true);\n     }, 0);\n-  }, [musterReports, originalSpreadsheetData, daysColumns, generateCellStyles, computeBalanceMap, rowBalanceMapsObj]);\n+  }, [updatedData, originalSpreadsheetData, daysColumns, generateCellStyles, computeBalanceMap, rowBalanceMapsObj]);\n   \n   // Handler for resetting specific columns\n   const handleResetColumns = useCallback(() => {\n@@ -1033,6 +1221,15 @@ const BulkAttendanceUpdate = () => {\n           // Get journal entry IDs for this day\n           const je_ids_key = `jeIds_day_${dateObj.month() + 1}_${dateObj.date()}`;\n           const je_ids = empRecord[je_ids_key];\n+          \n+          // Debug je_ids extraction\n+          console.log(`Debug je_ids for ${code} on ${dayCol}:`, {\n+            je_ids_key,\n+            je_ids,\n+            je_ids_type: typeof je_ids,\n+            empRecord_keys: Object.keys(empRecord).filter(k => k.includes('jeIds')),\n+            empRecord: empRecord\n+          });\n   \n           // Get the original cell tag from initial data\n           const originalCellTag = getOriginalCellTag(code, dayCol);\n@@ -1050,8 +1247,16 @@ const BulkAttendanceUpdate = () => {\n             newValue: newValue,\n           };\n   \n-          // If je_ids is null or empty, add to empty_je_ids_arr\n-          if (!je_ids || je_ids.length === 0) {\n+          // Check for empty je_ids more thoroughly - handle null, undefined, empty string, \"null\" string\n+          const isEmptyJeIds = !je_ids || \n+                              je_ids === null || \n+                              je_ids === undefined || \n+                              je_ids === '' || \n+                              je_ids === 'null' || \n+                              (typeof je_ids === 'string' && je_ids.trim() === '') ||\n+                              (Array.isArray(je_ids) && je_ids.length === 0);\n+          \n+          if (isEmptyJeIds) {\n             const entry = {\n               ...baseEntry,\n               oldTag: getTagValue(originalCellTag),\n@@ -1606,7 +1811,8 @@ const BulkAttendanceUpdate = () => {\n           );\n           \n           // Create cell properties\n-          const cellProps = createCellProperties(dropdownSource, validateFn, currentValue);\n+          const columnTitle = daysColumns[col]?.title;\n+          const cellProps = createCellProperties(dropdownSource, validateFn, currentValue, columnTitle);\n           // const cellVal = currentWorkSheet.getValueFromCoords(col, row);\n           // if (cellVal?.toString() === ATTENDANCE_CODES.HALF_DAY) {\n           // display tooltip for half day values\n@@ -1651,7 +1857,8 @@ const BulkAttendanceUpdate = () => {\n                 worksheet, dayColLoopIndex, originalRowIndex, currentValue,\n                 mrow, distinct_leave_names, rowBalanceMapsObj, baseBalanceMap\n             );\n-            const cellProps = createCellProperties(dropdownSource, validateFn, currentValue);\n+            const columnTitle = daysColumns[dayColLoopIndex]?.title;\n+            const cellProps = createCellProperties(dropdownSource, validateFn, currentValue, columnTitle);\n             worksheet.setProperty(dayColLoopIndex, originalRowIndex, cellProps);\n         }\n       }\n@@ -1812,6 +2019,51 @@ const BulkAttendanceUpdate = () => {\n       .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\n         border-color: #2381D9 !important;\n       }\n+      \n+      /* Styling for freeze-locked columns */\n+      .freeze-locked-column {\n+        background-color: rgba(255, 0, 0, 0.15) !important;\n+        opacity: 0.8 !important;\n+        cursor: not-allowed !important;\n+      }\n+      \n+      /* Additional styling for locked column headers */\n+      th.freeze-locked-column {\n+        background-color: rgba(255, 0, 0, 0.2) !important;\n+        background-image: repeating-linear-gradient(\n+          45deg,\n+          transparent,\n+          transparent 10px,\n+          rgba(255,255,255,.3) 10px,\n+          rgba(255,255,255,.3) 20px\n+        ) !important;\n+        font-style: italic !important;\n+        position: relative !important;\n+        border: 2px solid rgba(255, 0, 0, 0.4) !important;\n+      }\n+      \n+      /* Add locked icon to locked columns */\n+      th.freeze-locked-column::after {\n+        content: \"ðŸ”’\";\n+        position: absolute;\n+        top: 2px;\n+        right: 2px;\n+        font-size: 10px;\n+        opacity: 0.8;\n+        color: #d32f2f;\n+      }\n+      \n+      /* Locked cell styling */\n+      td.freeze-locked-column {\n+        background-color: rgba(255, 0, 0, 0.15) !important;\n+        color: #d32f2f !important;\n+        cursor: not-allowed !important;\n+        border: 1px solid rgba(255, 0, 0, 0.3) !important;\n+      }\n+      \n+      td.freeze-locked-column:hover {\n+        background-color: rgba(255, 0, 0, 0.25) !important;\n+      }\n     `;\n   }, []);\n   \n@@ -1825,7 +2077,6 @@ const BulkAttendanceUpdate = () => {\n     staleTime: 10*(60*1000),\n   });\n \n-  const [freezeDates, setFreezeDates] = useState([]);\n   useEffect(() => {\n     if (\n       payrollFreezDates !== undefined &&\n@@ -1882,24 +2133,24 @@ const BulkAttendanceUpdate = () => {\n   \n   // Update search loading state when report data arrives\n   useEffect(() => {\n-    if (musterReportSuccess || musterReports) {\n+    if (musterReportSuccess || updatedData.length > 0) {\n       setIsSearchLoading(false);\n     }\n-  }, [musterReportSuccess, musterReports]);\n+  }, [musterReportSuccess, updatedData]);\n   \n   \n-  // Initialize rowBalanceMapsObj when musterReports data arrives\n+  // Initialize rowBalanceMapsObj when updatedData arrives\n   useEffect(() => {\n-    if (!_.isEmpty(musterReports)) {\n+    if (!_.isEmpty(updatedData)) {\n       Object.keys(rowBalanceMapsObj).forEach(\n         (key) => delete rowBalanceMapsObj[key]\n       );\n       \n-      musterReports.forEach((row) => {\n+      updatedData.forEach((row) => {\n         rowBalanceMapsObj[row.code] = computeBalanceMap(row);\n       });\n     }\n-  }, [musterReports, rowBalanceMapsObj, computeBalanceMap]);\n+  }, [updatedData, rowBalanceMapsObj, computeBalanceMap]);\n   \n   // Trigger initial search on component mount\n   useEffect(() => {\n@@ -1909,9 +2160,9 @@ const BulkAttendanceUpdate = () => {\n   }    // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [initialRenderCount, selectedFilterStartDate, selectedFilterEndDate]);\n   \n-  // Prepare spreadsheet data and columns when musterReports changes\n+  // Prepare spreadsheet data and columns when updatedData changes\n   useEffect(() => {\n-    if (_.isEmpty(musterReports)) return;\n+    if (_.isEmpty(updatedData)) return;\n \n     const dayArray = generateDayArray(reportStartDate, reportEndDate);\n     const headers = [...DEFAULT_HEADERS, ...dayArray];\n@@ -1928,7 +2179,7 @@ const BulkAttendanceUpdate = () => {\n       };\n     });\n \n-    const newSpreadsheetData = musterReports.map((musterData) => {\n+    const newSpreadsheetData = updatedData.map((musterData) => {\n       const row = {\n         \"Emp ID\": musterData.code,\n         Name: musterData.name,\n@@ -1980,13 +2231,25 @@ const BulkAttendanceUpdate = () => {\n           }\n         }\n         \n-        const { tag } = getStatus(\n+        // Use real-time calculation for attendance status\n+        const workingHours = musterData[`working_hours_day_${monthNum}_${dayNum}`] || dayValue;\n+        const tagValue = musterData[tagKey] || 'Normal';\n+        const calculatedStatus = handleDayWorkHour(\n+          day, \n+          workingHours, \n+          musterData.code, \n+          musterData.salary_type || 1, \n+          tagValue\n+        );\n+        \n+        // Fallback to static calculation if real-time calculation fails\n+        const finalStatus = calculatedStatus || getStatus(\n           musterData[defaultKey],\n           dayValue,\n           defaultKey?.split(\"_\")[0]\n-        );\n+        ).tag;\n         \n-        row[day] = tag;\n+        row[day] = finalStatus;\n       });\n \n       return row;\n@@ -1999,14 +2262,15 @@ const BulkAttendanceUpdate = () => {\n     setNestedHeaders(dynamicNestedHeaders);\n     setSpreadsheetKey((prev) => prev + 1);\n   }, [\n-    musterReports,\n+    updatedData,\n     reportStartDate,\n     reportEndDate,\n     generateDayArray,\n     getStatus,\n     generateCellStyles,\n     generatePrefixedKeys,\n-    generateNestedHeaders\n+    generateNestedHeaders,\n+    handleDayWorkHour\n   ]);\n   \n   // Monitor changes to selectedColumns to update isAllSelected state\n@@ -2192,9 +2456,15 @@ const BulkAttendanceUpdate = () => {\n \n   const displayColumns = daysColumns.map((col, index) => {\n     if (index > 3 && isValidDay(col?.title)) {\n+      const dateForCheck = getDateWithinRange(resultFromDate, resultToDate, col?.title);\n+      const isLocked = isDateInFreezeRange(dateForCheck);\n+      \n       return {\n         ...col,\n-        title: getDayNameFromDate(col?.title)\n+        title: getDayNameFromDate(col?.title),\n+        readOnly: isLocked,\n+        locked: isLocked,\n+        className: isLocked ? 'freeze-locked-column' : ''\n       };\n     }\n     return col;\n@@ -2414,7 +2684,7 @@ const BulkAttendanceUpdate = () => {\n                 \n                 <CardBody>\n                   <div className={`ps-spredsheetTable table-responsive ps-table-wrapper position-relative`}>\n-                    {isInitializing || isSearchLoading || isPayrollFreezeDatesLoading || isTagUpdatePending ? (\n+                    {isInitializing || isSearchLoading || isPayrollFreezeDatesLoading || isTagUpdatePending || isMusterReportsLoading || isMusterReportsRefetching ? (\n                       <Skeleton count={8} height={50} />\n\n... [3 lines truncated] ...","stderr":"","interrupted":false,"isImage":false}}
