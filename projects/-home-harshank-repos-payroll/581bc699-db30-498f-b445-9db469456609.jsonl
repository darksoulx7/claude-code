{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":"Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."},"isMeta":true,"uuid":"6ef687a0-3690-463f-9a78-77d9178c6806","timestamp":"2025-08-06T19:23:24.011Z"}
{"parentUuid":"6ef687a0-3690-463f-9a78-77d9178c6806","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":"<command-name>/clear</command-name>\n          <command-message>clear</command-message>\n          <command-args></command-args>"},"uuid":"d9d090de-868a-435e-b062-0c3c68c3db45","timestamp":"2025-08-06T19:23:23.980Z"}
{"parentUuid":"d9d090de-868a-435e-b062-0c3c68c3db45","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":"<local-command-stdout></local-command-stdout>"},"uuid":"871d7e3a-38aa-497c-8922-90e12a317f9c","timestamp":"2025-08-06T19:23:24.011Z"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"880d3704-4994-4ee4-83db-3a6f30b3244c","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"text","text":"@src/pages/ShiftManagement/ShiftTimeNew.js add comment in this file."}]},"uuid":"d60919d6-a0ab-4134-8476-a84fd195e24b","timestamp":"2025-08-06T19:19:17.763Z"}
{"parentUuid":"d60919d6-a0ab-4134-8476-a84fd195e24b","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_018ZKZWvnSp772k6FTG7nHq4","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll add a comment to the ShiftTimeNew.js file. Let me first read the file to understand its structure and then add an appropriate comment."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":16237,"cache_read_input_tokens":0,"output_tokens":112,"service_tier":"standard"}},"requestId":"req_011CRrzk77ukpZpL1KTMqkXf","uuid":"0751b5ac-fd8f-4b3f-96d2-ac07eccd34dd"}
{"parentUuid":"0751b5ac-fd8f-4b3f-96d2-ac07eccd34dd","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_018ZKZWvnSp772k6FTG7nHq4","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01BNjVUHDQ9MVYJUfaSAq2YT","name":"Read","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":16237,"cache_read_input_tokens":0,"output_tokens":112,"service_tier":"standard"}},"requestId":"req_011CRrzk77ukpZpL1KTMqkXf","uuid":"58f92076-0d7d-49ed-8d9e-612a545c0604"}
{"parentUuid":"58f92076-0d7d-49ed-8d9e-612a545c0604","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"File content (32114 tokens) exceeds maximum allowed tokens (25000). Please use offset and limit parameters to read specific portions of the file, or use the GrepTool to search for specific content.","is_error":true,"tool_use_id":"toolu_01BNjVUHDQ9MVYJUfaSAq2YT"}]},"uuid":"3e070b8a-4776-4951-8256-bba6f94f5f6b","timestamp":"2025-08-06T19:24:07.076Z","toolUseResult":"Error: File content (32114 tokens) exceeds maximum allowed tokens (25000). Please use offset and limit parameters to read specific portions of the file, or use the GrepTool to search for specific content."}
{"parentUuid":"3e070b8a-4776-4951-8256-bba6f94f5f6b","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01RpHAUFjoduz2719zzJuscQ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"The file is quite large. Let me read just the beginning to understand the structure and add an appropriate comment."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":8,"cache_creation_input_tokens":171,"cache_read_input_tokens":16237,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRrzkbCrhyGKpJVNunvZ1","uuid":"599d8d55-434d-4a92-a04a-20c72f1e149e"}
{"parentUuid":"599d8d55-434d-4a92-a04a-20c72f1e149e","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01RpHAUFjoduz2719zzJuscQ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01U8tWSeKMcBBjiCFv7pS35o","name":"Read","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","limit":50}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":8,"cache_creation_input_tokens":171,"cache_read_input_tokens":16237,"output_tokens":119,"service_tier":"standard"}},"requestId":"req_011CRrzkbCrhyGKpJVNunvZ1","uuid":"99709041-ba2f-40e3-ba3e-c97fee82f6cb"}
{"parentUuid":"99709041-ba2f-40e3-ba3e-c97fee82f6cb","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01U8tWSeKMcBBjiCFv7pS35o","type":"tool_result","content":"     1→import React, { useState, useEffect, useCallback, useRef } from \"react\";\n     2→import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n     3→import {\n     4→  Offcanvas,\n     5→  OffcanvasBody,\n     6→  OffcanvasHeader,\n     7→  UncontrolledDropdown,\n     8→  DropdownItem,\n     9→  DropdownMenu,\n    10→  DropdownToggle,\n    11→  TabPane,\n    12→  TabContent,\n    13→  Badge,\n    14→  UncontrolledTooltip,\n    15→} from \"reactstrap\";\n    16→import noData from \"../../assets/images/no-data.svg\";\n    17→import SimpleBar from \"simplebar-react\";\n    18→import Flatpickr from \"react-flatpickr\";\n    19→import {\n    20→  Container,\n    21→  CardBody,\n    22→  Row,\n    23→  Col,\n    24→  Card,\n    25→  CardHeader,\n    26→  Form,\n    27→  Label,\n    28→  Input,\n    29→  Table,\n    30→  Modal, ModalBody, ModalHeader, Spinner\n    31→} from \"reactstrap\";\n    32→\n    33→import stepUser from \"../../assets/images/svgIcons/stepUser.svg\";\n    34→import tableRight from \"../../assets/images/svgIcons/tableRight.svg\";\n    35→import tap from \"../../assets/images/svgIcons/TAP.svg\";\n    36→import more from \"../../assets/images/svgIcons/more_vert_.svg\";\n    37→import move from \"../../assets/images/svg/move.svg\";\n    38→import { MultiSelect } from 'primereact/multiselect';\n    39→\n    40→//Import Breadcrumb\n    41→import BreadCrumb from \"../../Components/Common/BreadCrumb\";\n    42→import AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";\n    43→import AddShiftSidebar from \"./AddShiftSidebar\";\n    44→import SetWokringHoursForm from \"./SetWokringHoursForm\";\n    45→import AddShiftSidebarNew from \"./AddShiftSidebarNew\";\n    46→import remarkimg from \"../../assets/images/svg/remark-image.svg\"\n    47→import breakimg from \"../../assets/images/svg/breaktime.svg\"\n    48→import arrowrightimg from \"../../assets/images/svg/arrow-right-grey.svg\"\n    49→import dayjs, { Dayjs } from 'dayjs';\n    50→import utc from 'dayjs/plugin/utc';\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"deca1001-fa9a-4ec6-915d-0f554bcbccbf","timestamp":"2025-08-06T19:24:07.076Z","toolUseResult":{"type":"text","file":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","content":"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport {\n  Offcanvas,\n  OffcanvasBody,\n  OffcanvasHeader,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  TabPane,\n  TabContent,\n  Badge,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport noData from \"../../assets/images/no-data.svg\";\nimport SimpleBar from \"simplebar-react\";\nimport Flatpickr from \"react-flatpickr\";\nimport {\n  Container,\n  CardBody,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  Form,\n  Label,\n  Input,\n  Table,\n  Modal, ModalBody, ModalHeader, Spinner\n} from \"reactstrap\";\n\nimport stepUser from \"../../assets/images/svgIcons/stepUser.svg\";\nimport tableRight from \"../../assets/images/svgIcons/tableRight.svg\";\nimport tap from \"../../assets/images/svgIcons/TAP.svg\";\nimport more from \"../../assets/images/svgIcons/more_vert_.svg\";\nimport move from \"../../assets/images/svg/move.svg\";\nimport { MultiSelect } from 'primereact/multiselect';\n\n//Import Breadcrumb\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";\nimport AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";\nimport AddShiftSidebar from \"./AddShiftSidebar\";\nimport SetWokringHoursForm from \"./SetWokringHoursForm\";\nimport AddShiftSidebarNew from \"./AddShiftSidebarNew\";\nimport remarkimg from \"../../assets/images/svg/remark-image.svg\"\nimport breakimg from \"../../assets/images/svg/breaktime.svg\"\nimport arrowrightimg from \"../../assets/images/svg/arrow-right-grey.svg\"\nimport dayjs, { Dayjs } from 'dayjs';\nimport utc from 'dayjs/plugin/utc';","numLines":50,"startLine":1,"totalLines":2151}}}
{"parentUuid":"deca1001-fa9a-4ec6-915d-0f554bcbccbf","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_0115Nz7vAuftTFnySaJWoDTF","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now I'll add a comment at the top of the file to document what this component does:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":912,"cache_read_input_tokens":16408,"output_tokens":7,"service_tier":"standard"}},"requestId":"req_011CRrzkw4x5VxMCveK7PaXj","uuid":"69cf959a-9937-4676-8c6a-160ab02448b6"}
{"parentUuid":"69cf959a-9937-4676-8c6a-160ab02448b6","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_0115Nz7vAuftTFnySaJWoDTF","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01TVgzxJKteXPudzHYUvbKAk","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","old_string":"import React, { useState, useEffect, useCallback, useRef } from \"react\";","new_string":"/**\n * ShiftTimeNew - Advanced shift management component\n * Handles shift creation, editing, and assignment with drag-and-drop functionality\n * Supports roster management, working hours configuration, and employee shift assignments\n */\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":912,"cache_read_input_tokens":16408,"output_tokens":225,"service_tier":"standard"}},"requestId":"req_011CRrzkw4x5VxMCveK7PaXj","uuid":"4f3b7b2c-6c40-49ba-bb6f-545edfba3f5f"}
{"parentUuid":"4f3b7b2c-6c40-49ba-bb6f-545edfba3f5f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01TVgzxJKteXPudzHYUvbKAk","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→/**\n     2→ * ShiftTimeNew - Advanced shift management component\n     3→ * Handles shift creation, editing, and assignment with drag-and-drop functionality\n     4→ * Supports roster management, working hours configuration, and employee shift assignments\n     5→ */\n     6→import React, { useState, useEffect, useCallback, useRef } from \"react\";\n     7→import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n     8→import {\n     9→  Offcanvas,\n    10→  OffcanvasBody,"}]},"uuid":"6f7d10e2-1d07-4261-b6e3-b04048944df4","timestamp":"2025-08-06T19:24:07.076Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","oldString":"import React, { useState, useEffect, useCallback, useRef } from \"react\";","newString":"/**\n * ShiftTimeNew - Advanced shift management component\n * Handles shift creation, editing, and assignment with drag-and-drop functionality\n * Supports roster management, working hours configuration, and employee shift assignments\n */\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";","originalFile":"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport {\n  Offcanvas,\n  OffcanvasBody,\n  OffcanvasHeader,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  TabPane,\n  TabContent,\n  Badge,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport noData from \"../../assets/images/no-data.svg\";\nimport SimpleBar from \"simplebar-react\";\nimport Flatpickr from \"react-flatpickr\";\nimport {\n  Container,\n  CardBody,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  Form,\n  Label,\n  Input,\n  Table,\n  Modal, ModalBody, ModalHeader, Spinner\n} from \"reactstrap\";\n\nimport stepUser from \"../../assets/images/svgIcons/stepUser.svg\";\nimport tableRight from \"../../assets/images/svgIcons/tableRight.svg\";\nimport tap from \"../../assets/images/svgIcons/TAP.svg\";\nimport more from \"../../assets/images/svgIcons/more_vert_.svg\";\nimport move from \"../../assets/images/svg/move.svg\";\nimport { MultiSelect } from 'primereact/multiselect';\n\n//Import Breadcrumb\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";\nimport AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";\nimport AddShiftSidebar from \"./AddShiftSidebar\";\nimport SetWokringHoursForm from \"./SetWokringHoursForm\";\nimport AddShiftSidebarNew from \"./AddShiftSidebarNew\";\nimport remarkimg from \"../../assets/images/svg/remark-image.svg\"\nimport breakimg from \"../../assets/images/svg/breaktime.svg\"\nimport arrowrightimg from \"../../assets/images/svg/arrow-right-grey.svg\"\nimport dayjs, { Dayjs } from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\n//redux\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport withRouter from \"../../Components/Common/withRouter\";\n\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\n\nimport {\n  getShiftsNew as onGetShifts,\n  deleteShift as onDeleteShift,\n  afterSaveShift,\n  deleteShiftNew,\n  addNewShiftNew,\n  updateShiftNew,\n  resetValidationErrors,\n  onGetWorkingHours,\n  getShiftSwitchDecision\n} from \"../../store/actions\";\n\nimport DeleteModal from \"../../Components/Common/DeleteModal\";\nimport ConfirmationModalNew from \"../../Components/Common/ConfirmationModalNew\";\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Header from \"../../Layouts/Header\";\n\nimport * as Yup from \"yup\";\nimport { Formik, Field, useFormik, useField } from \"formik\";\nimport ShiftLogSideBar from \"./ShiftLogSideBar\";\n\nimport {userHasRights, isSuperAdmin, moduleName}  from \"../../helpers/rights_helper\"\n\nconst ShiftTimeNew = () => {\n  const [isShitPageDropdown, setShitPageDropdown] = useState(false);\n  const [shiftLogsDetails, setShiftLogsDetails] = useState(null);\n\n  const toggleDropdown = () => {\n    setShitPageDropdown(!isShitPageDropdown);\n  };\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const handleMouseEnter = () => {\n    setShowTooltip(!showTooltip);\n  };\n\n  const [isRight, setIsRight] = useState(false);\n  const toggleRightCanvas = () => {\n    setIsRight(!isRight);\n  };\n\n  const [isRight2, setIsRight2] = useState(false);\n\n  const toggleRightCanvas2 = useCallback(() => {\n    setIsRight2(!isRight2);\n  }, [isRight2]);\n\n  // Default Tabs\n  const [activeTab, setactiveTab] = useState(\"1\");\n  const toggle = (tab) => {\n    if (activeTab !== tab) {\n      setactiveTab(tab);\n    }\n  };\n\n  const [codee, setCode] = useState(false);\n  const toggleCode = () => {\n    setCode(!codee);\n  };\n\n  const [shiftDetail, setshiftDetail] = useState([]);\n  const [isEdit, setIsEdit] = useState(false);\n  const [deleteModalData, setDeleteModalData] = useState(null);\n\n  //b code\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =\n    useSelector((state) => ({\n      shifts: state.Shift.shifts,\n      isShiftCreated: state.Shift.isShiftCreated,\n      isShiftSuccess: state.Shift.isShiftListSuccess,\n      error: state.Shift.error,\n      noShiftYet: state.Shift.noShiftYet,\n      isShiftDelLoading: state.Shift.isShiftDelLoading,\n      isShiftDeleted: state.Shift.isShiftDelete,\n      loading: state.Shift.loading,\n      isShiftAdd: state.Shift.isShiftAdd,\n      isShiftUpdate: state.Shift.isShiftUpdate,\n      validationErrors: state.Shift.validationErrors,\n      workingHrsData: state.Shift.workingHrsData\n\n    }));\n\n  // let isShiftSwitchDecisionTaken = 0;\n\n  // if (authUser && authUser.data.shift_switch_decision_taken !== undefined) {\n  //     isShiftSwitchDecisionTaken = parseInt(authUser.data.shift_switch_decision_taken) || 0;\n  // }\n  \n  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }\n\n    // if( !isShiftSwitchDecisionTaken ) {\n    //   dispatch(getShiftSwitchDecision());\n    // } else if (isShiftSwitchDecisionTaken !== 1) {\n    //   navigate(\"/shiftEntryPage\");\n    // }\n\n  }, [navigate]);\n  \n\n  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);\n\n  const [isFirstRowOpen, setIsFirstRowOpen] = useState(false);\n  const [modelShiftId, setModelShiftId] = useState(0);\n\n  \n  \n  // Update Data\n  const handleEditShift = useCallback(\n    (arg) => {\n      const shift = arg;\n\n      let updatedShiftDetail = {};\n\n      if (shift && shift.shift_daywise_data) {\n        const daywiseData = JSON.parse(shift.shift_daywise_data);\n        daywiseData.forEach(dayData => {\n          const { day, from_time, to_time, is_weekoff } = dayData;\n          updatedShiftDetail[`shift_from_time_${day}`] = from_time;\n          updatedShiftDetail[`shift_to_time_${day}`] = to_time;\n          updatedShiftDetail[`is_weekoff_${day}`] = is_weekoff;\n        });\n      }\n\n      setshiftDetail({\n        id: shift.id,\n        shift_name: shift.name,\n        shift_description: shift.description,\n        shift_from_time: shift.shift_from_time,\n        shift_to_time: shift.shift_to_time,\n        default_shift: shift.default_shift,\n        ...updatedShiftDetail\n\n      });\n\n      setIsEdit(true);\n      toggleRightCanvas2();\n    },\n    [toggleRightCanvas2]\n  );\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  const onClickDelete = (shift) => {\n\n    if(shift.employee_count > 0) {\n\n      setShowShiftDeleteFail(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Shift Delete Fail\",\n        description: (\n          <>\n            Cannot delete the shift <b>{shift.name}</b>, <br/> because it is currently assigned to <b>{shift.employee_count}</b> employees, <br/> Please move these employees to a different shift and try again.\n          </>\n        ),\n      });\n\n    } else {\n\n      setshiftDetail(shift);\n      setDeleteModal(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Delete Shift?\",\n        description: (\n          <>\n            Are you sure, You want to delete <br /> <span className=\"ps-word-break\">{shift.name}?</span>\n          </>\n        ),\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])\n\n  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };\n\n  const [expandedRow, setExpandedRow] = useState(null);\n\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }\n\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const [isModalOpen2, setIsModalOpen2] = useState(false);\n  const closeModal2 = () => {\n    setIsModalOpen2(false);\n  };\n\n  const openModal2 = () => {\n    setIsModalOpen2(true);\n    setIsModalOpen(false);\n  };\n\n  const [isconform, setConform] = useState(false);\n\n  const closeConformModal = () => {\n    setConform(false);\n  };\n\n  const openConformModal = () => {\n    setConform(true);\n  };\n\n  const [isdelet, setisdelet] = useState(false);\n  const closeDeletModal = () => {\n    setisdelet(false);\n  };\n  const openDeletModal = () => {\n    setisdelet(true);\n  };\n\n\n  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});\n\n  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  const [weekOffChecked, setWeekOffChecked] = useState({}); \n\n  //from closed\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {\n\n      let day = updatedState[shiftId]?.daz || '';\n      let newTime = updatedState[shiftId]?.newTimez || '';\n\n      if( day !== '' && newTime !== '') {\n\n        if (!initialFromTimes[shiftId]?.[day]) {\n          setInitialFromTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [day]: newTime,\n            },\n          }));\n\n          if(parseInt(shiftId) === 0) {\n            daysOfWeek.forEach(copyDay => {\n              if (copyDay !== day && !initialFromTimes[shiftId]?.[copyDay]) {\n\n                setTimeValues(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: {\n                      ...(prevState[shiftId]?.[copyDay] || {}),\n                      from: newTime,\n                    },\n                  },\n                }));\n\n                setInitialFromTimes(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: newTime,\n                  },\n                }));\n                \n                let diffHours = 0;\n                if(initialToTimes[shiftId]?.[copyDay]) {\n                  const fromTime = dayjs(newTime);\n                  const toTime = dayjs(initialToTimes[shiftId]?.[copyDay]);\n\n                  diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n\n                  if (diffHours <= 0) {\n                    diffHours = 24 + diffHours;\n                  }\n                  diffHours = Math.round(diffHours * 10) / 10;\n                }\n                \n                setCommonDiffHours(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: diffHours,\n                  },\n                }));\n\n              }\n            });\n          }\n        }\n\n        setTimeValues(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: {\n              ...prevState[shiftId][day],\n              from: newTime,\n            },\n          },\n        }));\n\n        let fromValue = newTime;\n        let toValue = timeValues[shiftId]?.[day]?.to;\n        let fromTime;\n        let toTime;\n        let diffHours = 0;\n\n        if(toValue) {\n          if(isFirstRowOpen) {\n            fromTime = dayjs(fromValue)\n            toTime = dayjs(toValue)\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          } else {\n            fromTime = dayjs(convertToDate(fromValue))\n            toTime = dayjs(convertToDate(toValue))\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          }\n        \n          if (diffHours <= 0) {\n            diffHours = 24 + diffHours;\n          }\n          diffHours = Math.round(diffHours * 10) / 10;\n        }\n\n        setCommonDiffHours(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: diffHours,\n          },\n        }));\n      }\n  }\n  //from onchange\n  const handleFromTimeChange = (day, newTime, shiftId) => {\n\n    setInitialOnChangeFromTimes(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        'newTimez': newTime,\n        'daz' : day\n      },\n    }));\n\n    const updatedState = {\n      ...initialOnChangeFromTimes,\n      [shiftId]: {\n        ...initialOnChangeFromTimes[shiftId],\n        'newTimez': newTime,\n        'daz': day,\n      },\n    };\n\n    handleFromTimeClose({}, shiftId, updatedState);\n  };\n  \n  //to closed\n  const handleToTimeClose = (event, shiftId, updatedState = {}) => {\n\n    let day = updatedState[shiftId]?.daz || '';\n    let newTime = updatedState[shiftId]?.newTimez || '';\n\n    if( day !== '' && newTime !== '') {\n      if (!initialToTimes[shiftId]?.[day]) {\n        setInitialToTimes(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: newTime,\n          },\n        }));\n\n        if(parseInt(shiftId) === 0) {\n          daysOfWeek.forEach(copyDay => {\n            \n            if (copyDay !== day && !initialToTimes[shiftId]?.[copyDay]) {\n\n              setTimeValues(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: {\n                    ...(prevState[shiftId]?.[copyDay] || {}),\n                    to: newTime,\n                  },\n                },\n              }));\n              \n              setInitialToTimes(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: newTime,\n                },\n              }));\n\n              let diffHours = 0;\n              if(initialFromTimes[shiftId]?.[copyDay]) {\n                const fromTime = dayjs(initialFromTimes[shiftId]?.[copyDay]);\n                const toTime = dayjs(newTime);\n                diffHours = fromTime ? toTime.diff(fromTime, 'hour',true) : 0;\n\n                if (diffHours <= 0) {\n                  diffHours = 24 + diffHours;\n                }\n                diffHours = Math.round(diffHours * 10) / 10;\n              }\n              \n              setCommonDiffHours(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: diffHours,\n                },\n              }));\n\n            }\n          });\n        }\n      }\n\n      setTimeValues(prevState => ({\n        ...prevState,\n        [shiftId]: {\n          ...prevState[shiftId],\n          [day]: {\n            ...prevState[shiftId][day],\n            to: newTime,\n          },\n        },\n      }));\n\n      let fromValue = timeValues[shiftId]?.[day]?.from;\n      let toValue = newTime;\n      let fromTime;\n      let toTime;\n      let diffHours = 0;\n\n      if(fromValue) {\n        if(isFirstRowOpen) {\n          fromTime = dayjs(fromValue)\n          toTime = dayjs(toValue)\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        } else {\n          fromTime = dayjs(convertToDate(fromValue))\n          toTime = dayjs(convertToDate(toValue))\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        }\n\n        if (diffHours <= 0) {\n          diffHours = 24 + diffHours;\n        }\n        diffHours = Math.round(diffHours * 10) / 10;\n      }\n\n      setCommonDiffHours(prevState => ({\n        ...prevState,\n        [shiftId]: {\n          ...prevState[shiftId],\n          [day]: diffHours,\n        },\n      }));\n    }\n  }\n  //to onchange\n  const handleToTimeChange = (day, newTime, shiftId) => {\n\n    setInitialOnChangeToTimes(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        'newTimez': newTime,\n        'daz' : day\n      },\n    }));\n\n    const updatedState = {\n      ...initialOnChangeToTimes,\n      [shiftId]: {\n        ...initialOnChangeToTimes[shiftId],\n        'newTimez': newTime,\n        'daz': day,\n      },\n    };\n\n    handleToTimeClose({}, shiftId, updatedState);\n    \n  };\n  \n  const groupedOfWeeksNumbers = [\n    {\n      items: [\n        { label: \"1st\", value:1},\n        { label: \"2nd\", value:2 },\n        { label: \"3rd\", value:3 },\n        { label: \"4th\", value:4 },\n        { label: \"5th\", value:5 },\n      ]\n    }\n  ];\n\n  \n  const handleMultiSelectWeeksChange = (e, day, shiftId) => {\n\n    setAllValuesSelected(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        [day]: e.value.length === groupedOfWeeksNumbers[0].items.length ? true : false,\n      },\n    }));\n\n    setSelectedOccasionalWorkingWeeks({\n      ...selectedWeeksOfMonths,\n      [shiftId]: {\n        ...selectedWeeksOfMonths[shiftId],\n        [day]: e.value,\n      },\n    })\n\n    setWeekOffChecked(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        [day]: e.value.length === groupedOfWeeksNumbers[0].items.length ? false : true,\n      },\n    }));\n\n    \n  };\n\n  const handleWeekOffCheckbox = (day, shiftId) => {\n    setWeekOffChecked(prevState => {\n      const newState = { ...prevState };\n  \n      if (!newState[shiftId]) {\n        newState[shiftId] = {};\n      }\n  \n      newState[shiftId][day] = !newState[shiftId][day];\n      return newState;\n    });\n  \n    setOccasionalVisible(prevVisible => {\n      const newVisible = { ...prevVisible };\n  \n      if (!newVisible[shiftId]) {\n        newVisible[shiftId] = {};\n      }\n  \n      newVisible[shiftId][day] = !newVisible[shiftId][day];\n      return newVisible;\n    });\n  };\n  \n  // const handleOccasionalWorkingCheckbox = (day, shiftId) => {\n  //   setOccasionalDayVisible(prevVisible => {\n  //     const newVisible = { ...prevVisible };\n  \n  //     if (!newVisible[shiftId]) {\n  //       newVisible[shiftId] = {};\n  //     }\n  \n  //     newVisible[shiftId][day] = !newVisible[shiftId][day];\n  //     return newVisible;\n  //   });\n  // };\n\n  dayjs.extend(utc);\n  // dayjs.extend(timezone);\n\n  const toggleAccordion = (rowIndex) => {\n\n    setModelShiftId(rowIndex)\n\n    if (expandedRow === rowIndex) {\n      setExpandedRow(null);\n    } else {\n      setExpandedRow(rowIndex);\n    }\n\n    if(shifts && shifts.length > 0 && rowIndex > 0) {\n      let matchedShift  = shifts.find((shift) => shift.id === parseInt(rowIndex));\n      let shiftId = rowIndex;\n      daysOfWeek.forEach((copyDay, index) => {\n\n        const dayData = JSON.parse(matchedShift.shift_daywise_data).find((data) => data.day === index + 1);\n\n        if (!dayData) {\n          return null;\n        }\n\n          setTimeValues(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: {\n                ...(prevState[shiftId]?.[copyDay] || {}),\n                from: dayData.from_time ? convertTo24Hrs(dayData.from_time) : null,\n                to: dayData.to_time ? convertTo24Hrs(dayData.to_time) : null,\n              },\n            },\n          }));\n\n          setInitialFromTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]:  convertTo24Hrs(dayData.from_time),\n            },\n          }));\n          \n\n          setInitialToTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: convertTo24Hrs(dayData.to_time),\n            },\n          }));\n\n          let diffHours = 0;\n          if( dayData.from_time && dayData.to_time ) {\n            const fromTime = convertTo24Hrs(dayData.from_time)\n            const toTime = convertTo24Hrs(dayData.to_time)\n            diffHours = toTime && fromTime ? dayjs(toTime).diff(dayjs(fromTime), 'hour',true) : 0;\n\n            if (diffHours <= 0) {\n              diffHours = 24 + diffHours;\n            }\n            diffHours = Math.round(diffHours * 10) / 10;\n          }\n\n          setCommonDiffHours(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: diffHours,\n            },\n          }));\n          \n\n          setWeekOffChecked(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff ? true : false,\n            },\n          }));\n        \n          setOccasionalVisible(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff ? true : false,\n            },\n          }));\n\n          dayData.occasional_working_days = dayData.occasional_working_days ? dayData.occasional_working_days : [];\n\n          setOccasionalDayVisible(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff === 1 && dayData.occasional_working_days.length > 0 ? true : false,\n            },\n          }));\n\n\n          setAllValuesSelected(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.occasional_working_days && dayData.occasional_working_days.length === groupedOfWeeksNumbers[0].items.length ? true : false,\n            },\n          }));\n\n          setSelectedOccasionalWorkingWeeks(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.occasional_working_days,\n            },\n          }));\n      });\n    }\n  }; \n\n  const handleSave = async (shiftId = 0, isConfirmModel = 2) => {\n\n    if(isConfirmModel === 1) {\n      setConform(false);\n    }\n\n    if (isConfirmModel === 2 && ((Array.isArray(selectedWeeksOfMonths) && selectedWeeksOfMonths.length > 0) || (typeof selectedWeeksOfMonths === \"object\" && selectedWeeksOfMonths !== null && Object.keys(selectedWeeksOfMonths).length > 0))) {\n\n        let isAnyDayTrue = false;\n\n        for (const day of daysOfWeek) {\n          if (selectedWeeksOfMonths?.[shiftId]?.[day] && selectedWeeksOfMonths?.[shiftId]?.[day].length > 0) {\n            isAnyDayTrue = true;\n            break;\n          }\n        }\n\n        if( isAnyDayTrue ) {\n          setModelShiftId(shiftId);\n          setConform(true);\n          return false;\n\n        }\n\n    }\n\n    const shiftName = document.querySelector(`input[name=\"shift_name_${shiftId}\"]`).value;\n    const shiftDescriptions = document.querySelector(`textarea[id=\"shift_description_${shiftId}\"]`).value;\n    // const breakTime = document.querySelector(`input[name=\"shift_break_time_${shiftId}\"]`).value;\n\n    if (!shiftName.trim() ) {\n      return;\n    }\n\n    const shiftDaywiseData = daysOfWeek.map((day, index) => {\n      const fromTime = timeValues[shiftId]?.[day]?.from;\n      const toTime = timeValues[shiftId]?.[day]?.to;\n      return {\n        day: index + 1,\n        from_time: fromTime ? dayjs(fromTime).format(\"HH:mm\") : null,\n        to_time: toTime ? dayjs(toTime).format(\"HH:mm\") : null,\n        is_weekoff:0\n        // is_weekoff: weekOffChecked[shiftId]?.[day] ? 1 : 0,\n        // occasional_working_days: selectedWeeksOfMonths[shiftId]?.[day] ?? [],\n      };\n    });\n\n    let shiftData = {\n      'shift_daywise_data': shiftDaywiseData,\n      // 'break_time' : breakTime.length > 0 ? breakTime : 0 ,\n      'shift_name' : shiftName,\n      'shift_description': shiftDescriptions\n    }\n\n    if(shiftId > 0) {\n      shiftData.id  = shiftId;\n      dispatch(updateShiftNew(shiftData));\n    } else {\n      dispatch(addNewShiftNew(shiftData));\n    }\n\n  };\n\n  const getTotalMinutes = (dateObj)=>{\n    return dateObj.hour() * 60 + dateObj.minute();\n  }\n\n  const validationSchema = Yup.object().shape({\n    shift_name: Yup.array().of(Yup.string().required('Shift name is required')),\n    // shift_break_time: Yup.array().of(Yup.number().typeError('Break time must be a number').min(0, 'Break time must be greater than or equal to 0')),\n    // shift_description: Yup.array().of(Yup.string()),\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      shift_name: '',\n      // shift_break_time: '',\n      shift_description: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n\n      console.log(values);\n      \n     \n      const shiftNameErrors = {};\n\n\n      const shiftNameRegex = /^[A-Za-z0-9 ]+$/;\n      if (isFirstRowOpen) {\n        if (!values['shift_name_0']) { \n          shiftNameErrors['shift_name_0'] = 'Shift name is required';\n        }else if(!shiftNameRegex.test(values['shift_name_0'])){\n          shiftNameErrors['shift_name_0'] = 'Only letters and numbers are allowed';\n        }\n      } else {\n        //shifts.forEach(shift => {\n          const shiftNameKey = `shift_name_${modelShiftId}`;\n          if (!values[shiftNameKey]) {\n            shiftNameErrors[shiftNameKey] = 'Shift name is required';\n          }else if(!shiftNameRegex.test(values[shiftNameKey])){\n            shiftNameErrors[shiftNameKey] = 'Only letters and numbers are allowed';\n          }\n        //});\n      }\n\n      const fromToErrors = {};\n\n      // Validation for \"From\" and \"To\" times\n      daysOfWeek.forEach(day => {\n        const dayIndex = daysOfWeek.indexOf(day);\n        const prevDay = daysOfWeek[(dayIndex - 1 + 7) % 7];\n\n        const shiftId = isFirstRowOpen ? 0 : modelShiftId;\n\n        const prevDayFrom = timeValues[shiftId]?.[prevDay]?.from;\n        const prevDayTo = timeValues[shiftId]?.[prevDay]?.to;\n        \n        if(isFirstRowOpen) {\n          if(!weekOffChecked[shiftId]?.[day] || (weekOffChecked[shiftId]?.[day] === true && selectedWeeksOfMonths[shiftId]?.[day]?.length > 0)) {\n            const fromKey = `shift_from_time_${shiftId}_${day}`;\n            const toKey = `shift_to_time_${shiftId}_${day}`;\n            const fromValue = timeValues[shiftId]?.[day]?.from;\n            const toValue = timeValues[shiftId]?.[day]?.to;\n            \n            if (!fromValue) {\n              fromToErrors[fromKey] = 'From time is required';\n            }\n    \n            if (!toValue) {\n              fromToErrors[toKey] = 'To time is required';\n            }\n\n            if (fromValue && toValue) {\n              const fromTime = dayjs(fromValue)\n              const toTime = dayjs(toValue)\n              \n              const prevFromTime = dayjs(prevDayFrom);\n              const prevToTime = dayjs(prevDayTo);\n              \n              const currentFromMinutes = getTotalMinutes(fromTime);\n              const prevFromMinutes = getTotalMinutes(prevFromTime);\n              const prevToMinutes = getTotalMinutes(prevToTime);\n              \n              \n              let diffHours = toTime ? toTime.diff(fromTime, 'hour') : 0;\n              \n              // Check if to time is greater than from time\n              if (diffHours === 0 && fromTime.isSame(toTime, 'minute')) {\n                \n                fromToErrors[toKey] = 'The shift duration cannot be exactly 24 hours';\n              }\n\n              if (prevFromMinutes > prevToMinutes && prevToMinutes > currentFromMinutes) {\n                fromToErrors[fromKey] = 'Shift timing is overlapping with previous day';\n              }\n            }\n          }\n\n        } else {\n            \n            if(!weekOffChecked[shiftId]?.[day] || (weekOffChecked[shiftId]?.[day] === true && selectedWeeksOfMonths[shiftId]?.[day]?.length > 0))  {\n              const fromKey = `shift_from_time_${shiftId}_${day}`;\n              const toKey = `shift_to_time_${shiftId}_${day}`;\n              const fromValue = timeValues[shiftId]?.[day]?.from;\n              const toValue = timeValues[shiftId]?.[day]?.to;\n      \n              if (!fromValue) {\n                fromToErrors[fromKey] = 'From time is required';\n              }\n      \n              if (!toValue) {\n                fromToErrors[toKey] = 'To time is required';\n              }\n\n              if (fromValue && toValue) {\n\n                const fromTime = dayjs(convertToDate(fromValue))\n                const toTime = dayjs(convertToDate(toValue))\n\n                const prevFromTime = dayjs(prevDayFrom);\n                const prevToTime = dayjs(prevDayTo);\n                \n                const currentFromMinutes = getTotalMinutes(fromTime);\n                const prevFromMinutes = getTotalMinutes(prevFromTime);\n                const prevToMinutes = getTotalMinutes(prevToTime);\n             \n                let diffHours = toTime ? toTime.diff(fromTime, 'hour') : 0;\n              \n                // Check if to time is greater than from time\n                if (diffHours === 0 && fromTime.isSame(toTime, 'minute')) {\n                  fromToErrors[toKey] = 'The shift duration cannot be exactly 24 hours';\n                }\n\n                if (prevFromMinutes > prevToMinutes && prevToMinutes > currentFromMinutes) {\n                  fromToErrors[fromKey] = 'Shift timing is overlapping with previous day';\n                }\n              }\n            }\n        }\n      });\n\n      // Merge errors from shiftNameErrors and fromToErrors\n      const errors = { ...shiftNameErrors, ...fromToErrors };\n\n      // console.log( 'errors >>>', errors)\n      \n      if(isFirstRowOpen) {\n        setShowModal(false);\n      }      \n\n      if (errors && Object.keys(errors).length > 0) {\n        formik.setErrors(errors);\n      } else {\n        // Proceed with form submission\n        // handleSave(modelShiftId, 2);\n      }\n    },\n  });\n\n  const [isInitValAdd, setInitValAdd] = useState(false);\n  const isInitValAddRef = useRef(false);\n\n  useEffect(() => {\n    if (isShiftAdd || isShiftUpdate) {\n      dispatch(onGetWorkingHours());\n      resetAllData();\n      setIsFirstRowOpen(false);\n      setConform(false);\n      setExpandedRow(null);\n      setModelShiftId(0);\n      dispatch(afterSaveShift());\n      setInitValAdd(false);\n      formik.resetForm();\n      if(isShiftAdd) {\n        setIsModalOpen2(true)\n      }\n    }\n  }, [formik, isShiftAdd, isShiftUpdate, dispatch, modelShiftId])\n\n  useEffect(() => {\n    const isInitValAdd = isInitValAddRef.current;\n\n    if(validationErrors && Object.keys(validationErrors).length > 0) {\n      formik.setErrors(validationErrors)\n      setTimeout(() => {\n          dispatch(resetValidationErrors());\n      }, 3000);\n    }\n\n    if (shifts && shifts.length > 0 && (!isInitValAdd || (isShiftAdd || isShiftUpdate))) {\n      \n      isInitValAddRef.current = true;\n      setInitValAdd(true);\n      const initialValues = {};\n\n      shifts.forEach(shift => {\n        initialValues[`shift_name_${shift.id}`] = shift.name;\n        // initialValues[`shift_break_time_${shift.id}`] = shift.break_time;\n        initialValues[`shift_description_${shift.id}`] = shift.description;\n      });\n      formik.setValues(initialValues); // Update formik values after shifts are available\n    }\n  }, [formik, shifts, validationErrors, dispatch, isInitValAdd, isShiftAdd, isShiftUpdate]);\n\n  const convertTo24Hrs = (time) => {\n    if (time) {\n      const [hoursStr, minutesStr] = time.split(':');\n      let hours = parseInt(hoursStr);\n      const minutes = parseInt(minutesStr);\n  \n      // Adjust hours for PM times\n      if (time.includes('PM') && hours < 12) {\n        hours += 12;\n      }\n  \n      // Adjust hours for 12 AM\n      if (time.includes('AM') && hours === 12) {\n        hours = 0;\n      }\n  \n      // Create a Date object with the adjusted hours and minutes\n      const dateObj = new Date();\n      dateObj.setHours(hours);\n      dateObj.setMinutes(minutes);\n  \n      return dateObj;\n    } else {\n      return null;\n    }\n  };\n\n  const convertToDate = (time) => {\n    if (typeof time === 'string' && time.includes(':')) {\n\n      const currentDate = new Date();\n      const TimeParts = time.split(':');\n      currentDate.setHours(Number(TimeParts[0]), Number(TimeParts[1]), 0, 0);\n      return currentDate;\n    } else {\n      return time;\n    }\n  };\n\n  \n  const convertTo24HrsOld = ((time) => {\n    if(time) {\n      var hours = Number(time.match(/^(\\d+)/)[1]);\n      var minutes = Number(time.match(/:(\\d+)/)[1]);\n      var AMPM = time.match(/\\s(.*)$/)[1];\n      if (AMPM === \"PM\" && hours < 12) hours = hours + 12;\n      if (AMPM === \"AM\" && hours === 12) hours = hours - 12;\n      var sHours = hours.toString();\n      var sMinutes = minutes.toString();\n      if (hours < 10) sHours = \"0\" + sHours;\n      if (minutes < 10) sMinutes = \"0\" + sMinutes;\n\n      return sHours + \":\" + sMinutes;\n    } else {\n      return null;\n    }\n  });\n\n  const resetAllData = () => {\n\n    setInitialFromTimes({});\n    setInitialToTimes({});\n    setTimeValues({});\n    setCommonDiffHours({});\n\n    setInitialOnChangeFromTimes({});\n    setInitialOnChangeToTimes({});\n\n    setOccasionalVisible({});\n    setOccasionalDayVisible({});\n\n    setSelectedOccasionalWorkingWeeks([]);\n\n    setAllValuesSelected({});\n\n    setWeekOffChecked({}); \n\n  }\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalConfirmationText, setModalConfirmationText] = useState(<>You have some unsaved changes, do you want to save them?</>);\n\n  const closeConfirmationModal = () => {\n    formik.resetForm();\n    setIsFirstRowOpen(false);\n    setShowModal(false);\n    resetAllData();\n  };\n\n  const openConfirmationModal = () => {\n\n    const shiftName = document.querySelector(`input[name=\"shift_name_0\"]`).value;\n    const fromTime = timeValues[0]?.['Monday']?.from;\n    const toTime = timeValues[0]?.['Monday']?.to;\n\n    if(shiftName.length > 0 || fromTime !== undefined || toTime !== undefined) {\n      setShowModal(true);\n    } else {\n      formik.resetForm();\n      resetAllData();\n      setIsFirstRowOpen(false);\n    }\n  }\n  const pageHistory =useNavigate()\n\n  const handleSaveShift = () => {\n    setShowModal(false);\n    formik.handleSubmit();\n  };\n\n  const onClosedUnsaveModelClick = () => {\n    formik.resetForm();\n    setIsFirstRowOpen(false);\n    setShowModal(false);\n    resetAllData();\n    pageHistory(-1);\n  };\n\n  const isReadOnly = !userHasRights(moduleName.assignShift, 'C');\n\n  document.title = \"Manage Shifts | Petpooja Payroll\";\n  return (\n      <React.Fragment>\n        <Header title=\"Manage Shifts\" currentPage=\"shiftTime\"\n                showUnchangeModal={formik.dirty}\n                onClosedUnsaveModelClick={onClosedUnsaveModelClick}\n                onSaveClick={handleSaveShift}\n                modalConfirmationText={modalConfirmationText}/>\n        <div className=\"page-content\">\n          <DeleteModal\n            show={deleteModal}\n            onDeleteClick={handleDeleteShift}\n            onCloseClick={() => {\n              setDeleteModalData(null);\n              setDeleteModal(false);\n            }}\n            name={deleteModalData?.name}\n            title={deleteModalData?.title}\n            description={deleteModalData?.description}\n            btnLoading={isShiftDelLoading}\n          />\n           <div className=\"container-fluid\">\n            <Card className=\" p-3 mb-2 barrierEnd\">\n              <CardBody>\n                <div className=\" Employees-emptyBox\" style={{ height: \"300px\" }}>\n                  <div className=\"text-center\">\n                    <img\n                      src={noData}\n                      alt=\"no-data \"\n                      className=\"mb-3\"\n                      style={{ width: \"150px\", opacity: \"60%\" }}\n                    />\n                    <h5>Apologies,</h5>\n                    <p className=\"mx-lg-5 mt-2 p-0\">\n                      For better experience please open this page on web.\n                    </p>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            <Row className=\"barrierStart\">\n              <Col lg={12}>\n                \n\n                {/* new design start */}\n                <div className=\"card  ps-border ps-rounded-10 shadow-none shift-managment-wrap\">\n                  <div className=\"card-header ps-border-bottom ps-rounded-top-rl px-4\">\n                    <div className=\"pr-page-title d-flex justify-content-between align-items-center ps-emp-total\">\n                      <h5>Shifts <span>({shifts.length > 0 ? shifts.length : 0})</span></h5>\n\n                      <div className=\"d-flex\">\n                        <Link to=\"/employees-shifts-assign-new\"><button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn me-3\" id=\"assign-btn\" >Assign Shift</button>\n                        </Link>\n                        {userHasRights(moduleName.assignShift, 'C') && \n                          <>\n                            <button type=\"button\" className=\"ps-btn sm-btn primary-btn \" onClick={()=>workHourFun()}>Set Working Hours</button>\n                            <button type=\"button\" className=\"ps-btn sm-btn primary-btn ms-3\" id=\"create-btn\" onClick={() => { setshiftDetail([]); setIsEdit(false); setIsFirstRowOpen(true); resetAllData(); setExpandedRow(null);}} >Create Shift</button>\n                          </>\n                        }\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* <div className=\"ps-emp-not-ass-alert ps-border-bottom\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M17.87 13.3398C17.42 14.3698 16.81 15.2898 16.04 16.0498C15.27 16.8198 14.36 17.4298 13.33 17.8798C12.29 18.3198 11.17 18.5498 9.99 18.5498C8.81 18.5498 7.7 18.3198 6.66 17.8798C5.63 17.4298 4.71 16.8198 3.95 16.0498C3.18 15.2798 2.57 14.3698 2.12 13.3398C1.68 12.2998 1.45 11.1798 1.45 9.9998C1.45 8.8198 1.68 7.7098 2.12 6.6698C2.57 5.6398 3.19 4.7198 3.95 3.9598C4.72 3.1898 5.63 2.5798 6.66 2.1298C7.7 1.6898 8.82 1.4598 10 1.4598C11.18 1.4598 12.29 1.6898 13.33 2.1298C14.36 2.5798 15.28 3.1998 16.04 3.9598C16.8 4.7198 17.42 5.6398 17.87 6.6698C18.31 7.7098 18.54 8.8298 18.54 10.0098C18.54 11.1898 18.31 12.2998 17.87 13.3398ZM17.1 10.0098C17.1 8.0298 16.4 6.3398 15.03 4.9698C13.66 3.5998 11.97 2.89981 10 2.89981C8.03 2.89981 6.33 3.5998 4.96 4.9698C3.59 6.3398 2.89 8.0298 2.89 10.0098C2.89 11.9898 3.59 13.6698 4.96 15.0398C6.33 16.4098 8.02 17.1098 10 17.1098C11.98 17.1098 13.66 16.4098 15.03 15.0398C16.4 13.6698 17.1 11.9798 17.1 10.0098Z\" fill=\"#212121\"/>\n                      <path d=\"M10.72 13.7398V9.70978C10.72 9.50978 10.65 9.33978 10.51 9.19978C10.37 9.05978 10.2 8.98978 10 8.98978C9.79 8.98978 9.62 9.05978 9.48 9.19978C9.34 9.33978 9.28 9.50978 9.28 9.70978V13.7398C9.28 13.9398 9.34 14.1098 9.48 14.2498C9.62 14.3898 9.79 14.4598 9.99 14.4598C10.2 14.4598 10.37 14.3898 10.51 14.2498C10.65 14.1098 10.72 13.9398 10.72 13.7398Z\" fill=\"#212121\"/>\n                      <path d=\"M10.77 6.49977C10.77 6.27977 10.69 6.09977 10.55 5.94977C10.4 5.79978 10.21 5.72978 10 5.72978C9.79 5.72978 9.59 5.79978 9.45 5.94977C9.3 6.09977 9.22 6.27977 9.22 6.49977C9.22 6.71978 9.3 6.89978 9.45 7.04978C9.59 7.18978 9.78 7.26978 10 7.26978C10.22 7.26978 10.4 7.18978 10.55 7.04978C10.69 6.89978 10.77 6.70977 10.77 6.49977Z\" fill=\"#212121\"/>\n                    </svg>\n                    <h5>120 Employees are not assigned to any Shift Yet</h5>\n                    <Link to=\"/employees-shifts-assign-new\"><button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn ms-1\" id=\"assign-btn\" >Assign Now</button></Link>\n                  </div> */}\n\n                  <div className=\"card-body p-4 row\">\n                    {/*<Col xl={12}>\n                      <div className=\"float-md-end indicator-bg py-1 py-md-1 px-3 mb-3\">\n                        <div className=\"d-md-flex justify-content-end align-items-center\">\n                          <p className=\"mb-0 tx-black fw-500 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"7\" fill=\"#F3F3F9\" stroke=\"#D2D6DB\" strokeWidth=\"2\" />\n                              </svg>\n                            </span>Week Off\n                          </p>\n                          <p className=\"mb-0 tx-black fw-500 ms-md-3 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"7\" fill=\"#F3F3F9\" stroke=\"#2381D9\" strokeWidth=\"2\" />\n                              </svg></span>Occassional Working\n                          </p>\n                          <p className=\"mb-0 tx-black fw-500 ms-md-3 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"8\" fill=\"#2381D9\" />\n                              </svg>\n                            </span>Working Day\n                          </p>\n                        </div>\n                      </div>\n                    </Col>*/}\n\n                    <Col xl={12}>\n                      {/* <SimpleBar style={{ height: \"60vh\" }}> */}\n                      <div className=\"table-responsive mt-4 mt-xl-0 ct-emp-shit-assign\">\n                      {isShiftSuccess ? (\n                      <form onSubmit={formik.handleSubmit}>\n                        <Table className=\"table-striped align-middle table-nowrap mb-0 \">\n                          <thead>\n                            <tr>\n                              <th scope=\"col\" width=\"25%\" style={{minWidth:\"250px\"}}>Shift Name</th>\n                              {/* <th scope=\"col\" width=\"30%\">Shift Days</th> */}\n                              <th scope=\"col\" width=\"30%\">Assigned Employees</th>\n                              <th scope=\"col\" width=\"30%\">Created On</th>\n                              <th scope=\"col\">Action</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {isFirstRowOpen && (\n                              <tr className=\"cursor-pointer\" key=\"0\">\n                                <td onClick={() => toggleAccordion(0)}>\n\n                                  <div className={`ps-form-group ${formik.errors[`shift_name_0`] ? 'inp-warning' : ''} ps-warn-col`}> \n\n                                    <input name={`shift_name_0`} placeholder=\"Write Shift Name Here\" type=\"text\" className={`form-control ps-rounded-7 ${formik.errors[`shift_name_0`] ? 'warning' : ''}`} value={formik.values[`shift_name_0`] || ''}  onChange={formik.handleChange}/>\n\n                                    {formik.touched[`shift_name_0`] && formik.errors[`shift_name_0`] ? (<p>{formik.errors[`shift_name_0`]}</p>) : null}\n\n                                  </div>\n\n                                </td>\n                                {/* <td onClick={() => toggleAccordion(0)}>\n                                  <div className=\"d-flex week-circle-wrap\">\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                  </div>\n                                </td> */}\n                                <td onClick={() => toggleAccordion(0)}>0 Employees </td>\n                                <td onClick={() => toggleAccordion(0)}>{dayjs().format('YYYY-MM-DD')}</td>\n                                <td>\n                                  <span id=\"expandNewShiftBtn\" className=\"d-inline-block\" onClick={() => toggleAccordion(0)}>\n                                    {expandedRow === 0 ?\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" fill=\"white\" />\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M21 18.5L16 13.5L11 18.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                      :\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M11 13.5L16 18.5L21 13.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                    }\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`expandNewShiftBtn`}>\n                                      {expandedRow === 0 ? \"Collapse\" : \"Expand\"}\n                                  </UncontrolledTooltip>\n                                  <span id=\"deleteNewShiftBtn\" className=\"d-inline-block ms-3\" onClick={() => { openConfirmationModal(); }}>\n                                    <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                      <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                      <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                      <path d=\"M14.4375 10.0625V10.375H17.5625V10.0625C17.5625 9.6481 17.3979 9.25067 17.1049 8.95765C16.8118 8.66462 16.4144 8.5 16 8.5C15.5856 8.5 15.1882 8.66462 14.8951 8.95765C14.6021 9.25067 14.4375 9.6481 14.4375 10.0625ZM13.1875 10.375V10.0625C13.1875 9.31658 13.4838 8.60121 14.0113 8.07376C14.5387 7.54632 15.2541 7.25 16 7.25C16.7459 7.25 17.4613 7.54632 17.9887 8.07376C18.5162 8.60121 18.8125 9.31658 18.8125 10.0625V10.375H23.5C23.6658 10.375 23.8247 10.4408 23.9419 10.5581C24.0592 10.6753 24.125 10.8342 24.125 11C24.125 11.1658 24.0592 11.3247 23.9419 11.4419C23.8247 11.5592 23.6658 11.625 23.5 11.625H22.5575L21.375 21.98C21.2878 22.7426 20.923 23.4465 20.3501 23.9573C19.7772 24.4682 19.0363 24.7504 18.2687 24.75H13.7312C12.9637 24.7504 12.2228 24.4682 11.6499 23.9573C11.077 23.4465 10.7122 22.7426 10.625 21.98L9.4425 11.625H8.5C8.33424 11.625 8.17527 11.5592 8.05806 11.4419C7.94085 11.3247 7.875 11.1658 7.875 11C7.875 10.8342 7.94085 10.6753 8.05806 10.5581C8.17527 10.4408 8.33424 10.375 8.5 10.375H13.1875ZM11.8675 21.8375C11.9197 22.2949 12.1383 22.7172 12.4818 23.0238C12.8253 23.3304 13.2696 23.4999 13.73 23.5H18.2694C18.7298 23.4999 19.1741 23.3304 19.5175 23.0238C19.861 22.7172 20.0797 22.2949 20.1319 21.8375L21.3 11.625H10.7006L11.8675 21.8375ZM14.125 13.8125C14.2908 13.8125 14.4497 13.8783 14.5669 13.9956C14.6842 14.1128 14.75 14.2717 14.75 14.4375V20.6875C14.75 20.8533 14.6842 21.0122 14.5669 21.1294C14.4497 21.2467 14.2908 21.3125 14.125 21.3125C13.9592 21.3125 13.8003 21.2467 13.6831 21.1294C13.5658 21.0122 13.5 20.8533 13.5 20.6875V14.4375C13.5 14.2717 13.5658 14.1128 13.6831 13.9956C13.8003 13.8783 13.9592 13.8125 14.125 13.8125ZM18.5 14.4375C18.5 14.2717 18.4342 14.1128 18.3169 13.9956C18.1997 13.8783 18.0408 13.8125 17.875 13.8125C17.7092 13.8125 17.5503 13.8783 17.4331 13.9956C17.3158 14.1128 17.25 14.2717 17.25 14.4375V20.6875C17.25 20.8533 17.3158 21.0122 17.4331 21.1294C17.5503 21.2467 17.7092 21.3125 17.875 21.3125C18.0408 21.3125 18.1997 21.2467 18.3169 21.1294C18.4342 21.0122 18.5 20.8533 18.5 20.6875V14.4375Z\" fill=\"#212121\" />\n                                    </svg>\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`deleteNewShiftBtn`}>\n                                      Delete\n                                  </UncontrolledTooltip>\n                                </td>\n                              </tr>\n                            )}\n                            {isFirstRowOpen && expandedRow === 0 &&\n                              <tr className=\"\" key=\"0_0\">\n\n                                <td colSpan={2} className=\"ps-border-right\">\n\n                                  <div className=\"row pt-3\">\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Day</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">From</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"></div>\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">To</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"></div>\n                                    {/* <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Week Off</p></div> */}\n                                  </div>\n\n                                  {daysOfWeek.map((day, index) => (\n                                    <div key={`${day}-${index}-0`} className={`row py-3 ${occasionalVisible[0]?.[day] ? 'gridjs-th' : ''}`}>\n                                      <div className=\"col-xl-2 col-md-2\"><p className=\"mb-2 mt-2 paragraph-sm-1\">{day}</p></div>\n                                      <div className=\"col-xl-3 col-md-3 col-3 ct-time-width\" id=\n                                      {`from_time_0_${day}`}>\n                                          {/* <TimePicker\n                                            className={classes.timePicker}\n                                            name={`shift_from_time_0_${day}`}\n                                            label=\"Choose Time\"\n                                            value={initialFromTimes[0]?.[day] || timeValues[0]?.[day]?.from}\n                                            onChange={(newTime) => {\n                                              formik.handleChange({\n                                                target: {\n                                                  name: `shift_from_time_0_${day}`,\n                                                  value: newTime,\n                                                },\n                                              });\n                                              handleFromTimeChange(day, newTime, 0);\n                                            }} \n                                            onClose={(event) => handleFromTimeClose(event, 0)}\n                                            viewRenderers={{\n                                              hours: renderTimeViewClock,\n                                              minutes: renderTimeViewClock,\n                                              seconds: renderTimeViewClock,\n                                            }}\n                                          /> */}\n\n\n\n                                            <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_from_time_0_${day}`] ? 'date-error' : ''}`}>\n                                                <Flatpickr\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_from_time_0_${day}`}\n                                                      className=\"timer form-control\"\n                                                      value={initialFromTimes[0]?.[day] || timeValues[0]?.[day]?.from || ''}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_from_time_0_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleFromTimeChange(day, newTime, 0);\n                                                      }}\n                                                      onClose={(event) => handleFromTimeClose({}, 0)}\n                                                      options={{\n                                                          enableTime: true,\n                                                          noCalendar: true,\n                                                          dateFormat: \"H:i\",\n                                                          altInput: true ,\n                                                          altFormat: \"h:i K\",\n                                                          disableMobile: true\n                                                      }}\n                                                  /> \n                                                  {formik.errors[`shift_from_time_0_${day}`] ? (<p className=\"\">{formik.errors[`shift_from_time_0_${day}`]}</p>) : null}                    \n                                            </div>\n                                            \n                                        </div>\n                                       \n                                      <div className=\"col-xl-1 col-md-1 text-center\"><img className=\"mt-2\" src={arrowrightimg} alt=\"\" /></div>\n                                      <div className=\"col-xl-3 col-md-3 col-3\" id=\n                                      {`to_time_0_${day}`}>\n                                          {/* <TimePicker\n                                            className={classes.timePicker}\n                                            name={`shift_to_time_0_${day}`}\n                                            label=\"Choose Time\"\n                                            value={initialToTimes[0]?.[day] || timeValues[0]?.[day]?.to}\n                                            onChange={(newTime) => {\n                                              formik.handleChange({\n                                                target: {\n                                                  name: `shift_to_time_0_${day}`,\n                                                  value: newTime,\n                                                },\n                                              });\n                                              handleToTimeChange(day, newTime, 0);\n                                            }}          \n                                            onClose={(event) => handleToTimeClose(event, 0)}                         \n                                            viewRenderers={{\n                                              hours: renderTimeViewClock,\n                                              minutes: renderTimeViewClock,\n                                              seconds: renderTimeViewClock,\n                                            }}\n                                          /> */}\n\n                                              <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_to_time_0_${day}`] ? 'date-error' : ''}`}>\n                                                <Flatpickr\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_to_time_0_${day}`}\n                                                      className=\"timer form-control\"\n                                                      value={initialToTimes[0]?.[day] || timeValues[0]?.[day]?.to || ''}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_to_time_0_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleToTimeChange(day, newTime, 0);\n                                                      }} \n                                                      \n                                                      onClose={(event) => handleToTimeClose({}, 0)}\n                                                      options={{\n                                                          enableTime: true,\n                                                          noCalendar: true,\n                                                          dateFormat: \"H:i\",\n                                                          altInput: true ,\n                                                          altFormat: \"h:i K\",\n                                                          disableMobile: true\n                                                      }}\n                                                  /> \n                                                  {formik.errors[`shift_to_time_0_${day}`] ? (<p className=\"\">{formik.errors[`shift_to_time_0_${day}`]}</p>) : null}                    \n                                            </div>\n                                        </div>\n                                        {/* {formik.errors[`shift_to_time_0_${day}`] ? (\n                                            <div>{formik.errors[`shift_to_time_0_${day}`]}</div>\n                                          ) : null} */}\n\n                                      <div className=\"col-xl-1 col-md-1 text-center\"><p className=\"mt-2 paragraph-sm-1\" id=\"shift_time_diff_hrs_0\">{commonDiffHours[0]?.[day] || '0'}h</p></div>\n\n                                      {/* <div className=\"col-xl-2 col-md-2 col-2 mt-2\">\n\n                                        <div className=\"form-check\">\n                                          <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`weekOffCheck_0_${day}`} value=\"\" onChange={() => handleWeekOffCheckbox(day,0)} checked={weekOffChecked[0]?.[day]} disabled={allValuesSelected[0]?.[day]} />\n                                          <label className=\"form-check-label\" htmlFor={`weekOffCheck_0_${day}`}></label>\n                                        </div>\n                                      </div> */}\n                                      <div className=\"col-xl-2 col-md-2\"></div>\n                                      {/* {occasionalVisible[0]?.[day] && (\n                                      <div className=\"col-xl-10 mt-2\" id={`occasional_0_${day}`}>\n                                        <div className=\"d-flex\">\n                                          <p className=\"paragraph-sm-2 text-primary\">Do you want to Occasional Working On {day}? </p>\n                                          <div className=\"form-check mx-2\">\n                                            <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`occasional_working_check_0_${day}`} value=\"\" onChange={() => handleOccasionalWorkingCheckbox(day,0)} checked={occasionalDayVisible[0]?.[day]}/>\n                                            <label className=\"form-check-label\" htmlFor={`occasional_working_check_${day}`}></label>\n                                          </div>\n                                        </div>\n                                      </div>\n                                      )}\n                                      {occasionalVisible[0]?.[day] && occasionalDayVisible[0]?.[day] && (\n                                      <div className=\"row mt-2\" id={`occasional_working_day_0_${day}`}>\n                                        <div className=\"col-xl-2\"></div>\n                                        <div className=\"col-xl-7\">\n                                          <MultiSelect value={selectedWeeksOfMonths[0]?.[day] || ''} options={groupedOfWeeksNumbers} onChange={(e) => handleMultiSelectWeeksChange(e, day, 0)} optionLabel=\"label\"\n                                            optionGroupLabel=\"label\" optionGroupChildren=\"items\"\n                                            placeholder={`Choose Working ${day}s`} display=\"chip\" className=\"w-100 md:w-20rem ps-check-drop\" />\n                                        </div>\n                                      </div>\n                                      )} */}\n                                      \n                                    </div>\n                                  ))}\n                                </td>\n\n\n                                <td colSpan={2} className=\"align-top\">\n                                  <div className=\"ps-3 pt-3\">\n                                    {/* <div className=\"d-flex align-items-center mb-4\">\n                                      <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey\"><img className=\"pe-2\" src={breakimg} alt=\"\" />Break Time</label>\n                                      <input name=\"shift_break_time_0\" type=\"number\" maxLength=\"3\" placeholder=\"minute\" className=\"form-control  form-control ps-rounded-7 w-20 ms-3\" />\n                                    </div> */}\n                                    <div className=\"\">\n                                      <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mb-3\"><img className=\"pe-2 img-fluid\" src={remarkimg} alt=\"\" />Remark</label>\n                                      <textarea className=\"form-control ps-rounded-7\" rows=\"5\" placeholder=\"Write your remarks or comments here...\" id=\"shift_description_0\"/>\n                                    </div>\n                                    {!isReadOnly && \n                                      <div className=\"mt-3\">\n                                        <button type=\"submit\" disabled={error ? null : loading ? true : false} className=\"btn btn-blue\" \n                                        >{error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Save Changes</button>\n                                      </div>\n                                    }\n                                  </div>\n                                </td>\n                              </tr>\n                            }\n\n                            {shifts.map((shift) => (\n                              <React.Fragment key={`frag-${shift.id}`}>\n                              <tr key={shift.id} className=\"cursor-pointer\">\n\n                                <td onClick={() => toggleAccordion(shift.id)} className=\"d-flex align-items-center\">\n                           \n                                  <div className={`ps-form-group ${formik.errors[`shift_name_${shift.id}`] ? 'inp-warning' : ''} ps-warn-col`}> \n\n                                    <input name={`shift_name_${shift.id}`} disabled={isReadOnly} placeholder=\"Write Shift Name Here\" type=\"text\" className={`form-control ps-rounded-7 ${formik.errors[`shift_name_${shift.id}`] ? 'warning' : ''}`} value={formik.values[`shift_name_${shift.id}`] || ''}  onChange={formik.handleChange}/>\n\n                                    {formik.touched[`shift_name_${shift.id}`] && formik.errors[`shift_name_${shift.id}`] ? (<p>{formik.errors[`shift_name_${shift.id}`]}</p>) : null}\n\n                                </div>\n                                {shift.default_shift === 1 ? <Badge pill bg=\"info\" className=\"ms-2 ps-badge-12\">Default</Badge> : <div className=\"\" style={{width:\"74px\"}}></div>}\n                                </td>\n\n                                <td onClick={() => toggleAccordion(shift.id)} className=\"d-none\">\n                                  <div className=\"d-flex week-circle-wrap\">\n\n                                  {JSON.parse(shift.shift_daywise_data)\n                                    .sort((a, b) => a.day - b.day)\n                                    .map((dayData, index) => (\n                                      <p\n                                        key={index}\n                                        className={`table-week-circle round-blue-circle me-2`}\n                                        // className={`table-week-circle ${\n                                        //   dayData.is_weekoff === 1 &&\n                                        //   (!dayData.occasional_working_days || dayData.occasional_working_days.length === 0)\n                                        //     ? 'round-grey-circle'\n                                        //     : dayData.is_weekoff === 1 && dayData.occasional_working_days && dayData.occasional_working_days.length > 0\n                                        //     ? 'round-blue-border-circle'\n                                        //     : 'round-blue-circle'\n                                        // } me-2`}\n                                      >\n                                        {dayData.day !== null ? daysOfWeek[dayData.day - 1].charAt(0) : ''}\n                                      </p>\n                                    ))}\n\n                                  \n                                    {/* <p className=\"table-week-circle round-blue-circle me-2\">M</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">T</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">W</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">T</p>\n                                    <p className=\"table-week-circle round-grey-circle me-2\">F</p>\n                                    <p className=\"table-week-circle round-grey-circle me-2\">S</p>\n                                    <p className=\"table-week-circle round-blue-border-circle me-2\">S</p> */}\n\n                                  </div>\n                                </td>\n                                <td onClick={() => toggleAccordion(shift.id)} >{shift.employee_count} </td>\n                                <td onClick={() => toggleAccordion(shift.id)} >{shift.added_on}</td>\n                                <td>\n                                  \n                                <span id={`expandShiftBtn-${shift.id}`} className=\"d-inline-block\" onClick={() => toggleAccordion(shift.id)}>\n                                    {expandedRow === shift.id ?\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" fill=\"white\" />\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M21 18.5L16 13.5L11 18.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                      :\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M11 13.5L16 18.5L21 13.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                    }\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`expandShiftBtn-${shift.id}`}>\n                                      {expandedRow === shift.id ? \"Collapse\" : \"Expand\"}\n                                  </UncontrolledTooltip>\n\n                                  <span id={`logsBtn-${shift.id}`} className=\"d-inline-block ms-3\" onClick={()=>{setShiftLogsDetails(shift); shiftLogsFun();}}>\n                                    <svg width=\"32\" height=\"33\" viewBox=\"0 0 32 33\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                      <rect x=\"0.5\" y=\"0.724609\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\"/>\n                                      <rect x=\"0.5\" y=\"0.724609\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10.5835 10.1816C10.4684 10.1816 10.3751 10.2749 10.3751 10.39V23.7233C10.3751 23.8384 10.4684 23.9316 10.5835 23.9316H21.4168C21.5319 23.9316 21.6251 23.8384 21.6251 23.7233V10.39C21.6251 10.2749 21.5319 10.1816 21.4168 10.1816H10.5835ZM9.12512 10.39C9.12512 9.58456 9.77804 8.93164 10.5835 8.93164H21.4168C22.2222 8.93164 22.8751 9.58456 22.8751 10.39V23.7233C22.8751 24.5287 22.2222 25.1816 21.4168 25.1816H10.5835C9.77804 25.1816 9.12512 24.5287 9.12512 23.7233V10.39Z\" fill=\"#212121\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.5002 7.26562C13.8454 7.26562 14.1252 7.54545 14.1252 7.89062V10.3906C14.1252 10.7358 13.8454 11.0156 13.5002 11.0156C13.1551 11.0156 12.8752 10.7358 12.8752 10.3906V7.89062C12.8752 7.54545 13.1551 7.26562 13.5002 7.26562Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M18.5002 7.26562C18.8454 7.26562 19.1252 7.54545 19.1252 7.89062V10.3906C19.1252 10.7358 18.8454 11.0156 18.5002 11.0156C18.1551 11.0156 17.8752 10.7358 17.8752 10.3906V7.89062C17.8752 7.54545 18.1551 7.26562 18.5002 7.26562Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.042 14.1406C12.042 13.7955 12.3218 13.5156 12.667 13.5156H19.3337C19.6788 13.5156 19.9587 13.7955 19.9587 14.1406C19.9587 14.4858 19.6788 14.7656 19.3337 14.7656H12.667C12.3218 14.7656 12.042 14.4858 12.042 14.1406Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.0421 17.4746C12.0421 17.1294 12.3219 16.8496 12.6671 16.8496H17.6671C18.0123 16.8496 18.2921 17.1294 18.2921 17.4746C18.2921 17.8198 18.0123 18.0996 17.6671 18.0996H12.6671C12.3219 18.0996 12.0421 17.8198 12.0421 17.4746Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.0421 20.8066C12.0421 20.4615 12.3219 20.1816 12.6671 20.1816H16.0004C16.3456 20.1816 16.6254 20.4615 16.6254 20.8066C16.6254 21.1518 16.3456 21.4316 16.0004 21.4316H12.6671C12.3219 21.4316 12.0421 21.1518 12.0421 20.8066Z\" fill=\"black\"/>\n                                    </svg>\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`logsBtn-${shift.id}`}>\n                                      Logs\n                                  </UncontrolledTooltip>\n\n                                  {(!shift.default_shift && userHasRights(moduleName.assignShift, 'C')) && (\n                                    <>\n                                      <span id={`shiftDeleteBtn-${shift.id}`} className=\"ms-3 d-inline-block\" onClick={() => {onClickDelete(shift);}}>\n                                        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                          <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                          <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                          <path d=\"M14.4375 10.0625V10.375H17.5625V10.0625C17.5625 9.6481 17.3979 9.25067 17.1049 8.95765C16.8118 8.66462 16.4144 8.5 16 8.5C15.5856 8.5 15.1882 8.66462 14.8951 8.95765C14.6021 9.25067 14.4375 9.6481 14.4375 10.0625ZM13.1875 10.375V10.0625C13.1875 9.31658 13.4838 8.60121 14.0113 8.07376C14.5387 7.54632 15.2541 7.25 16 7.25C16.7459 7.25 17.4613 7.54632 17.9887 8.07376C18.5162 8.60121 18.8125 9.31658 18.8125 10.0625V10.375H23.5C23.6658 10.375 23.8247 10.4408 23.9419 10.5581C24.0592 10.6753 24.125 10.8342 24.125 11C24.125 11.1658 24.0592 11.3247 23.9419 11.4419C23.8247 11.5592 23.6658 11.625 23.5 11.625H22.5575L21.375 21.98C21.2878 22.7426 20.923 23.4465 20.3501 23.9573C19.7772 24.4682 19.0363 24.7504 18.2687 24.75H13.7312C12.9637 24.7504 12.2228 24.4682 11.6499 23.9573C11.077 23.4465 10.7122 22.7426 10.625 21.98L9.4425 11.625H8.5C8.33424 11.625 8.17527 11.5592 8.05806 11.4419C7.94085 11.3247 7.875 11.1658 7.875 11C7.875 10.8342 7.94085 10.6753 8.05806 10.5581C8.17527 10.4408 8.33424 10.375 8.5 10.375H13.1875ZM11.8675 21.8375C11.9197 22.2949 12.1383 22.7172 12.4818 23.0238C12.8253 23.3304 13.2696 23.4999 13.73 23.5H18.2694C18.7298 23.4999 19.1741 23.3304 19.5175 23.0238C19.861 22.7172 20.0797 22.2949 20.1319 21.8375L21.3 11.625H10.7006L11.8675 21.8375ZM14.125 13.8125C14.2908 13.8125 14.4497 13.8783 14.5669 13.9956C14.6842 14.1128 14.75 14.2717 14.75 14.4375V20.6875C14.75 20.8533 14.6842 21.0122 14.5669 21.1294C14.4497 21.2467 14.2908 21.3125 14.125 21.3125C13.9592 21.3125 13.8003 21.2467 13.6831 21.1294C13.5658 21.0122 13.5 20.8533 13.5 20.6875V14.4375C13.5 14.2717 13.5658 14.1128 13.6831 13.9956C13.8003 13.8783 13.9592 13.8125 14.125 13.8125ZM18.5 14.4375C18.5 14.2717 18.4342 14.1128 18.3169 13.9956C18.1997 13.8783 18.0408 13.8125 17.875 13.8125C17.7092 13.8125 17.5503 13.8783 17.4331 13.9956C17.3158 14.1128 17.25 14.2717 17.25 14.4375V20.6875C17.25 20.8533 17.3158 21.0122 17.4331 21.1294C17.5503 21.2467 17.7092 21.3125 17.875 21.3125C18.0408 21.3125 18.1997 21.2467 18.3169 21.1294C18.4342 21.0122 18.5 20.8533 18.5 20.6875V14.4375Z\" fill=\"#212121\" />\n                                        </svg>\n                                      </span>\n                                      <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`shiftDeleteBtn-${shift.id}`}>\n                                          Delete\n                                      </UncontrolledTooltip>\n                                    </>\n                                  )}\n                                </td>\n                              </tr>\n\n\n                              {expandedRow === shift.id &&\n                                <tr className=\"\" key={`${shift.id}_${shift.id}`}>\n                                  <td colSpan={2} className=\"ps-border-right\">\n\n                                      <div className=\"row pt-3\">\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Day</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">From</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"></div>\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">To</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"></div>\n                                        {/* <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Week Off</p></div> */}\n                                      </div>\n\n                                       {daysOfWeek.map((day, index) => {\n                                          const dayData = JSON.parse(shift.shift_daywise_data).find((data) => data.day === index + 1);\n\n                                          if (!dayData) {\n                                            return null;\n                                          }\n\n                                          return (\n                                            <div key={`${day}-${index}-${shift.id}`} className={`row py-3`}>\n                                            {/* <div key={`${day}-${index}-${shift.id}`} className={`row py-3 ${occasionalVisible[shift.id]?.[day] ? 'gridjs-th' : ''}`}> */}\n                                              <div className=\"col-xl-2 col-md-2\"><p className=\"mb-2 mt-2 paragraph-sm-1\">{day}</p></div>\n                                              <div className=\"col-xl-3 col-md-3 col-3 ct-time-width\" id={`from_time_${shift.id}_${day}`}>\n                                                {/* <TimePicker\n                                                  className={classes.timePicker}\n                                                  name={`shift_from_time_${shift.id}_${day}`}\n                                                  label=\"Choose Time\"\n                                                  value={initialFromTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.from}\n                                                  onChange={(newTime) => {\n                                                    formik.handleChange({\n                                                      target: {\n                                                        name: `shift_from_time_${shift.id}_${day}`,\n                                                        value: newTime,\n                                                      },\n                                                    });\n                                                    handleFromTimeChange(day, newTime, shift.id);\n                                                  }}\n                                                  onClose={(event) => handleFromTimeClose(event, shift.id)}\n                                                  viewRenderers={{\n                                                    hours: renderTimeViewClock,\n                                                    minutes: renderTimeViewClock,\n                                                    seconds: renderTimeViewClock,\n                                                  }}\n                                                /> */}\n                                                  <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_from_time_${shift.id}_${day}`] ? 'date-error' : ''}`}>\n                                                    <Flatpickr\n                                                      disabled={isReadOnly}\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_from_time_${shift.id}_${day}`}\n                                                      value={initialFromTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.from}\n                                                      onChange={(newTime) => {\n                                                        \n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_from_time_${shift.id}_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleFromTimeChange(day, newTime, shift.id);\n                                                      }}\n                                                      \n                                                      onClose={(event) => handleFromTimeClose({}, shift.id)}\n                                                      className=\"timer form-control\"\n                                                      options={{\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: \"H:i\",\n                                                        altInput: true ,\n                                                        altFormat: \"h:i K\",\n                                                        disableMobile: true\n                                                      }}\n                                                  />             \n                                                    {formik.errors[`shift_from_time_${shift.id}_${day}`] ? (<p className=\"\">{formik.errors[`shift_from_time_${shift.id}_${day}`]}</p>) : null}    \n                                                </div>\n                                              </div>\n\n                                              <div className=\"col-xl-1 col-md-1 text-center\"><img className=\"mt-2\" src={arrowrightimg} alt=\"\" /></div>\n                                              <div className=\"col-xl-3 col-md-3 col-3\" id={`to_time_${shift.id}_${day}`}>\n                                                {/* <TimePicker\n                                                  className={classes.timePicker}\n                                                  name={`shift_to_time_${shift.id}_${day}`}\n                                                  label=\"Choose Time\"\n                                                  value={initialToTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.to}\n\n                                                  onChange={(newTime) => {\n                                                    formik.handleChange({\n                                                      target: {\n                                                        name: `shift_to_time_${shift.id}_${day}`,\n                                                        value: newTime,\n                                                      },\n                                                    });\n                                                    handleToTimeChange(day, newTime, shift.id);\n                                                  }}          \n                                                  onClose={(event) => handleToTimeClose(event, shift.id)}                         \n                                                  viewRenderers={{\n                                                    hours: renderTimeViewClock,\n                                                    minutes: renderTimeViewClock,\n                                                    seconds: renderTimeViewClock,\n                                                  }}\n                                                /> */}\n\n                                                  <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_to_time_${shift.id}_${day}`] ? 'date-error' : ''}`}>\n                                                    <Flatpickr\n                                                      disabled={isReadOnly}\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_to_time_${shift.id}_${day}`}\n                                                      value={initialToTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.to}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_to_time_${shift.id}_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleToTimeChange(day, newTime, shift.id);\n                                                      }}\n                                                     \n                                                      onClose={(event) => handleToTimeClose({}, shift.id)}\n                                                      className=\"timer form-control\"\n                                                      options={{\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: \"H:i\",\n                                                        altInput: true ,\n                                                        altFormat: \"h:i K\",\n                                                        disableMobile: true\n                                                      }}\n                                                    />             \n                                                    {formik.errors[`shift_to_time_${shift.id}_${day}`] ? (<p className=\"\">{formik.errors[`shift_to_time_${shift.id}_${day}`]}</p>) : null}    \n                                                </div>\n                                              </div>\n\n                                              \n\n                                              {/* {formik.errors[`shift_to_time_${shift.id}_${day}`] ? (\n        <div>{formik.errors[`shift_to_time_${shift.id}_${day}`]}</div>\n      ) : null} */}\n\n                                              <div className=\"col-xl-1 col-md-1 text-center\"><p className=\"mt-2 paragraph-sm-1\" id={`shift_time_diff_hrs_${shift.id}`}>{commonDiffHours[shift.id]?.[day] || '0'}h</p></div>\n\n                                              {/* <div className=\"col-xl-2 col-md-2 col-2 mt-2\">\n\n                                                <div className=\"form-check\">\n                                                  <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`weekOffCheck_${shift.id}_${day}`} value=\"\" onChange={() => handleWeekOffCheckbox(day, shift.id)} checked={weekOffChecked[shift.id]?.[day]} disabled={allValuesSelected[shift.id]?.[day] || isReadOnly} />\n                                                  <label className=\"form-check-label\" htmlFor={`weekOffCheck_${shift.id}_${day}`}></label>\n                                                </div>\n                                              </div> */}\n                                              <div className=\"col-xl-2 col-md-2\"></div>\n                                              {/* {occasionalVisible[shift.id]?.[day] && (\n                                                <div className=\"col-xl-10 mt-2\" id={`occasional_${shift.id}_${day}`}>\n                                                  <div className=\"d-flex\">\n                                                    <p className=\"paragraph-sm-2 text-primary\">Do you want to Occasional Working On {day}? </p>\n                                                    <div className=\"form-check mx-2\">\n                                                      <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`occasional_working_check_${shift.id}_${day}`} value=\"\" onChange={() => handleOccasionalWorkingCheckbox(day, shift.id)} checked={occasionalDayVisible[shift.id]?.[day]}/>\n                                                      <label className=\"form-check-label\" htmlFor={`occasional_working_check_${shift.id}_${day}`}></label>\n                                                    </div>\n                                                  </div>\n                                                </div>\n                                              )}\n                                              {occasionalVisible[shift.id]?.[day] && occasionalDayVisible[shift.id]?.[day] && (\n                                                <div className=\"row mt-2\" id={`occasional_working_day_${shift.id}_${day}`}>\n                                                  <div className=\"col-xl-2\"></div>\n                                                  <div className=\"col-xl-7\">\n                                                    <MultiSelect value={selectedWeeksOfMonths[shift.id]?.[day] || ''} options={groupedOfWeeksNumbers} onChange={(e) => handleMultiSelectWeeksChange(e, day, shift.id)} optionLabel=\"label\"\n                                                      optionGroupLabel=\"label\" optionGroupChildren=\"items\"\n                                                      placeholder={`Choose Working ${day}s`} display=\"chip\" className=\"w-100 md:w-20rem ps-check-drop\" />\n                                                  </div>\n                                                </div>\n                                              )} */}\n                                            </div>\n                                          );\n                                        })}\n                                  </td>\n\n                                  <td colSpan={3} className=\"align-top\">\n                                    <div className=\"ps-3 pt-3\">\n                                      {/* <div className=\"d-flex mb-4\"> */}\n                                        {/* <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mt-2\"><img className=\"pe-2\" src={breakimg} alt=\"\" />Break Time</label> */}\n                                     \n                                        {/* <input name={`shift_break_time_${shift.id}`} placeholder=\"minute\" type=\"number\" maxLength=\"3\" className=\"form-control ps-rounded-7 w-20 ms-3\" value={formik.values[`shift_break_time_${shift.id}`]} onChange={formik.handleChange}/> */}\n                                        {/* error input start  */}\n                                        {/* <div className=\"ps-form-group inp-warning ps-warn-col\"> \n                                          <input type=\"text\" className=\"form-control ps-rounded-7 w-20 ms-3 \" placeholder=\"12h\"/>\n                                          <p className=\"ms-3\">Break time should be less than the shift duration.</p>\n                                        </div> */}\n                                        {/* error input end  */}\n\n                                        {/* {formik.touched[`shift_break_time_${shift.id}`] && formik.errors[`shift_break_time_${shift.id}`] ? (\n                                          <div className=\"error\">{formik.errors[`shift_break_time_${shift.id}`]}</div>\n                                        ) : null} */}\n\n                                      {/* </div> */}\n                                      <div className=\"\">\n                                        <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mb-3\"><img className=\"pe-2 img-fluid\" src={remarkimg} alt=\"\" />Remark</label>\n                                        <textarea disabled={isReadOnly} className=\"form-control ps-rounded-7\" rows=\"5\" placeholder=\"Write your remarks or comments here...\" id={`shift_description_${shift.id}`} value={formik.values[`shift_description_${shift.id}`] || ''}\n                  onChange={formik.handleChange}/>\n                                      </div>\n                                      <div className=\"mt-3\">\n                                      {/* onClick={openModal} */}\n                                      {!isReadOnly &&\n                                        <button type=\"submit\" className=\"btn btn-blue\" disabled={error ? null : loading ? true : false}>  {error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Save Changes</button>\n                                      }\n                                      {formik.errors[`shift_common_error`] ? (<p className=\"text-danger\">{formik.errors[`shift_common_error`]}</p>) : null}\n                                      </div>\n                                    </div>\n                                  </td>\n                                </tr>\n                              }\n                              \n                              \n\n                              </React.Fragment>\n                            ))}\n                          </tbody>\n                        </Table>\n\n                        </form>\n                        ) :(\n                          <div className=\"\">\n                            <Skeleton count={8} height={60}/>\n                          </div>\n                        )}\n\n                        {noShiftYet && shifts.length === 0 && !isFirstRowOpen ? (\n                            <Table className=\"table-striped align-middle table-nowrap mb-0 \">\n                            <tbody>\n                              <tr className=\"\">\n                                  <td colSpan={5} className=\"ct-td-nodata\">\n                                      <div className=\"d-flex align-items-center justify-content-center flex-column\">\n                                          <svg width=\"58\" height=\"58\" viewBox=\"0 0 58 58\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                              <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                                              <path d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\" fill=\"#2381D9\" />\n                                          </svg>\n                                          <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                                          <p>Try Adjusting the filters again</p>\n                                      </div>\n                                  </td>\n                              </tr>\n                            </tbody>\n                            </Table>\n                        ) : ''}\n                      </div>\n                    </Col>\n\n                  </div>\n                </div>\n                {/* new design end */}\n              </Col>\n            </Row>\n\n            {/* offcanvas start  */}\n            <Offcanvas\n              isOpen={isRight2}\n              direction=\"end\"\n              toggle={toggleRightCanvas2}\n              id=\"offcanvasRight\"\n              className=\"border-bottom custom-offcavas\"\n              style={{ width: \"600px\" }}\n            >\n              <AddShiftSidebarNew\n                isRight2={isRight2}\n                toggleRightCanvas2={toggleRightCanvas2}\n                shiftDetail={shiftDetail}\n                isEdit={isEdit}\n              />\n            </Offcanvas>\n\n            <Offcanvas\n              isOpen={isRight}\n              direction=\"end\"\n              toggle={toggleRightCanvas}\n              id=\"offcanvasRight\"\n              className=\"border-bottom custom-offcavas\"\n              style={{ width: \"600px\" }}\n            >\n              <AddEmpSideBar\n                isRight={isRight}\n                toggleRightCanvas={toggleRightCanvas}\n              />\n            </Offcanvas>\n\n            <Modal isOpen={isModalOpen} toggle={closeModal} centered={true} className=\"ct-modal-md\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeModal}>\n                Week Off Details\n                <p className=\"paragraph-sm-1 ps-text-grey mb-0\">Please confirm or modify the scheduled week offs for this shift.</p>\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <div className=\"row mb-3\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-1 ps-text-grey\">Saturday<sub>(Occasional working)</sub></p></div>\n                  <div className=\"col-xl-6 col-md-6\">\n                    <div className=\"d-flex week-square-wrap\">\n                      <p className=\"table-week-square square-grey-border-circle me-2\">1</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">2</p>\n                      <p className=\"table-week-square square-grey-border-circle me-2\">3</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">4</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-1 ps-text-grey\">Saturday</p></div>\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2\">Every Week Off</p></div>\n                </div>\n\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeModal}\n                >\n                  Modify\n                </button>\n\n                <button type=\"button\" className=\"btn w-sm btn-blue\" id=\"delete-record\" onClick={openModal2}>Confirm</button>\n              </div>\n            </Modal>\n\n            {/* Success created shift             */}\n            <Modal isOpen={isModalOpen2} toggle={closeModal2} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeModal2}>\n                Shift Created successfully!\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <p>If you'd like, you can assign it to employees now or choose \"Later\".</p>\n\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeModal2}\n                >\n                  Later\n                </button>\n\n                <Link to=\"/employees-shifts-assign-new\">\n                <button type=\"button\" className=\"btn w-sm btn-blue\" >Assign Shift</button></Link>\n              </div>\n            </Modal>\n\n            {/* conform save start */}\n            <Modal isOpen={isconform} toggle={closeConformModal} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeConformModal}>\n                Week Off Details\n                <p className=\"paragraph-sm-1 ps-text-grey mb-0\">Please confirm or modify the scheduled week offs for this shift.</p>\n              </ModalHeader>\n\n              <ModalBody className=\"p-3\">\n                {daysOfWeek && daysOfWeek.map((day,index) => (\n                  <React.Fragment key={`confirm-${day}-${index}`}>\n                  \n                    {weekOffChecked[modelShiftId]?.[day] === true && selectedWeeksOfMonths[modelShiftId]?.[day]?.length > 0 && (\n                      <div className=\"row mb-3\">\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2 ps-text-grey\">{day}<sub>(Occasional working)</sub></p>\n                        </div>\n                        <div className=\"col-xl-6 col-md-6\">\n                          <div className=\"d-flex week-square-wrap\">\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(1) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>1</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(2) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>2</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(3) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>3</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(4) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>4</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(5) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>5</p>\n                            </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {weekOffChecked[modelShiftId]?.[day] === true && (!selectedWeeksOfMonths[modelShiftId]?.[day] || selectedWeeksOfMonths[modelShiftId]?.[day]?.length === 0) && (\n\n                      <div className=\"row mb-3\">\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2 ps-text-grey\">{day}</p>\n                        </div>\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2\">Every Week Off</p>\n                        </div>\n                      </div>\n                    )}\n                  </React.Fragment>\n                ))}\n              </ModalBody>\n\n              {/* <ModalBody className=\"p-3\">\n\n                \n                <div className=\"row mb-2\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2 ps-text-grey\">Saturday<sub>(Occasional working)</sub></p></div>\n                  <div className=\"col-xl-6 col-md-6\">\n                    <div className=\"d-flex week-square-wrap\">\n                      <p className=\"table-week-square square-grey-border-circle me-2\">1</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">2</p>\n                      <p className=\"table-week-square square-grey-border-circle me-2\">3</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">4</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2 ps-text-grey\">Saturday</p></div>\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2\">Every Week Off</p></div>\n\n                </div>\n\n              </ModalBody> */}\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeConformModal}\n                >\n                  Modify\n                </button>\n\n                <button type=\"button\" disabled={error ? null : loading ? true : false} className=\"btn w-sm btn-blue\" id=\"delete-record\" onClick={() => handleSave(modelShiftId,1)}>{error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Confirm</button>\n              </div>\n            </Modal>\n            {/* conform save end */}\n\n            {/* delet modal start  */}\n            <Modal isOpen={isdelet} toggle={closeDeletModal} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeDeletModal}>\n                Delete Shift\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <p>Are you sure you want to delete this shift?This action cannot be undone. </p>\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeDeletModal}\n                >\n                  Cancel\n                </button>\n\n                <button type=\"button\" className=\"btn w-sm btn-blue\" id=\"delete-record\">Delete</button>\n              </div>\n            </Modal>\n            {/* delet modal end */}\n\n            {/*set working hour sidebar start  */}\n            <Offcanvas isOpen={workHour} toggle={workHourFun} direction=\"end\" className=\"border-bottom custom-offcavas\" style={{ width: \"500px\" }}>\n              < SetWokringHoursForm toggleRightCanvas2={workHourFun} workingHrsDetail={workingHrsData} />\n            </Offcanvas>\n\n            <Offcanvas isOpen={shiftLogs} toggle={shiftLogsFun} direction=\"end\" className=\"border-bottom custom-offcavas\" style={{ width: \"600px\" }}>\n               <ShiftLogSideBar shiftLogsFun={shiftLogsFun} filterNone={'filterNone'} shiftLogsDetails={shiftLogsDetails} />\n            </Offcanvas>\n            {/*set working hour sidebar start  */}\n\n            <ConfirmationModalNew\n                show={showModal}\n                onConfirmClick={formik.handleSubmit}\n                onCloseClick={closeConfirmationModal}\n                heading={\"Save Changes?\"}\n                infoText={modalConfirmationText}\n                showConfirmBtn={true}\n                closeBtnTitle=\"Proceed Anyway\"\n                confirmBtnTitle=\"Yes, Save\"\n                isConfirmBtnLoading={loading}\n            />\n\n\n            <ConfirmationModalNew\n              show={showShiftDeleteFail}\n              onCloseClick={() => {setShowShiftDeleteFail(false)}}\n              heading={deleteModalData?.title}\n              infoText={deleteModalData?.description}\n              showConfirmBtn={false}\n              closeBtnTitle=\"Ok\"\n              isConfirmBtnLoading={loading}\n            />\n        </div>\n        </div>\n      </React.Fragment>\n  );\n};\n\nexport default ShiftTimeNew;","structuredPatch":[{"oldStart":1,"oldLines":3,"newStart":1,"newLines":8,"lines":["+/**","+ * ShiftTimeNew - Advanced shift management component","+ * Handles shift creation, editing, and assignment with drag-and-drop functionality","+ * Supports roster management, working hours configuration, and employee shift assignments","+ */"," import React, { useState, useEffect, useCallback, useRef } from \"react\";"," import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";"," import {"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"6f7d10e2-1d07-4261-b6e3-b04048944df4","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01VzuXx91ACz1ZYp4AApsqHU","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Added a JSDoc comment at the top of the ShiftTimeNew.js file explaining its purpose and functionality."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":436,"cache_read_input_tokens":17320,"output_tokens":26,"service_tier":"standard"}},"requestId":"req_011CRrzmPi5hVAX2HVH6Hkzx","uuid":"2b7b8da2-2110-46dd-aed5-41aa3b23399a"}
{"parentUuid":"2b7b8da2-2110-46dd-aed5-41aa3b23399a","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"880d3704-4994-4ee4-83db-3a6f30b3244c","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"text","text":"if file is too large then divide into chunk of 200 lines and add comments then read other 200 lines then add comments do until file is completley processed. "}]},"uuid":"34be2ca7-ae76-4c56-9092-ce92c43df107","timestamp":"2025-08-06T19:20:40.721Z"}
{"parentUuid":"34be2ca7-ae76-4c56-9092-ce92c43df107","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01He2UPcVi7584Y2DnYF6uPS","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll systematically add comments to the entire ShiftTimeNew.js file by processing it in chunks of 200 lines. Let me create a todo list to track this work."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1970,"cache_read_input_tokens":17756,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRrzrJA6joDQv81Z1aDhS","uuid":"427bb87b-1697-4fad-b9ae-5df08aea3e5f"}
{"parentUuid":"427bb87b-1697-4fad-b9ae-5df08aea3e5f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01He2UPcVi7584Y2DnYF6uPS","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017JAks5mHsbehBPXnY5HUny","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"in_progress"},{"id":"2","content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"pending"},{"id":"3","content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"pending"},{"id":"4","content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending"},{"id":"5","content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending"},{"id":"6","content":"Continue processing remaining chunks until file is complete","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1970,"cache_read_input_tokens":17756,"output_tokens":370,"service_tier":"standard"}},"requestId":"req_011CRrzrJA6joDQv81Z1aDhS","uuid":"4edb9ccf-cee6-45d3-acbb-49b4d31ef418"}
{"parentUuid":"4edb9ccf-cee6-45d3-acbb-49b4d31ef418","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017JAks5mHsbehBPXnY5HUny","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"ba170984-3d8d-4433-9f3f-2165f239072a","timestamp":"2025-08-06T19:24:07.076Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"in_progress","id":"1"},{"content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"pending","id":"2"},{"content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"pending","id":"3"},{"content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending","id":"4"},{"content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending","id":"5"},{"content":"Continue processing remaining chunks until file is complete","status":"pending","id":"6"}]}}
{"parentUuid":"ba170984-3d8d-4433-9f3f-2165f239072a","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01D8Y3sLq1cc1dVhN8kyjPrA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Let me start by reading lines 1-200 and adding relevant comments:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":563,"cache_read_input_tokens":19726,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRrzrys3aUVnCMQedWN7r","uuid":"e3017420-5674-4e6f-ad03-9928cd29ab60"}
{"parentUuid":"e3017420-5674-4e6f-ad03-9928cd29ab60","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01D8Y3sLq1cc1dVhN8kyjPrA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01RMESRoNh8PuumQpyyH2XGA","name":"Read","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","offset":1,"limit":200}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":563,"cache_read_input_tokens":19726,"output_tokens":130,"service_tier":"standard"}},"requestId":"req_011CRrzrys3aUVnCMQedWN7r","uuid":"6380c29b-5b93-438a-aca7-86a083523221"}
{"parentUuid":"6380c29b-5b93-438a-aca7-86a083523221","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01RMESRoNh8PuumQpyyH2XGA","type":"tool_result","content":"     1→/**\n     2→ * ShiftTimeNew - Advanced shift management component\n     3→ * Handles shift creation, editing, and assignment with drag-and-drop functionality\n     4→ * Supports roster management, working hours configuration, and employee shift assignments\n     5→ */\n     6→import React, { useState, useEffect, useCallback, useRef } from \"react\";\n     7→import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n     8→import {\n     9→  Offcanvas,\n    10→  OffcanvasBody,\n    11→  OffcanvasHeader,\n    12→  UncontrolledDropdown,\n    13→  DropdownItem,\n    14→  DropdownMenu,\n    15→  DropdownToggle,\n    16→  TabPane,\n    17→  TabContent,\n    18→  Badge,\n    19→  UncontrolledTooltip,\n    20→} from \"reactstrap\";\n    21→import noData from \"../../assets/images/no-data.svg\";\n    22→import SimpleBar from \"simplebar-react\";\n    23→import Flatpickr from \"react-flatpickr\";\n    24→import {\n    25→  Container,\n    26→  CardBody,\n    27→  Row,\n    28→  Col,\n    29→  Card,\n    30→  CardHeader,\n    31→  Form,\n    32→  Label,\n    33→  Input,\n    34→  Table,\n    35→  Modal, ModalBody, ModalHeader, Spinner\n    36→} from \"reactstrap\";\n    37→\n    38→import stepUser from \"../../assets/images/svgIcons/stepUser.svg\";\n    39→import tableRight from \"../../assets/images/svgIcons/tableRight.svg\";\n    40→import tap from \"../../assets/images/svgIcons/TAP.svg\";\n    41→import more from \"../../assets/images/svgIcons/more_vert_.svg\";\n    42→import move from \"../../assets/images/svg/move.svg\";\n    43→import { MultiSelect } from 'primereact/multiselect';\n    44→\n    45→//Import Breadcrumb\n    46→import BreadCrumb from \"../../Components/Common/BreadCrumb\";\n    47→import AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";\n    48→import AddShiftSidebar from \"./AddShiftSidebar\";\n    49→import SetWokringHoursForm from \"./SetWokringHoursForm\";\n    50→import AddShiftSidebarNew from \"./AddShiftSidebarNew\";\n    51→import remarkimg from \"../../assets/images/svg/remark-image.svg\"\n    52→import breakimg from \"../../assets/images/svg/breaktime.svg\"\n    53→import arrowrightimg from \"../../assets/images/svg/arrow-right-grey.svg\"\n    54→import dayjs, { Dayjs } from 'dayjs';\n    55→import utc from 'dayjs/plugin/utc';\n    56→import timezone from 'dayjs/plugin/timezone';\n    57→\n    58→//redux\n    59→import { useSelector, useDispatch } from \"react-redux\";\n    60→\n    61→import { toast, ToastContainer } from \"react-toastify\";\n    62→import \"react-toastify/dist/ReactToastify.css\";\n    63→import withRouter from \"../../Components/Common/withRouter\";\n    64→\n    65→import Skeleton from \"react-loading-skeleton\";\n    66→import \"react-loading-skeleton/dist/skeleton.css\";\n    67→\n    68→import {\n    69→  getShiftsNew as onGetShifts,\n    70→  deleteShift as onDeleteShift,\n    71→  afterSaveShift,\n    72→  deleteShiftNew,\n    73→  addNewShiftNew,\n    74→  updateShiftNew,\n    75→  resetValidationErrors,\n    76→  onGetWorkingHours,\n    77→  getShiftSwitchDecision\n    78→} from \"../../store/actions\";\n    79→\n    80→import DeleteModal from \"../../Components/Common/DeleteModal\";\n    81→import ConfirmationModalNew from \"../../Components/Common/ConfirmationModalNew\";\n    82→\n    83→import { Link, useNavigate } from \"react-router-dom\";\n    84→import Header from \"../../Layouts/Header\";\n    85→\n    86→import * as Yup from \"yup\";\n    87→import { Formik, Field, useFormik, useField } from \"formik\";\n    88→import ShiftLogSideBar from \"./ShiftLogSideBar\";\n    89→\n    90→import {userHasRights, isSuperAdmin, moduleName}  from \"../../helpers/rights_helper\"\n    91→\n    92→const ShiftTimeNew = () => {\n    93→  const [isShitPageDropdown, setShitPageDropdown] = useState(false);\n    94→  const [shiftLogsDetails, setShiftLogsDetails] = useState(null);\n    95→\n    96→  const toggleDropdown = () => {\n    97→    setShitPageDropdown(!isShitPageDropdown);\n    98→  };\n    99→\n   100→  const [showTooltip, setShowTooltip] = useState(false);\n   101→  const handleMouseEnter = () => {\n   102→    setShowTooltip(!showTooltip);\n   103→  };\n   104→\n   105→  const [isRight, setIsRight] = useState(false);\n   106→  const toggleRightCanvas = () => {\n   107→    setIsRight(!isRight);\n   108→  };\n   109→\n   110→  const [isRight2, setIsRight2] = useState(false);\n   111→\n   112→  const toggleRightCanvas2 = useCallback(() => {\n   113→    setIsRight2(!isRight2);\n   114→  }, [isRight2]);\n   115→\n   116→  // Default Tabs\n   117→  const [activeTab, setactiveTab] = useState(\"1\");\n   118→  const toggle = (tab) => {\n   119→    if (activeTab !== tab) {\n   120→      setactiveTab(tab);\n   121→    }\n   122→  };\n   123→\n   124→  const [codee, setCode] = useState(false);\n   125→  const toggleCode = () => {\n   126→    setCode(!codee);\n   127→  };\n   128→\n   129→  const [shiftDetail, setshiftDetail] = useState([]);\n   130→  const [isEdit, setIsEdit] = useState(false);\n   131→  const [deleteModalData, setDeleteModalData] = useState(null);\n   132→\n   133→  //b code\n   134→\n   135→  const dispatch = useDispatch();\n   136→  const navigate = useNavigate();\n   137→  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =\n   138→    useSelector((state) => ({\n   139→      shifts: state.Shift.shifts,\n   140→      isShiftCreated: state.Shift.isShiftCreated,\n   141→      isShiftSuccess: state.Shift.isShiftListSuccess,\n   142→      error: state.Shift.error,\n   143→      noShiftYet: state.Shift.noShiftYet,\n   144→      isShiftDelLoading: state.Shift.isShiftDelLoading,\n   145→      isShiftDeleted: state.Shift.isShiftDelete,\n   146→      loading: state.Shift.loading,\n   147→      isShiftAdd: state.Shift.isShiftAdd,\n   148→      isShiftUpdate: state.Shift.isShiftUpdate,\n   149→      validationErrors: state.Shift.validationErrors,\n   150→      workingHrsData: state.Shift.workingHrsData\n   151→\n   152→    }));\n   153→\n   154→  // let isShiftSwitchDecisionTaken = 0;\n   155→\n   156→  // if (authUser && authUser.data.shift_switch_decision_taken !== undefined) {\n   157→  //     isShiftSwitchDecisionTaken = parseInt(authUser.data.shift_switch_decision_taken) || 0;\n   158→  // }\n   159→  \n   160→  useEffect(() => {\n   161→\n   162→    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n   163→\n   164→    if (!authUser?.data?.shift_switch_decision_taken) {\n   165→      navigate(\"/shiftEntryPage\");\n   166→    }\n   167→\n   168→    // if( !isShiftSwitchDecisionTaken ) {\n   169→    //   dispatch(getShiftSwitchDecision());\n   170→    // } else if (isShiftSwitchDecisionTaken !== 1) {\n   171→    //   navigate(\"/shiftEntryPage\");\n   172→    // }\n   173→\n   174→  }, [navigate]);\n   175→  \n   176→\n   177→  useEffect(() => {\n   178→    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n   179→      dispatch(onGetShifts());\n   180→      sessionStorage.setItem('isResetShiftNewList',0)\n   181→    }\n   182→\n   183→    if(shifts && shifts.length && workingHrsData === undefined) {\n   184→      dispatch(onGetWorkingHours());\n   185→    }\n   186→  }, [dispatch, shifts, noShiftYet, workingHrsData]);\n   187→\n   188→  const [isFirstRowOpen, setIsFirstRowOpen] = useState(false);\n   189→  const [modelShiftId, setModelShiftId] = useState(0);\n   190→\n   191→  \n   192→  \n   193→  // Update Data\n   194→  const handleEditShift = useCallback(\n   195→    (arg) => {\n   196→      const shift = arg;\n   197→\n   198→      let updatedShiftDetail = {};\n   199→\n   200→      if (shift && shift.shift_daywise_data) {\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"1312c3e4-b730-4a14-8262-7de21b0a834d","timestamp":"2025-08-06T19:24:07.076Z","toolUseResult":{"type":"text","file":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","content":"/**\n * ShiftTimeNew - Advanced shift management component\n * Handles shift creation, editing, and assignment with drag-and-drop functionality\n * Supports roster management, working hours configuration, and employee shift assignments\n */\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport {\n  Offcanvas,\n  OffcanvasBody,\n  OffcanvasHeader,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  TabPane,\n  TabContent,\n  Badge,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport noData from \"../../assets/images/no-data.svg\";\nimport SimpleBar from \"simplebar-react\";\nimport Flatpickr from \"react-flatpickr\";\nimport {\n  Container,\n  CardBody,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  Form,\n  Label,\n  Input,\n  Table,\n  Modal, ModalBody, ModalHeader, Spinner\n} from \"reactstrap\";\n\nimport stepUser from \"../../assets/images/svgIcons/stepUser.svg\";\nimport tableRight from \"../../assets/images/svgIcons/tableRight.svg\";\nimport tap from \"../../assets/images/svgIcons/TAP.svg\";\nimport more from \"../../assets/images/svgIcons/more_vert_.svg\";\nimport move from \"../../assets/images/svg/move.svg\";\nimport { MultiSelect } from 'primereact/multiselect';\n\n//Import Breadcrumb\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";\nimport AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";\nimport AddShiftSidebar from \"./AddShiftSidebar\";\nimport SetWokringHoursForm from \"./SetWokringHoursForm\";\nimport AddShiftSidebarNew from \"./AddShiftSidebarNew\";\nimport remarkimg from \"../../assets/images/svg/remark-image.svg\"\nimport breakimg from \"../../assets/images/svg/breaktime.svg\"\nimport arrowrightimg from \"../../assets/images/svg/arrow-right-grey.svg\"\nimport dayjs, { Dayjs } from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\n//redux\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport withRouter from \"../../Components/Common/withRouter\";\n\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\n\nimport {\n  getShiftsNew as onGetShifts,\n  deleteShift as onDeleteShift,\n  afterSaveShift,\n  deleteShiftNew,\n  addNewShiftNew,\n  updateShiftNew,\n  resetValidationErrors,\n  onGetWorkingHours,\n  getShiftSwitchDecision\n} from \"../../store/actions\";\n\nimport DeleteModal from \"../../Components/Common/DeleteModal\";\nimport ConfirmationModalNew from \"../../Components/Common/ConfirmationModalNew\";\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Header from \"../../Layouts/Header\";\n\nimport * as Yup from \"yup\";\nimport { Formik, Field, useFormik, useField } from \"formik\";\nimport ShiftLogSideBar from \"./ShiftLogSideBar\";\n\nimport {userHasRights, isSuperAdmin, moduleName}  from \"../../helpers/rights_helper\"\n\nconst ShiftTimeNew = () => {\n  const [isShitPageDropdown, setShitPageDropdown] = useState(false);\n  const [shiftLogsDetails, setShiftLogsDetails] = useState(null);\n\n  const toggleDropdown = () => {\n    setShitPageDropdown(!isShitPageDropdown);\n  };\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const handleMouseEnter = () => {\n    setShowTooltip(!showTooltip);\n  };\n\n  const [isRight, setIsRight] = useState(false);\n  const toggleRightCanvas = () => {\n    setIsRight(!isRight);\n  };\n\n  const [isRight2, setIsRight2] = useState(false);\n\n  const toggleRightCanvas2 = useCallback(() => {\n    setIsRight2(!isRight2);\n  }, [isRight2]);\n\n  // Default Tabs\n  const [activeTab, setactiveTab] = useState(\"1\");\n  const toggle = (tab) => {\n    if (activeTab !== tab) {\n      setactiveTab(tab);\n    }\n  };\n\n  const [codee, setCode] = useState(false);\n  const toggleCode = () => {\n    setCode(!codee);\n  };\n\n  const [shiftDetail, setshiftDetail] = useState([]);\n  const [isEdit, setIsEdit] = useState(false);\n  const [deleteModalData, setDeleteModalData] = useState(null);\n\n  //b code\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =\n    useSelector((state) => ({\n      shifts: state.Shift.shifts,\n      isShiftCreated: state.Shift.isShiftCreated,\n      isShiftSuccess: state.Shift.isShiftListSuccess,\n      error: state.Shift.error,\n      noShiftYet: state.Shift.noShiftYet,\n      isShiftDelLoading: state.Shift.isShiftDelLoading,\n      isShiftDeleted: state.Shift.isShiftDelete,\n      loading: state.Shift.loading,\n      isShiftAdd: state.Shift.isShiftAdd,\n      isShiftUpdate: state.Shift.isShiftUpdate,\n      validationErrors: state.Shift.validationErrors,\n      workingHrsData: state.Shift.workingHrsData\n\n    }));\n\n  // let isShiftSwitchDecisionTaken = 0;\n\n  // if (authUser && authUser.data.shift_switch_decision_taken !== undefined) {\n  //     isShiftSwitchDecisionTaken = parseInt(authUser.data.shift_switch_decision_taken) || 0;\n  // }\n  \n  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }\n\n    // if( !isShiftSwitchDecisionTaken ) {\n    //   dispatch(getShiftSwitchDecision());\n    // } else if (isShiftSwitchDecisionTaken !== 1) {\n    //   navigate(\"/shiftEntryPage\");\n    // }\n\n  }, [navigate]);\n  \n\n  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);\n\n  const [isFirstRowOpen, setIsFirstRowOpen] = useState(false);\n  const [modelShiftId, setModelShiftId] = useState(0);\n\n  \n  \n  // Update Data\n  const handleEditShift = useCallback(\n    (arg) => {\n      const shift = arg;\n\n      let updatedShiftDetail = {};\n\n      if (shift && shift.shift_daywise_data) {","numLines":200,"startLine":1,"totalLines":2156}}}
{"parentUuid":"1312c3e4-b730-4a14-8262-7de21b0a834d","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01YVCamVMbo6ud5i9TPxd4w4","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now I'll add comments to this section. Let me add meaningful comments at key sections:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":2905,"cache_read_input_tokens":20289,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRrzsJsYBkfqBW3tjMFLv","uuid":"b44ea5ba-cc2a-4863-b3ec-63541f8c66f0"}
{"parentUuid":"b44ea5ba-cc2a-4863-b3ec-63541f8c66f0","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.076Z","message":{"id":"msg_01YVCamVMbo6ud5i9TPxd4w4","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01LYg2hAZ7awhWedCfAs88st","name":"MultiEdit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","edits":[{"old_string":"//Import Breadcrumb\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";","new_string":"// Import breadcrumb navigation and custom components\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";"},{"old_string":"//redux\nimport { useSelector, useDispatch } from \"react-redux\";","new_string":"// Redux state management imports\nimport { useSelector, useDispatch } from \"react-redux\";"},{"old_string":"//b code","new_string":"// Component state and Redux integration"},{"old_string":"const ShiftTimeNew = () => {","new_string":"/**\n * Main ShiftTimeNew functional component\n * Manages shift creation, editing, assignment and roster operations\n */\nconst ShiftTimeNew = () => {"},{"old_string":"  // Default Tabs\n  const [activeTab, setactiveTab] = useState(\"1\");","new_string":"  // Tab management for different shift views\n  const [activeTab, setactiveTab] = useState(\"1\");"},{"old_string":"  const [shiftDetail, setshiftDetail] = useState([]);\n  const [isEdit, setIsEdit] = useState(false);\n  const [deleteModalData, setDeleteModalData] = useState(null);","new_string":"  // Shift management state variables\n  const [shiftDetail, setshiftDetail] = useState([]); // Current shift details\n  const [isEdit, setIsEdit] = useState(false); // Edit mode flag\n  const [deleteModalData, setDeleteModalData] = useState(null); // Delete confirmation data"},{"old_string":"  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =","new_string":"  // Redux dispatch and navigation hooks\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n  // Extract shift-related state from Redux store\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} ="},{"old_string":"  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }","new_string":"  // Check if user has made shift switch decision, redirect if not\n  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }"},{"old_string":"  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);","new_string":"  // Load shifts and working hours data when component mounts or when reset flag is set\n  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);"},{"old_string":"  // Update Data\n  const handleEditShift = useCallback(","new_string":"  // Handle shift editing - processes shift data for editing mode\n  const handleEditShift = useCallback("}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":2905,"cache_read_input_tokens":20289,"output_tokens":1366,"service_tier":"standard"}},"requestId":"req_011CRrzsJsYBkfqBW3tjMFLv","uuid":"17f8e288-aa5a-4ec0-8508-c1578515f06b"}
{"parentUuid":"17f8e288-aa5a-4ec0-8508-c1578515f06b","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01LYg2hAZ7awhWedCfAs88st","type":"tool_result","content":"Applied 10 edits to /home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js:\n1. Replaced \"//Import Breadcrumb\nimport BreadCrumb from \"../../...\" with \"// Import breadcrumb navigation and custom compone...\"\n2. Replaced \"//redux\nimport { useSelector, useDispatch } from \"...\" with \"// Redux state management imports\nimport { useSele...\"\n3. Replaced \"//b code\" with \"// Component state and Redux integration\"\n4. Replaced \"const ShiftTimeNew = () => {\" with \"/**\n * Main ShiftTimeNew functional component\n * M...\"\n5. Replaced \"  // Default Tabs\n  const [activeTab, setactiveTab...\" with \"  // Tab management for different shift views\n  co...\"\n6. Replaced \"  const [shiftDetail, setshiftDetail] = useState([...\" with \"  // Shift management state variables\n  const [shi...\"\n7. Replaced \"  const dispatch = useDispatch();\n  const navigate...\" with \"  // Redux dispatch and navigation hooks\n  const d...\"\n8. Replaced \"  useEffect(() => {\n\n    const authUser = JSON.par...\" with \"  // Check if user has made shift switch decision,...\"\n9. Replaced \"  useEffect(() => {\n    if ((shifts && !shifts.len...\" with \"  // Load shifts and working hours data when compo...\"\n10. Replaced \"  // Update Data\n  const handleEditShift = useCall...\" with \"  // Handle shift editing - processes shift data f...\""}]},"uuid":"fd054c7d-eaaf-492d-a8f2-0bdad67a8d58","timestamp":"2025-08-06T19:24:07.077Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","edits":[{"old_string":"//Import Breadcrumb\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";","new_string":"// Import breadcrumb navigation and custom components\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";","replace_all":false},{"old_string":"//redux\nimport { useSelector, useDispatch } from \"react-redux\";","new_string":"// Redux state management imports\nimport { useSelector, useDispatch } from \"react-redux\";","replace_all":false},{"old_string":"//b code","new_string":"// Component state and Redux integration","replace_all":false},{"old_string":"const ShiftTimeNew = () => {","new_string":"/**\n * Main ShiftTimeNew functional component\n * Manages shift creation, editing, assignment and roster operations\n */\nconst ShiftTimeNew = () => {","replace_all":false},{"old_string":"  // Default Tabs\n  const [activeTab, setactiveTab] = useState(\"1\");","new_string":"  // Tab management for different shift views\n  const [activeTab, setactiveTab] = useState(\"1\");","replace_all":false},{"old_string":"  const [shiftDetail, setshiftDetail] = useState([]);\n  const [isEdit, setIsEdit] = useState(false);\n  const [deleteModalData, setDeleteModalData] = useState(null);","new_string":"  // Shift management state variables\n  const [shiftDetail, setshiftDetail] = useState([]); // Current shift details\n  const [isEdit, setIsEdit] = useState(false); // Edit mode flag\n  const [deleteModalData, setDeleteModalData] = useState(null); // Delete confirmation data","replace_all":false},{"old_string":"  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =","new_string":"  // Redux dispatch and navigation hooks\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n  // Extract shift-related state from Redux store\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =","replace_all":false},{"old_string":"  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }","new_string":"  // Check if user has made shift switch decision, redirect if not\n  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }","replace_all":false},{"old_string":"  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);","new_string":"  // Load shifts and working hours data when component mounts or when reset flag is set\n  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);","replace_all":false},{"old_string":"  // Update Data\n  const handleEditShift = useCallback(","new_string":"  // Handle shift editing - processes shift data for editing mode\n  const handleEditShift = useCallback(","replace_all":false}],"originalFileContents":"/**\n * ShiftTimeNew - Advanced shift management component\n * Handles shift creation, editing, and assignment with drag-and-drop functionality\n * Supports roster management, working hours configuration, and employee shift assignments\n */\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport {\n  Offcanvas,\n  OffcanvasBody,\n  OffcanvasHeader,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  TabPane,\n  TabContent,\n  Badge,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport noData from \"../../assets/images/no-data.svg\";\nimport SimpleBar from \"simplebar-react\";\nimport Flatpickr from \"react-flatpickr\";\nimport {\n  Container,\n  CardBody,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  Form,\n  Label,\n  Input,\n  Table,\n  Modal, ModalBody, ModalHeader, Spinner\n} from \"reactstrap\";\n\nimport stepUser from \"../../assets/images/svgIcons/stepUser.svg\";\nimport tableRight from \"../../assets/images/svgIcons/tableRight.svg\";\nimport tap from \"../../assets/images/svgIcons/TAP.svg\";\nimport more from \"../../assets/images/svgIcons/more_vert_.svg\";\nimport move from \"../../assets/images/svg/move.svg\";\nimport { MultiSelect } from 'primereact/multiselect';\n\n//Import Breadcrumb\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";\nimport AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";\nimport AddShiftSidebar from \"./AddShiftSidebar\";\nimport SetWokringHoursForm from \"./SetWokringHoursForm\";\nimport AddShiftSidebarNew from \"./AddShiftSidebarNew\";\nimport remarkimg from \"../../assets/images/svg/remark-image.svg\"\nimport breakimg from \"../../assets/images/svg/breaktime.svg\"\nimport arrowrightimg from \"../../assets/images/svg/arrow-right-grey.svg\"\nimport dayjs, { Dayjs } from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\n//redux\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport withRouter from \"../../Components/Common/withRouter\";\n\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\n\nimport {\n  getShiftsNew as onGetShifts,\n  deleteShift as onDeleteShift,\n  afterSaveShift,\n  deleteShiftNew,\n  addNewShiftNew,\n  updateShiftNew,\n  resetValidationErrors,\n  onGetWorkingHours,\n  getShiftSwitchDecision\n} from \"../../store/actions\";\n\nimport DeleteModal from \"../../Components/Common/DeleteModal\";\nimport ConfirmationModalNew from \"../../Components/Common/ConfirmationModalNew\";\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Header from \"../../Layouts/Header\";\n\nimport * as Yup from \"yup\";\nimport { Formik, Field, useFormik, useField } from \"formik\";\nimport ShiftLogSideBar from \"./ShiftLogSideBar\";\n\nimport {userHasRights, isSuperAdmin, moduleName}  from \"../../helpers/rights_helper\"\n\nconst ShiftTimeNew = () => {\n  const [isShitPageDropdown, setShitPageDropdown] = useState(false);\n  const [shiftLogsDetails, setShiftLogsDetails] = useState(null);\n\n  const toggleDropdown = () => {\n    setShitPageDropdown(!isShitPageDropdown);\n  };\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const handleMouseEnter = () => {\n    setShowTooltip(!showTooltip);\n  };\n\n  const [isRight, setIsRight] = useState(false);\n  const toggleRightCanvas = () => {\n    setIsRight(!isRight);\n  };\n\n  const [isRight2, setIsRight2] = useState(false);\n\n  const toggleRightCanvas2 = useCallback(() => {\n    setIsRight2(!isRight2);\n  }, [isRight2]);\n\n  // Default Tabs\n  const [activeTab, setactiveTab] = useState(\"1\");\n  const toggle = (tab) => {\n    if (activeTab !== tab) {\n      setactiveTab(tab);\n    }\n  };\n\n  const [codee, setCode] = useState(false);\n  const toggleCode = () => {\n    setCode(!codee);\n  };\n\n  const [shiftDetail, setshiftDetail] = useState([]);\n  const [isEdit, setIsEdit] = useState(false);\n  const [deleteModalData, setDeleteModalData] = useState(null);\n\n  //b code\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =\n    useSelector((state) => ({\n      shifts: state.Shift.shifts,\n      isShiftCreated: state.Shift.isShiftCreated,\n      isShiftSuccess: state.Shift.isShiftListSuccess,\n      error: state.Shift.error,\n      noShiftYet: state.Shift.noShiftYet,\n      isShiftDelLoading: state.Shift.isShiftDelLoading,\n      isShiftDeleted: state.Shift.isShiftDelete,\n      loading: state.Shift.loading,\n      isShiftAdd: state.Shift.isShiftAdd,\n      isShiftUpdate: state.Shift.isShiftUpdate,\n      validationErrors: state.Shift.validationErrors,\n      workingHrsData: state.Shift.workingHrsData\n\n    }));\n\n  // let isShiftSwitchDecisionTaken = 0;\n\n  // if (authUser && authUser.data.shift_switch_decision_taken !== undefined) {\n  //     isShiftSwitchDecisionTaken = parseInt(authUser.data.shift_switch_decision_taken) || 0;\n  // }\n  \n  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }\n\n    // if( !isShiftSwitchDecisionTaken ) {\n    //   dispatch(getShiftSwitchDecision());\n    // } else if (isShiftSwitchDecisionTaken !== 1) {\n    //   navigate(\"/shiftEntryPage\");\n    // }\n\n  }, [navigate]);\n  \n\n  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);\n\n  const [isFirstRowOpen, setIsFirstRowOpen] = useState(false);\n  const [modelShiftId, setModelShiftId] = useState(0);\n\n  \n  \n  // Update Data\n  const handleEditShift = useCallback(\n    (arg) => {\n      const shift = arg;\n\n      let updatedShiftDetail = {};\n\n      if (shift && shift.shift_daywise_data) {\n        const daywiseData = JSON.parse(shift.shift_daywise_data);\n        daywiseData.forEach(dayData => {\n          const { day, from_time, to_time, is_weekoff } = dayData;\n          updatedShiftDetail[`shift_from_time_${day}`] = from_time;\n          updatedShiftDetail[`shift_to_time_${day}`] = to_time;\n          updatedShiftDetail[`is_weekoff_${day}`] = is_weekoff;\n        });\n      }\n\n      setshiftDetail({\n        id: shift.id,\n        shift_name: shift.name,\n        shift_description: shift.description,\n        shift_from_time: shift.shift_from_time,\n        shift_to_time: shift.shift_to_time,\n        default_shift: shift.default_shift,\n        ...updatedShiftDetail\n\n      });\n\n      setIsEdit(true);\n      toggleRightCanvas2();\n    },\n    [toggleRightCanvas2]\n  );\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  const onClickDelete = (shift) => {\n\n    if(shift.employee_count > 0) {\n\n      setShowShiftDeleteFail(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Shift Delete Fail\",\n        description: (\n          <>\n            Cannot delete the shift <b>{shift.name}</b>, <br/> because it is currently assigned to <b>{shift.employee_count}</b> employees, <br/> Please move these employees to a different shift and try again.\n          </>\n        ),\n      });\n\n    } else {\n\n      setshiftDetail(shift);\n      setDeleteModal(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Delete Shift?\",\n        description: (\n          <>\n            Are you sure, You want to delete <br /> <span className=\"ps-word-break\">{shift.name}?</span>\n          </>\n        ),\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])\n\n  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };\n\n  const [expandedRow, setExpandedRow] = useState(null);\n\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }\n\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const [isModalOpen2, setIsModalOpen2] = useState(false);\n  const closeModal2 = () => {\n    setIsModalOpen2(false);\n  };\n\n  const openModal2 = () => {\n    setIsModalOpen2(true);\n    setIsModalOpen(false);\n  };\n\n  const [isconform, setConform] = useState(false);\n\n  const closeConformModal = () => {\n    setConform(false);\n  };\n\n  const openConformModal = () => {\n    setConform(true);\n  };\n\n  const [isdelet, setisdelet] = useState(false);\n  const closeDeletModal = () => {\n    setisdelet(false);\n  };\n  const openDeletModal = () => {\n    setisdelet(true);\n  };\n\n\n  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});\n\n  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  const [weekOffChecked, setWeekOffChecked] = useState({}); \n\n  //from closed\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {\n\n      let day = updatedState[shiftId]?.daz || '';\n      let newTime = updatedState[shiftId]?.newTimez || '';\n\n      if( day !== '' && newTime !== '') {\n\n        if (!initialFromTimes[shiftId]?.[day]) {\n          setInitialFromTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [day]: newTime,\n            },\n          }));\n\n          if(parseInt(shiftId) === 0) {\n            daysOfWeek.forEach(copyDay => {\n              if (copyDay !== day && !initialFromTimes[shiftId]?.[copyDay]) {\n\n                setTimeValues(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: {\n                      ...(prevState[shiftId]?.[copyDay] || {}),\n                      from: newTime,\n                    },\n                  },\n                }));\n\n                setInitialFromTimes(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: newTime,\n                  },\n                }));\n                \n                let diffHours = 0;\n                if(initialToTimes[shiftId]?.[copyDay]) {\n                  const fromTime = dayjs(newTime);\n                  const toTime = dayjs(initialToTimes[shiftId]?.[copyDay]);\n\n                  diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n\n                  if (diffHours <= 0) {\n                    diffHours = 24 + diffHours;\n                  }\n                  diffHours = Math.round(diffHours * 10) / 10;\n                }\n                \n                setCommonDiffHours(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: diffHours,\n                  },\n                }));\n\n              }\n            });\n          }\n        }\n\n        setTimeValues(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: {\n              ...prevState[shiftId][day],\n              from: newTime,\n            },\n          },\n        }));\n\n        let fromValue = newTime;\n        let toValue = timeValues[shiftId]?.[day]?.to;\n        let fromTime;\n        let toTime;\n        let diffHours = 0;\n\n        if(toValue) {\n          if(isFirstRowOpen) {\n            fromTime = dayjs(fromValue)\n            toTime = dayjs(toValue)\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          } else {\n            fromTime = dayjs(convertToDate(fromValue))\n            toTime = dayjs(convertToDate(toValue))\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          }\n        \n          if (diffHours <= 0) {\n            diffHours = 24 + diffHours;\n          }\n          diffHours = Math.round(diffHours * 10) / 10;\n        }\n\n        setCommonDiffHours(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: diffHours,\n          },\n        }));\n      }\n  }\n  //from onchange\n  const handleFromTimeChange = (day, newTime, shiftId) => {\n\n    setInitialOnChangeFromTimes(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        'newTimez': newTime,\n        'daz' : day\n      },\n    }));\n\n    const updatedState = {\n      ...initialOnChangeFromTimes,\n      [shiftId]: {\n        ...initialOnChangeFromTimes[shiftId],\n        'newTimez': newTime,\n        'daz': day,\n      },\n    };\n\n    handleFromTimeClose({}, shiftId, updatedState);\n  };\n  \n  //to closed\n  const handleToTimeClose = (event, shiftId, updatedState = {}) => {\n\n    let day = updatedState[shiftId]?.daz || '';\n    let newTime = updatedState[shiftId]?.newTimez || '';\n\n    if( day !== '' && newTime !== '') {\n      if (!initialToTimes[shiftId]?.[day]) {\n        setInitialToTimes(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: newTime,\n          },\n        }));\n\n        if(parseInt(shiftId) === 0) {\n          daysOfWeek.forEach(copyDay => {\n            \n            if (copyDay !== day && !initialToTimes[shiftId]?.[copyDay]) {\n\n              setTimeValues(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: {\n                    ...(prevState[shiftId]?.[copyDay] || {}),\n                    to: newTime,\n                  },\n                },\n              }));\n              \n              setInitialToTimes(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: newTime,\n                },\n              }));\n\n              let diffHours = 0;\n              if(initialFromTimes[shiftId]?.[copyDay]) {\n                const fromTime = dayjs(initialFromTimes[shiftId]?.[copyDay]);\n                const toTime = dayjs(newTime);\n                diffHours = fromTime ? toTime.diff(fromTime, 'hour',true) : 0;\n\n                if (diffHours <= 0) {\n                  diffHours = 24 + diffHours;\n                }\n                diffHours = Math.round(diffHours * 10) / 10;\n              }\n              \n              setCommonDiffHours(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: diffHours,\n                },\n              }));\n\n            }\n          });\n        }\n      }\n\n      setTimeValues(prevState => ({\n        ...prevState,\n        [shiftId]: {\n          ...prevState[shiftId],\n          [day]: {\n            ...prevState[shiftId][day],\n            to: newTime,\n          },\n        },\n      }));\n\n      let fromValue = timeValues[shiftId]?.[day]?.from;\n      let toValue = newTime;\n      let fromTime;\n      let toTime;\n      let diffHours = 0;\n\n      if(fromValue) {\n        if(isFirstRowOpen) {\n          fromTime = dayjs(fromValue)\n          toTime = dayjs(toValue)\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        } else {\n          fromTime = dayjs(convertToDate(fromValue))\n          toTime = dayjs(convertToDate(toValue))\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        }\n\n        if (diffHours <= 0) {\n          diffHours = 24 + diffHours;\n        }\n        diffHours = Math.round(diffHours * 10) / 10;\n      }\n\n      setCommonDiffHours(prevState => ({\n        ...prevState,\n        [shiftId]: {\n          ...prevState[shiftId],\n          [day]: diffHours,\n        },\n      }));\n    }\n  }\n  //to onchange\n  const handleToTimeChange = (day, newTime, shiftId) => {\n\n    setInitialOnChangeToTimes(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        'newTimez': newTime,\n        'daz' : day\n      },\n    }));\n\n    const updatedState = {\n      ...initialOnChangeToTimes,\n      [shiftId]: {\n        ...initialOnChangeToTimes[shiftId],\n        'newTimez': newTime,\n        'daz': day,\n      },\n    };\n\n    handleToTimeClose({}, shiftId, updatedState);\n    \n  };\n  \n  const groupedOfWeeksNumbers = [\n    {\n      items: [\n        { label: \"1st\", value:1},\n        { label: \"2nd\", value:2 },\n        { label: \"3rd\", value:3 },\n        { label: \"4th\", value:4 },\n        { label: \"5th\", value:5 },\n      ]\n    }\n  ];\n\n  \n  const handleMultiSelectWeeksChange = (e, day, shiftId) => {\n\n    setAllValuesSelected(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        [day]: e.value.length === groupedOfWeeksNumbers[0].items.length ? true : false,\n      },\n    }));\n\n    setSelectedOccasionalWorkingWeeks({\n      ...selectedWeeksOfMonths,\n      [shiftId]: {\n        ...selectedWeeksOfMonths[shiftId],\n        [day]: e.value,\n      },\n    })\n\n    setWeekOffChecked(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        [day]: e.value.length === groupedOfWeeksNumbers[0].items.length ? false : true,\n      },\n    }));\n\n    \n  };\n\n  const handleWeekOffCheckbox = (day, shiftId) => {\n    setWeekOffChecked(prevState => {\n      const newState = { ...prevState };\n  \n      if (!newState[shiftId]) {\n        newState[shiftId] = {};\n      }\n  \n      newState[shiftId][day] = !newState[shiftId][day];\n      return newState;\n    });\n  \n    setOccasionalVisible(prevVisible => {\n      const newVisible = { ...prevVisible };\n  \n      if (!newVisible[shiftId]) {\n        newVisible[shiftId] = {};\n      }\n  \n      newVisible[shiftId][day] = !newVisible[shiftId][day];\n      return newVisible;\n    });\n  };\n  \n  // const handleOccasionalWorkingCheckbox = (day, shiftId) => {\n  //   setOccasionalDayVisible(prevVisible => {\n  //     const newVisible = { ...prevVisible };\n  \n  //     if (!newVisible[shiftId]) {\n  //       newVisible[shiftId] = {};\n  //     }\n  \n  //     newVisible[shiftId][day] = !newVisible[shiftId][day];\n  //     return newVisible;\n  //   });\n  // };\n\n  dayjs.extend(utc);\n  // dayjs.extend(timezone);\n\n  const toggleAccordion = (rowIndex) => {\n\n    setModelShiftId(rowIndex)\n\n    if (expandedRow === rowIndex) {\n      setExpandedRow(null);\n    } else {\n      setExpandedRow(rowIndex);\n    }\n\n    if(shifts && shifts.length > 0 && rowIndex > 0) {\n      let matchedShift  = shifts.find((shift) => shift.id === parseInt(rowIndex));\n      let shiftId = rowIndex;\n      daysOfWeek.forEach((copyDay, index) => {\n\n        const dayData = JSON.parse(matchedShift.shift_daywise_data).find((data) => data.day === index + 1);\n\n        if (!dayData) {\n          return null;\n        }\n\n          setTimeValues(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: {\n                ...(prevState[shiftId]?.[copyDay] || {}),\n                from: dayData.from_time ? convertTo24Hrs(dayData.from_time) : null,\n                to: dayData.to_time ? convertTo24Hrs(dayData.to_time) : null,\n              },\n            },\n          }));\n\n          setInitialFromTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]:  convertTo24Hrs(dayData.from_time),\n            },\n          }));\n          \n\n          setInitialToTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: convertTo24Hrs(dayData.to_time),\n            },\n          }));\n\n          let diffHours = 0;\n          if( dayData.from_time && dayData.to_time ) {\n            const fromTime = convertTo24Hrs(dayData.from_time)\n            const toTime = convertTo24Hrs(dayData.to_time)\n            diffHours = toTime && fromTime ? dayjs(toTime).diff(dayjs(fromTime), 'hour',true) : 0;\n\n            if (diffHours <= 0) {\n              diffHours = 24 + diffHours;\n            }\n            diffHours = Math.round(diffHours * 10) / 10;\n          }\n\n          setCommonDiffHours(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: diffHours,\n            },\n          }));\n          \n\n          setWeekOffChecked(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff ? true : false,\n            },\n          }));\n        \n          setOccasionalVisible(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff ? true : false,\n            },\n          }));\n\n          dayData.occasional_working_days = dayData.occasional_working_days ? dayData.occasional_working_days : [];\n\n          setOccasionalDayVisible(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff === 1 && dayData.occasional_working_days.length > 0 ? true : false,\n            },\n          }));\n\n\n          setAllValuesSelected(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.occasional_working_days && dayData.occasional_working_days.length === groupedOfWeeksNumbers[0].items.length ? true : false,\n            },\n          }));\n\n          setSelectedOccasionalWorkingWeeks(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.occasional_working_days,\n            },\n          }));\n      });\n    }\n  }; \n\n  const handleSave = async (shiftId = 0, isConfirmModel = 2) => {\n\n    if(isConfirmModel === 1) {\n      setConform(false);\n    }\n\n    if (isConfirmModel === 2 && ((Array.isArray(selectedWeeksOfMonths) && selectedWeeksOfMonths.length > 0) || (typeof selectedWeeksOfMonths === \"object\" && selectedWeeksOfMonths !== null && Object.keys(selectedWeeksOfMonths).length > 0))) {\n\n        let isAnyDayTrue = false;\n\n        for (const day of daysOfWeek) {\n          if (selectedWeeksOfMonths?.[shiftId]?.[day] && selectedWeeksOfMonths?.[shiftId]?.[day].length > 0) {\n            isAnyDayTrue = true;\n            break;\n          }\n        }\n\n        if( isAnyDayTrue ) {\n          setModelShiftId(shiftId);\n          setConform(true);\n          return false;\n\n        }\n\n    }\n\n    const shiftName = document.querySelector(`input[name=\"shift_name_${shiftId}\"]`).value;\n    const shiftDescriptions = document.querySelector(`textarea[id=\"shift_description_${shiftId}\"]`).value;\n    // const breakTime = document.querySelector(`input[name=\"shift_break_time_${shiftId}\"]`).value;\n\n    if (!shiftName.trim() ) {\n      return;\n    }\n\n    const shiftDaywiseData = daysOfWeek.map((day, index) => {\n      const fromTime = timeValues[shiftId]?.[day]?.from;\n      const toTime = timeValues[shiftId]?.[day]?.to;\n      return {\n        day: index + 1,\n        from_time: fromTime ? dayjs(fromTime).format(\"HH:mm\") : null,\n        to_time: toTime ? dayjs(toTime).format(\"HH:mm\") : null,\n        is_weekoff:0\n        // is_weekoff: weekOffChecked[shiftId]?.[day] ? 1 : 0,\n        // occasional_working_days: selectedWeeksOfMonths[shiftId]?.[day] ?? [],\n      };\n    });\n\n    let shiftData = {\n      'shift_daywise_data': shiftDaywiseData,\n      // 'break_time' : breakTime.length > 0 ? breakTime : 0 ,\n      'shift_name' : shiftName,\n      'shift_description': shiftDescriptions\n    }\n\n    if(shiftId > 0) {\n      shiftData.id  = shiftId;\n      dispatch(updateShiftNew(shiftData));\n    } else {\n      dispatch(addNewShiftNew(shiftData));\n    }\n\n  };\n\n  const getTotalMinutes = (dateObj)=>{\n    return dateObj.hour() * 60 + dateObj.minute();\n  }\n\n  const validationSchema = Yup.object().shape({\n    shift_name: Yup.array().of(Yup.string().required('Shift name is required')),\n    // shift_break_time: Yup.array().of(Yup.number().typeError('Break time must be a number').min(0, 'Break time must be greater than or equal to 0')),\n    // shift_description: Yup.array().of(Yup.string()),\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      shift_name: '',\n      // shift_break_time: '',\n      shift_description: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n\n      console.log(values);\n      \n     \n      const shiftNameErrors = {};\n\n\n      const shiftNameRegex = /^[A-Za-z0-9 ]+$/;\n      if (isFirstRowOpen) {\n        if (!values['shift_name_0']) { \n          shiftNameErrors['shift_name_0'] = 'Shift name is required';\n        }else if(!shiftNameRegex.test(values['shift_name_0'])){\n          shiftNameErrors['shift_name_0'] = 'Only letters and numbers are allowed';\n        }\n      } else {\n        //shifts.forEach(shift => {\n          const shiftNameKey = `shift_name_${modelShiftId}`;\n          if (!values[shiftNameKey]) {\n            shiftNameErrors[shiftNameKey] = 'Shift name is required';\n          }else if(!shiftNameRegex.test(values[shiftNameKey])){\n            shiftNameErrors[shiftNameKey] = 'Only letters and numbers are allowed';\n          }\n        //});\n      }\n\n      const fromToErrors = {};\n\n      // Validation for \"From\" and \"To\" times\n      daysOfWeek.forEach(day => {\n        const dayIndex = daysOfWeek.indexOf(day);\n        const prevDay = daysOfWeek[(dayIndex - 1 + 7) % 7];\n\n        const shiftId = isFirstRowOpen ? 0 : modelShiftId;\n\n        const prevDayFrom = timeValues[shiftId]?.[prevDay]?.from;\n        const prevDayTo = timeValues[shiftId]?.[prevDay]?.to;\n        \n        if(isFirstRowOpen) {\n          if(!weekOffChecked[shiftId]?.[day] || (weekOffChecked[shiftId]?.[day] === true && selectedWeeksOfMonths[shiftId]?.[day]?.length > 0)) {\n            const fromKey = `shift_from_time_${shiftId}_${day}`;\n            const toKey = `shift_to_time_${shiftId}_${day}`;\n            const fromValue = timeValues[shiftId]?.[day]?.from;\n            const toValue = timeValues[shiftId]?.[day]?.to;\n            \n            if (!fromValue) {\n              fromToErrors[fromKey] = 'From time is required';\n            }\n    \n            if (!toValue) {\n              fromToErrors[toKey] = 'To time is required';\n            }\n\n            if (fromValue && toValue) {\n              const fromTime = dayjs(fromValue)\n              const toTime = dayjs(toValue)\n              \n              const prevFromTime = dayjs(prevDayFrom);\n              const prevToTime = dayjs(prevDayTo);\n              \n              const currentFromMinutes = getTotalMinutes(fromTime);\n              const prevFromMinutes = getTotalMinutes(prevFromTime);\n              const prevToMinutes = getTotalMinutes(prevToTime);\n              \n              \n              let diffHours = toTime ? toTime.diff(fromTime, 'hour') : 0;\n              \n              // Check if to time is greater than from time\n              if (diffHours === 0 && fromTime.isSame(toTime, 'minute')) {\n                \n                fromToErrors[toKey] = 'The shift duration cannot be exactly 24 hours';\n              }\n\n              if (prevFromMinutes > prevToMinutes && prevToMinutes > currentFromMinutes) {\n                fromToErrors[fromKey] = 'Shift timing is overlapping with previous day';\n              }\n            }\n          }\n\n        } else {\n            \n            if(!weekOffChecked[shiftId]?.[day] || (weekOffChecked[shiftId]?.[day] === true && selectedWeeksOfMonths[shiftId]?.[day]?.length > 0))  {\n              const fromKey = `shift_from_time_${shiftId}_${day}`;\n              const toKey = `shift_to_time_${shiftId}_${day}`;\n              const fromValue = timeValues[shiftId]?.[day]?.from;\n              const toValue = timeValues[shiftId]?.[day]?.to;\n      \n              if (!fromValue) {\n                fromToErrors[fromKey] = 'From time is required';\n              }\n      \n              if (!toValue) {\n                fromToErrors[toKey] = 'To time is required';\n              }\n\n              if (fromValue && toValue) {\n\n                const fromTime = dayjs(convertToDate(fromValue))\n                const toTime = dayjs(convertToDate(toValue))\n\n                const prevFromTime = dayjs(prevDayFrom);\n                const prevToTime = dayjs(prevDayTo);\n                \n                const currentFromMinutes = getTotalMinutes(fromTime);\n                const prevFromMinutes = getTotalMinutes(prevFromTime);\n                const prevToMinutes = getTotalMinutes(prevToTime);\n             \n                let diffHours = toTime ? toTime.diff(fromTime, 'hour') : 0;\n              \n                // Check if to time is greater than from time\n                if (diffHours === 0 && fromTime.isSame(toTime, 'minute')) {\n                  fromToErrors[toKey] = 'The shift duration cannot be exactly 24 hours';\n                }\n\n                if (prevFromMinutes > prevToMinutes && prevToMinutes > currentFromMinutes) {\n                  fromToErrors[fromKey] = 'Shift timing is overlapping with previous day';\n                }\n              }\n            }\n        }\n      });\n\n      // Merge errors from shiftNameErrors and fromToErrors\n      const errors = { ...shiftNameErrors, ...fromToErrors };\n\n      // console.log( 'errors >>>', errors)\n      \n      if(isFirstRowOpen) {\n        setShowModal(false);\n      }      \n\n      if (errors && Object.keys(errors).length > 0) {\n        formik.setErrors(errors);\n      } else {\n        // Proceed with form submission\n        // handleSave(modelShiftId, 2);\n      }\n    },\n  });\n\n  const [isInitValAdd, setInitValAdd] = useState(false);\n  const isInitValAddRef = useRef(false);\n\n  useEffect(() => {\n    if (isShiftAdd || isShiftUpdate) {\n      dispatch(onGetWorkingHours());\n      resetAllData();\n      setIsFirstRowOpen(false);\n      setConform(false);\n      setExpandedRow(null);\n      setModelShiftId(0);\n      dispatch(afterSaveShift());\n      setInitValAdd(false);\n      formik.resetForm();\n      if(isShiftAdd) {\n        setIsModalOpen2(true)\n      }\n    }\n  }, [formik, isShiftAdd, isShiftUpdate, dispatch, modelShiftId])\n\n  useEffect(() => {\n    const isInitValAdd = isInitValAddRef.current;\n\n    if(validationErrors && Object.keys(validationErrors).length > 0) {\n      formik.setErrors(validationErrors)\n      setTimeout(() => {\n          dispatch(resetValidationErrors());\n      }, 3000);\n    }\n\n    if (shifts && shifts.length > 0 && (!isInitValAdd || (isShiftAdd || isShiftUpdate))) {\n      \n      isInitValAddRef.current = true;\n      setInitValAdd(true);\n      const initialValues = {};\n\n      shifts.forEach(shift => {\n        initialValues[`shift_name_${shift.id}`] = shift.name;\n        // initialValues[`shift_break_time_${shift.id}`] = shift.break_time;\n        initialValues[`shift_description_${shift.id}`] = shift.description;\n      });\n      formik.setValues(initialValues); // Update formik values after shifts are available\n    }\n  }, [formik, shifts, validationErrors, dispatch, isInitValAdd, isShiftAdd, isShiftUpdate]);\n\n  const convertTo24Hrs = (time) => {\n    if (time) {\n      const [hoursStr, minutesStr] = time.split(':');\n      let hours = parseInt(hoursStr);\n      const minutes = parseInt(minutesStr);\n  \n      // Adjust hours for PM times\n      if (time.includes('PM') && hours < 12) {\n        hours += 12;\n      }\n  \n      // Adjust hours for 12 AM\n      if (time.includes('AM') && hours === 12) {\n        hours = 0;\n      }\n  \n      // Create a Date object with the adjusted hours and minutes\n      const dateObj = new Date();\n      dateObj.setHours(hours);\n      dateObj.setMinutes(minutes);\n  \n      return dateObj;\n    } else {\n      return null;\n    }\n  };\n\n  const convertToDate = (time) => {\n    if (typeof time === 'string' && time.includes(':')) {\n\n      const currentDate = new Date();\n      const TimeParts = time.split(':');\n      currentDate.setHours(Number(TimeParts[0]), Number(TimeParts[1]), 0, 0);\n      return currentDate;\n    } else {\n      return time;\n    }\n  };\n\n  \n  const convertTo24HrsOld = ((time) => {\n    if(time) {\n      var hours = Number(time.match(/^(\\d+)/)[1]);\n      var minutes = Number(time.match(/:(\\d+)/)[1]);\n      var AMPM = time.match(/\\s(.*)$/)[1];\n      if (AMPM === \"PM\" && hours < 12) hours = hours + 12;\n      if (AMPM === \"AM\" && hours === 12) hours = hours - 12;\n      var sHours = hours.toString();\n      var sMinutes = minutes.toString();\n      if (hours < 10) sHours = \"0\" + sHours;\n      if (minutes < 10) sMinutes = \"0\" + sMinutes;\n\n      return sHours + \":\" + sMinutes;\n    } else {\n      return null;\n    }\n  });\n\n  const resetAllData = () => {\n\n    setInitialFromTimes({});\n    setInitialToTimes({});\n    setTimeValues({});\n    setCommonDiffHours({});\n\n    setInitialOnChangeFromTimes({});\n    setInitialOnChangeToTimes({});\n\n    setOccasionalVisible({});\n    setOccasionalDayVisible({});\n\n    setSelectedOccasionalWorkingWeeks([]);\n\n    setAllValuesSelected({});\n\n    setWeekOffChecked({}); \n\n  }\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalConfirmationText, setModalConfirmationText] = useState(<>You have some unsaved changes, do you want to save them?</>);\n\n  const closeConfirmationModal = () => {\n    formik.resetForm();\n    setIsFirstRowOpen(false);\n    setShowModal(false);\n    resetAllData();\n  };\n\n  const openConfirmationModal = () => {\n\n    const shiftName = document.querySelector(`input[name=\"shift_name_0\"]`).value;\n    const fromTime = timeValues[0]?.['Monday']?.from;\n    const toTime = timeValues[0]?.['Monday']?.to;\n\n    if(shiftName.length > 0 || fromTime !== undefined || toTime !== undefined) {\n      setShowModal(true);\n    } else {\n      formik.resetForm();\n      resetAllData();\n      setIsFirstRowOpen(false);\n    }\n  }\n  const pageHistory =useNavigate()\n\n  const handleSaveShift = () => {\n    setShowModal(false);\n    formik.handleSubmit();\n  };\n\n  const onClosedUnsaveModelClick = () => {\n    formik.resetForm();\n    setIsFirstRowOpen(false);\n    setShowModal(false);\n    resetAllData();\n    pageHistory(-1);\n  };\n\n  const isReadOnly = !userHasRights(moduleName.assignShift, 'C');\n\n  document.title = \"Manage Shifts | Petpooja Payroll\";\n  return (\n      <React.Fragment>\n        <Header title=\"Manage Shifts\" currentPage=\"shiftTime\"\n                showUnchangeModal={formik.dirty}\n                onClosedUnsaveModelClick={onClosedUnsaveModelClick}\n                onSaveClick={handleSaveShift}\n                modalConfirmationText={modalConfirmationText}/>\n        <div className=\"page-content\">\n          <DeleteModal\n            show={deleteModal}\n            onDeleteClick={handleDeleteShift}\n            onCloseClick={() => {\n              setDeleteModalData(null);\n              setDeleteModal(false);\n            }}\n            name={deleteModalData?.name}\n            title={deleteModalData?.title}\n            description={deleteModalData?.description}\n            btnLoading={isShiftDelLoading}\n          />\n           <div className=\"container-fluid\">\n            <Card className=\" p-3 mb-2 barrierEnd\">\n              <CardBody>\n                <div className=\" Employees-emptyBox\" style={{ height: \"300px\" }}>\n                  <div className=\"text-center\">\n                    <img\n                      src={noData}\n                      alt=\"no-data \"\n                      className=\"mb-3\"\n                      style={{ width: \"150px\", opacity: \"60%\" }}\n                    />\n                    <h5>Apologies,</h5>\n                    <p className=\"mx-lg-5 mt-2 p-0\">\n                      For better experience please open this page on web.\n                    </p>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            <Row className=\"barrierStart\">\n              <Col lg={12}>\n                \n\n                {/* new design start */}\n                <div className=\"card  ps-border ps-rounded-10 shadow-none shift-managment-wrap\">\n                  <div className=\"card-header ps-border-bottom ps-rounded-top-rl px-4\">\n                    <div className=\"pr-page-title d-flex justify-content-between align-items-center ps-emp-total\">\n                      <h5>Shifts <span>({shifts.length > 0 ? shifts.length : 0})</span></h5>\n\n                      <div className=\"d-flex\">\n                        <Link to=\"/employees-shifts-assign-new\"><button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn me-3\" id=\"assign-btn\" >Assign Shift</button>\n                        </Link>\n                        {userHasRights(moduleName.assignShift, 'C') && \n                          <>\n                            <button type=\"button\" className=\"ps-btn sm-btn primary-btn \" onClick={()=>workHourFun()}>Set Working Hours</button>\n                            <button type=\"button\" className=\"ps-btn sm-btn primary-btn ms-3\" id=\"create-btn\" onClick={() => { setshiftDetail([]); setIsEdit(false); setIsFirstRowOpen(true); resetAllData(); setExpandedRow(null);}} >Create Shift</button>\n                          </>\n                        }\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* <div className=\"ps-emp-not-ass-alert ps-border-bottom\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M17.87 13.3398C17.42 14.3698 16.81 15.2898 16.04 16.0498C15.27 16.8198 14.36 17.4298 13.33 17.8798C12.29 18.3198 11.17 18.5498 9.99 18.5498C8.81 18.5498 7.7 18.3198 6.66 17.8798C5.63 17.4298 4.71 16.8198 3.95 16.0498C3.18 15.2798 2.57 14.3698 2.12 13.3398C1.68 12.2998 1.45 11.1798 1.45 9.9998C1.45 8.8198 1.68 7.7098 2.12 6.6698C2.57 5.6398 3.19 4.7198 3.95 3.9598C4.72 3.1898 5.63 2.5798 6.66 2.1298C7.7 1.6898 8.82 1.4598 10 1.4598C11.18 1.4598 12.29 1.6898 13.33 2.1298C14.36 2.5798 15.28 3.1998 16.04 3.9598C16.8 4.7198 17.42 5.6398 17.87 6.6698C18.31 7.7098 18.54 8.8298 18.54 10.0098C18.54 11.1898 18.31 12.2998 17.87 13.3398ZM17.1 10.0098C17.1 8.0298 16.4 6.3398 15.03 4.9698C13.66 3.5998 11.97 2.89981 10 2.89981C8.03 2.89981 6.33 3.5998 4.96 4.9698C3.59 6.3398 2.89 8.0298 2.89 10.0098C2.89 11.9898 3.59 13.6698 4.96 15.0398C6.33 16.4098 8.02 17.1098 10 17.1098C11.98 17.1098 13.66 16.4098 15.03 15.0398C16.4 13.6698 17.1 11.9798 17.1 10.0098Z\" fill=\"#212121\"/>\n                      <path d=\"M10.72 13.7398V9.70978C10.72 9.50978 10.65 9.33978 10.51 9.19978C10.37 9.05978 10.2 8.98978 10 8.98978C9.79 8.98978 9.62 9.05978 9.48 9.19978C9.34 9.33978 9.28 9.50978 9.28 9.70978V13.7398C9.28 13.9398 9.34 14.1098 9.48 14.2498C9.62 14.3898 9.79 14.4598 9.99 14.4598C10.2 14.4598 10.37 14.3898 10.51 14.2498C10.65 14.1098 10.72 13.9398 10.72 13.7398Z\" fill=\"#212121\"/>\n                      <path d=\"M10.77 6.49977C10.77 6.27977 10.69 6.09977 10.55 5.94977C10.4 5.79978 10.21 5.72978 10 5.72978C9.79 5.72978 9.59 5.79978 9.45 5.94977C9.3 6.09977 9.22 6.27977 9.22 6.49977C9.22 6.71978 9.3 6.89978 9.45 7.04978C9.59 7.18978 9.78 7.26978 10 7.26978C10.22 7.26978 10.4 7.18978 10.55 7.04978C10.69 6.89978 10.77 6.70977 10.77 6.49977Z\" fill=\"#212121\"/>\n                    </svg>\n                    <h5>120 Employees are not assigned to any Shift Yet</h5>\n                    <Link to=\"/employees-shifts-assign-new\"><button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn ms-1\" id=\"assign-btn\" >Assign Now</button></Link>\n                  </div> */}\n\n                  <div className=\"card-body p-4 row\">\n                    {/*<Col xl={12}>\n                      <div className=\"float-md-end indicator-bg py-1 py-md-1 px-3 mb-3\">\n                        <div className=\"d-md-flex justify-content-end align-items-center\">\n                          <p className=\"mb-0 tx-black fw-500 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"7\" fill=\"#F3F3F9\" stroke=\"#D2D6DB\" strokeWidth=\"2\" />\n                              </svg>\n                            </span>Week Off\n                          </p>\n                          <p className=\"mb-0 tx-black fw-500 ms-md-3 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"7\" fill=\"#F3F3F9\" stroke=\"#2381D9\" strokeWidth=\"2\" />\n                              </svg></span>Occassional Working\n                          </p>\n                          <p className=\"mb-0 tx-black fw-500 ms-md-3 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"8\" fill=\"#2381D9\" />\n                              </svg>\n                            </span>Working Day\n                          </p>\n                        </div>\n                      </div>\n                    </Col>*/}\n\n                    <Col xl={12}>\n                      {/* <SimpleBar style={{ height: \"60vh\" }}> */}\n                      <div className=\"table-responsive mt-4 mt-xl-0 ct-emp-shit-assign\">\n                      {isShiftSuccess ? (\n                      <form onSubmit={formik.handleSubmit}>\n                        <Table className=\"table-striped align-middle table-nowrap mb-0 \">\n                          <thead>\n                            <tr>\n                              <th scope=\"col\" width=\"25%\" style={{minWidth:\"250px\"}}>Shift Name</th>\n                              {/* <th scope=\"col\" width=\"30%\">Shift Days</th> */}\n                              <th scope=\"col\" width=\"30%\">Assigned Employees</th>\n                              <th scope=\"col\" width=\"30%\">Created On</th>\n                              <th scope=\"col\">Action</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {isFirstRowOpen && (\n                              <tr className=\"cursor-pointer\" key=\"0\">\n                                <td onClick={() => toggleAccordion(0)}>\n\n                                  <div className={`ps-form-group ${formik.errors[`shift_name_0`] ? 'inp-warning' : ''} ps-warn-col`}> \n\n                                    <input name={`shift_name_0`} placeholder=\"Write Shift Name Here\" type=\"text\" className={`form-control ps-rounded-7 ${formik.errors[`shift_name_0`] ? 'warning' : ''}`} value={formik.values[`shift_name_0`] || ''}  onChange={formik.handleChange}/>\n\n                                    {formik.touched[`shift_name_0`] && formik.errors[`shift_name_0`] ? (<p>{formik.errors[`shift_name_0`]}</p>) : null}\n\n                                  </div>\n\n                                </td>\n                                {/* <td onClick={() => toggleAccordion(0)}>\n                                  <div className=\"d-flex week-circle-wrap\">\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                  </div>\n                                </td> */}\n                                <td onClick={() => toggleAccordion(0)}>0 Employees </td>\n                                <td onClick={() => toggleAccordion(0)}>{dayjs().format('YYYY-MM-DD')}</td>\n                                <td>\n                                  <span id=\"expandNewShiftBtn\" className=\"d-inline-block\" onClick={() => toggleAccordion(0)}>\n                                    {expandedRow === 0 ?\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" fill=\"white\" />\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M21 18.5L16 13.5L11 18.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                      :\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M11 13.5L16 18.5L21 13.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                    }\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`expandNewShiftBtn`}>\n                                      {expandedRow === 0 ? \"Collapse\" : \"Expand\"}\n                                  </UncontrolledTooltip>\n                                  <span id=\"deleteNewShiftBtn\" className=\"d-inline-block ms-3\" onClick={() => { openConfirmationModal(); }}>\n                                    <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                      <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                      <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                      <path d=\"M14.4375 10.0625V10.375H17.5625V10.0625C17.5625 9.6481 17.3979 9.25067 17.1049 8.95765C16.8118 8.66462 16.4144 8.5 16 8.5C15.5856 8.5 15.1882 8.66462 14.8951 8.95765C14.6021 9.25067 14.4375 9.6481 14.4375 10.0625ZM13.1875 10.375V10.0625C13.1875 9.31658 13.4838 8.60121 14.0113 8.07376C14.5387 7.54632 15.2541 7.25 16 7.25C16.7459 7.25 17.4613 7.54632 17.9887 8.07376C18.5162 8.60121 18.8125 9.31658 18.8125 10.0625V10.375H23.5C23.6658 10.375 23.8247 10.4408 23.9419 10.5581C24.0592 10.6753 24.125 10.8342 24.125 11C24.125 11.1658 24.0592 11.3247 23.9419 11.4419C23.8247 11.5592 23.6658 11.625 23.5 11.625H22.5575L21.375 21.98C21.2878 22.7426 20.923 23.4465 20.3501 23.9573C19.7772 24.4682 19.0363 24.7504 18.2687 24.75H13.7312C12.9637 24.7504 12.2228 24.4682 11.6499 23.9573C11.077 23.4465 10.7122 22.7426 10.625 21.98L9.4425 11.625H8.5C8.33424 11.625 8.17527 11.5592 8.05806 11.4419C7.94085 11.3247 7.875 11.1658 7.875 11C7.875 10.8342 7.94085 10.6753 8.05806 10.5581C8.17527 10.4408 8.33424 10.375 8.5 10.375H13.1875ZM11.8675 21.8375C11.9197 22.2949 12.1383 22.7172 12.4818 23.0238C12.8253 23.3304 13.2696 23.4999 13.73 23.5H18.2694C18.7298 23.4999 19.1741 23.3304 19.5175 23.0238C19.861 22.7172 20.0797 22.2949 20.1319 21.8375L21.3 11.625H10.7006L11.8675 21.8375ZM14.125 13.8125C14.2908 13.8125 14.4497 13.8783 14.5669 13.9956C14.6842 14.1128 14.75 14.2717 14.75 14.4375V20.6875C14.75 20.8533 14.6842 21.0122 14.5669 21.1294C14.4497 21.2467 14.2908 21.3125 14.125 21.3125C13.9592 21.3125 13.8003 21.2467 13.6831 21.1294C13.5658 21.0122 13.5 20.8533 13.5 20.6875V14.4375C13.5 14.2717 13.5658 14.1128 13.6831 13.9956C13.8003 13.8783 13.9592 13.8125 14.125 13.8125ZM18.5 14.4375C18.5 14.2717 18.4342 14.1128 18.3169 13.9956C18.1997 13.8783 18.0408 13.8125 17.875 13.8125C17.7092 13.8125 17.5503 13.8783 17.4331 13.9956C17.3158 14.1128 17.25 14.2717 17.25 14.4375V20.6875C17.25 20.8533 17.3158 21.0122 17.4331 21.1294C17.5503 21.2467 17.7092 21.3125 17.875 21.3125C18.0408 21.3125 18.1997 21.2467 18.3169 21.1294C18.4342 21.0122 18.5 20.8533 18.5 20.6875V14.4375Z\" fill=\"#212121\" />\n                                    </svg>\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`deleteNewShiftBtn`}>\n                                      Delete\n                                  </UncontrolledTooltip>\n                                </td>\n                              </tr>\n                            )}\n                            {isFirstRowOpen && expandedRow === 0 &&\n                              <tr className=\"\" key=\"0_0\">\n\n                                <td colSpan={2} className=\"ps-border-right\">\n\n                                  <div className=\"row pt-3\">\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Day</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">From</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"></div>\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">To</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"></div>\n                                    {/* <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Week Off</p></div> */}\n                                  </div>\n\n                                  {daysOfWeek.map((day, index) => (\n                                    <div key={`${day}-${index}-0`} className={`row py-3 ${occasionalVisible[0]?.[day] ? 'gridjs-th' : ''}`}>\n                                      <div className=\"col-xl-2 col-md-2\"><p className=\"mb-2 mt-2 paragraph-sm-1\">{day}</p></div>\n                                      <div className=\"col-xl-3 col-md-3 col-3 ct-time-width\" id=\n                                      {`from_time_0_${day}`}>\n                                          {/* <TimePicker\n                                            className={classes.timePicker}\n                                            name={`shift_from_time_0_${day}`}\n                                            label=\"Choose Time\"\n                                            value={initialFromTimes[0]?.[day] || timeValues[0]?.[day]?.from}\n                                            onChange={(newTime) => {\n                                              formik.handleChange({\n                                                target: {\n                                                  name: `shift_from_time_0_${day}`,\n                                                  value: newTime,\n                                                },\n                                              });\n                                              handleFromTimeChange(day, newTime, 0);\n                                            }} \n                                            onClose={(event) => handleFromTimeClose(event, 0)}\n                                            viewRenderers={{\n                                              hours: renderTimeViewClock,\n                                              minutes: renderTimeViewClock,\n                                              seconds: renderTimeViewClock,\n                                            }}\n                                          /> */}\n\n\n\n                                            <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_from_time_0_${day}`] ? 'date-error' : ''}`}>\n                                                <Flatpickr\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_from_time_0_${day}`}\n                                                      className=\"timer form-control\"\n                                                      value={initialFromTimes[0]?.[day] || timeValues[0]?.[day]?.from || ''}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_from_time_0_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleFromTimeChange(day, newTime, 0);\n                                                      }}\n                                                      onClose={(event) => handleFromTimeClose({}, 0)}\n                                                      options={{\n                                                          enableTime: true,\n                                                          noCalendar: true,\n                                                          dateFormat: \"H:i\",\n                                                          altInput: true ,\n                                                          altFormat: \"h:i K\",\n                                                          disableMobile: true\n                                                      }}\n                                                  /> \n                                                  {formik.errors[`shift_from_time_0_${day}`] ? (<p className=\"\">{formik.errors[`shift_from_time_0_${day}`]}</p>) : null}                    \n                                            </div>\n                                            \n                                        </div>\n                                       \n                                      <div className=\"col-xl-1 col-md-1 text-center\"><img className=\"mt-2\" src={arrowrightimg} alt=\"\" /></div>\n                                      <div className=\"col-xl-3 col-md-3 col-3\" id=\n                                      {`to_time_0_${day}`}>\n                                          {/* <TimePicker\n                                            className={classes.timePicker}\n                                            name={`shift_to_time_0_${day}`}\n                                            label=\"Choose Time\"\n                                            value={initialToTimes[0]?.[day] || timeValues[0]?.[day]?.to}\n                                            onChange={(newTime) => {\n                                              formik.handleChange({\n                                                target: {\n                                                  name: `shift_to_time_0_${day}`,\n                                                  value: newTime,\n                                                },\n                                              });\n                                              handleToTimeChange(day, newTime, 0);\n                                            }}          \n                                            onClose={(event) => handleToTimeClose(event, 0)}                         \n                                            viewRenderers={{\n                                              hours: renderTimeViewClock,\n                                              minutes: renderTimeViewClock,\n                                              seconds: renderTimeViewClock,\n                                            }}\n                                          /> */}\n\n                                              <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_to_time_0_${day}`] ? 'date-error' : ''}`}>\n                                                <Flatpickr\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_to_time_0_${day}`}\n                                                      className=\"timer form-control\"\n                                                      value={initialToTimes[0]?.[day] || timeValues[0]?.[day]?.to || ''}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_to_time_0_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleToTimeChange(day, newTime, 0);\n                                                      }} \n                                                      \n                                                      onClose={(event) => handleToTimeClose({}, 0)}\n                                                      options={{\n                                                          enableTime: true,\n                                                          noCalendar: true,\n                                                          dateFormat: \"H:i\",\n                                                          altInput: true ,\n                                                          altFormat: \"h:i K\",\n                                                          disableMobile: true\n                                                      }}\n                                                  /> \n                                                  {formik.errors[`shift_to_time_0_${day}`] ? (<p className=\"\">{formik.errors[`shift_to_time_0_${day}`]}</p>) : null}                    \n                                            </div>\n                                        </div>\n                                        {/* {formik.errors[`shift_to_time_0_${day}`] ? (\n                                            <div>{formik.errors[`shift_to_time_0_${day}`]}</div>\n                                          ) : null} */}\n\n                                      <div className=\"col-xl-1 col-md-1 text-center\"><p className=\"mt-2 paragraph-sm-1\" id=\"shift_time_diff_hrs_0\">{commonDiffHours[0]?.[day] || '0'}h</p></div>\n\n                                      {/* <div className=\"col-xl-2 col-md-2 col-2 mt-2\">\n\n                                        <div className=\"form-check\">\n                                          <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`weekOffCheck_0_${day}`} value=\"\" onChange={() => handleWeekOffCheckbox(day,0)} checked={weekOffChecked[0]?.[day]} disabled={allValuesSelected[0]?.[day]} />\n                                          <label className=\"form-check-label\" htmlFor={`weekOffCheck_0_${day}`}></label>\n                                        </div>\n                                      </div> */}\n                                      <div className=\"col-xl-2 col-md-2\"></div>\n                                      {/* {occasionalVisible[0]?.[day] && (\n                                      <div className=\"col-xl-10 mt-2\" id={`occasional_0_${day}`}>\n                                        <div className=\"d-flex\">\n                                          <p className=\"paragraph-sm-2 text-primary\">Do you want to Occasional Working On {day}? </p>\n                                          <div className=\"form-check mx-2\">\n                                            <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`occasional_working_check_0_${day}`} value=\"\" onChange={() => handleOccasionalWorkingCheckbox(day,0)} checked={occasionalDayVisible[0]?.[day]}/>\n                                            <label className=\"form-check-label\" htmlFor={`occasional_working_check_${day}`}></label>\n                                          </div>\n                                        </div>\n                                      </div>\n                                      )}\n                                      {occasionalVisible[0]?.[day] && occasionalDayVisible[0]?.[day] && (\n                                      <div className=\"row mt-2\" id={`occasional_working_day_0_${day}`}>\n                                        <div className=\"col-xl-2\"></div>\n                                        <div className=\"col-xl-7\">\n                                          <MultiSelect value={selectedWeeksOfMonths[0]?.[day] || ''} options={groupedOfWeeksNumbers} onChange={(e) => handleMultiSelectWeeksChange(e, day, 0)} optionLabel=\"label\"\n                                            optionGroupLabel=\"label\" optionGroupChildren=\"items\"\n                                            placeholder={`Choose Working ${day}s`} display=\"chip\" className=\"w-100 md:w-20rem ps-check-drop\" />\n                                        </div>\n                                      </div>\n                                      )} */}\n                                      \n                                    </div>\n                                  ))}\n                                </td>\n\n\n                                <td colSpan={2} className=\"align-top\">\n                                  <div className=\"ps-3 pt-3\">\n                                    {/* <div className=\"d-flex align-items-center mb-4\">\n                                      <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey\"><img className=\"pe-2\" src={breakimg} alt=\"\" />Break Time</label>\n                                      <input name=\"shift_break_time_0\" type=\"number\" maxLength=\"3\" placeholder=\"minute\" className=\"form-control  form-control ps-rounded-7 w-20 ms-3\" />\n                                    </div> */}\n                                    <div className=\"\">\n                                      <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mb-3\"><img className=\"pe-2 img-fluid\" src={remarkimg} alt=\"\" />Remark</label>\n                                      <textarea className=\"form-control ps-rounded-7\" rows=\"5\" placeholder=\"Write your remarks or comments here...\" id=\"shift_description_0\"/>\n                                    </div>\n                                    {!isReadOnly && \n                                      <div className=\"mt-3\">\n                                        <button type=\"submit\" disabled={error ? null : loading ? true : false} className=\"btn btn-blue\" \n                                        >{error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Save Changes</button>\n                                      </div>\n                                    }\n                                  </div>\n                                </td>\n                              </tr>\n                            }\n\n                            {shifts.map((shift) => (\n                              <React.Fragment key={`frag-${shift.id}`}>\n                              <tr key={shift.id} className=\"cursor-pointer\">\n\n                                <td onClick={() => toggleAccordion(shift.id)} className=\"d-flex align-items-center\">\n                           \n                                  <div className={`ps-form-group ${formik.errors[`shift_name_${shift.id}`] ? 'inp-warning' : ''} ps-warn-col`}> \n\n                                    <input name={`shift_name_${shift.id}`} disabled={isReadOnly} placeholder=\"Write Shift Name Here\" type=\"text\" className={`form-control ps-rounded-7 ${formik.errors[`shift_name_${shift.id}`] ? 'warning' : ''}`} value={formik.values[`shift_name_${shift.id}`] || ''}  onChange={formik.handleChange}/>\n\n                                    {formik.touched[`shift_name_${shift.id}`] && formik.errors[`shift_name_${shift.id}`] ? (<p>{formik.errors[`shift_name_${shift.id}`]}</p>) : null}\n\n                                </div>\n                                {shift.default_shift === 1 ? <Badge pill bg=\"info\" className=\"ms-2 ps-badge-12\">Default</Badge> : <div className=\"\" style={{width:\"74px\"}}></div>}\n                                </td>\n\n                                <td onClick={() => toggleAccordion(shift.id)} className=\"d-none\">\n                                  <div className=\"d-flex week-circle-wrap\">\n\n                                  {JSON.parse(shift.shift_daywise_data)\n                                    .sort((a, b) => a.day - b.day)\n                                    .map((dayData, index) => (\n                                      <p\n                                        key={index}\n                                        className={`table-week-circle round-blue-circle me-2`}\n                                        // className={`table-week-circle ${\n                                        //   dayData.is_weekoff === 1 &&\n                                        //   (!dayData.occasional_working_days || dayData.occasional_working_days.length === 0)\n                                        //     ? 'round-grey-circle'\n                                        //     : dayData.is_weekoff === 1 && dayData.occasional_working_days && dayData.occasional_working_days.length > 0\n                                        //     ? 'round-blue-border-circle'\n                                        //     : 'round-blue-circle'\n                                        // } me-2`}\n                                      >\n                                        {dayData.day !== null ? daysOfWeek[dayData.day - 1].charAt(0) : ''}\n                                      </p>\n                                    ))}\n\n                                  \n                                    {/* <p className=\"table-week-circle round-blue-circle me-2\">M</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">T</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">W</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">T</p>\n                                    <p className=\"table-week-circle round-grey-circle me-2\">F</p>\n                                    <p className=\"table-week-circle round-grey-circle me-2\">S</p>\n                                    <p className=\"table-week-circle round-blue-border-circle me-2\">S</p> */}\n\n                                  </div>\n                                </td>\n                                <td onClick={() => toggleAccordion(shift.id)} >{shift.employee_count} </td>\n                                <td onClick={() => toggleAccordion(shift.id)} >{shift.added_on}</td>\n                                <td>\n                                  \n                                <span id={`expandShiftBtn-${shift.id}`} className=\"d-inline-block\" onClick={() => toggleAccordion(shift.id)}>\n                                    {expandedRow === shift.id ?\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" fill=\"white\" />\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M21 18.5L16 13.5L11 18.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                      :\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M11 13.5L16 18.5L21 13.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                    }\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`expandShiftBtn-${shift.id}`}>\n                                      {expandedRow === shift.id ? \"Collapse\" : \"Expand\"}\n                                  </UncontrolledTooltip>\n\n                                  <span id={`logsBtn-${shift.id}`} className=\"d-inline-block ms-3\" onClick={()=>{setShiftLogsDetails(shift); shiftLogsFun();}}>\n                                    <svg width=\"32\" height=\"33\" viewBox=\"0 0 32 33\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                      <rect x=\"0.5\" y=\"0.724609\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\"/>\n                                      <rect x=\"0.5\" y=\"0.724609\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10.5835 10.1816C10.4684 10.1816 10.3751 10.2749 10.3751 10.39V23.7233C10.3751 23.8384 10.4684 23.9316 10.5835 23.9316H21.4168C21.5319 23.9316 21.6251 23.8384 21.6251 23.7233V10.39C21.6251 10.2749 21.5319 10.1816 21.4168 10.1816H10.5835ZM9.12512 10.39C9.12512 9.58456 9.77804 8.93164 10.5835 8.93164H21.4168C22.2222 8.93164 22.8751 9.58456 22.8751 10.39V23.7233C22.8751 24.5287 22.2222 25.1816 21.4168 25.1816H10.5835C9.77804 25.1816 9.12512 24.5287 9.12512 23.7233V10.39Z\" fill=\"#212121\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.5002 7.26562C13.8454 7.26562 14.1252 7.54545 14.1252 7.89062V10.3906C14.1252 10.7358 13.8454 11.0156 13.5002 11.0156C13.1551 11.0156 12.8752 10.7358 12.8752 10.3906V7.89062C12.8752 7.54545 13.1551 7.26562 13.5002 7.26562Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M18.5002 7.26562C18.8454 7.26562 19.1252 7.54545 19.1252 7.89062V10.3906C19.1252 10.7358 18.8454 11.0156 18.5002 11.0156C18.1551 11.0156 17.8752 10.7358 17.8752 10.3906V7.89062C17.8752 7.54545 18.1551 7.26562 18.5002 7.26562Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.042 14.1406C12.042 13.7955 12.3218 13.5156 12.667 13.5156H19.3337C19.6788 13.5156 19.9587 13.7955 19.9587 14.1406C19.9587 14.4858 19.6788 14.7656 19.3337 14.7656H12.667C12.3218 14.7656 12.042 14.4858 12.042 14.1406Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.0421 17.4746C12.0421 17.1294 12.3219 16.8496 12.6671 16.8496H17.6671C18.0123 16.8496 18.2921 17.1294 18.2921 17.4746C18.2921 17.8198 18.0123 18.0996 17.6671 18.0996H12.6671C12.3219 18.0996 12.0421 17.8198 12.0421 17.4746Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.0421 20.8066C12.0421 20.4615 12.3219 20.1816 12.6671 20.1816H16.0004C16.3456 20.1816 16.6254 20.4615 16.6254 20.8066C16.6254 21.1518 16.3456 21.4316 16.0004 21.4316H12.6671C12.3219 21.4316 12.0421 21.1518 12.0421 20.8066Z\" fill=\"black\"/>\n                                    </svg>\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`logsBtn-${shift.id}`}>\n                                      Logs\n                                  </UncontrolledTooltip>\n\n                                  {(!shift.default_shift && userHasRights(moduleName.assignShift, 'C')) && (\n                                    <>\n                                      <span id={`shiftDeleteBtn-${shift.id}`} className=\"ms-3 d-inline-block\" onClick={() => {onClickDelete(shift);}}>\n                                        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                          <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                          <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                          <path d=\"M14.4375 10.0625V10.375H17.5625V10.0625C17.5625 9.6481 17.3979 9.25067 17.1049 8.95765C16.8118 8.66462 16.4144 8.5 16 8.5C15.5856 8.5 15.1882 8.66462 14.8951 8.95765C14.6021 9.25067 14.4375 9.6481 14.4375 10.0625ZM13.1875 10.375V10.0625C13.1875 9.31658 13.4838 8.60121 14.0113 8.07376C14.5387 7.54632 15.2541 7.25 16 7.25C16.7459 7.25 17.4613 7.54632 17.9887 8.07376C18.5162 8.60121 18.8125 9.31658 18.8125 10.0625V10.375H23.5C23.6658 10.375 23.8247 10.4408 23.9419 10.5581C24.0592 10.6753 24.125 10.8342 24.125 11C24.125 11.1658 24.0592 11.3247 23.9419 11.4419C23.8247 11.5592 23.6658 11.625 23.5 11.625H22.5575L21.375 21.98C21.2878 22.7426 20.923 23.4465 20.3501 23.9573C19.7772 24.4682 19.0363 24.7504 18.2687 24.75H13.7312C12.9637 24.7504 12.2228 24.4682 11.6499 23.9573C11.077 23.4465 10.7122 22.7426 10.625 21.98L9.4425 11.625H8.5C8.33424 11.625 8.17527 11.5592 8.05806 11.4419C7.94085 11.3247 7.875 11.1658 7.875 11C7.875 10.8342 7.94085 10.6753 8.05806 10.5581C8.17527 10.4408 8.33424 10.375 8.5 10.375H13.1875ZM11.8675 21.8375C11.9197 22.2949 12.1383 22.7172 12.4818 23.0238C12.8253 23.3304 13.2696 23.4999 13.73 23.5H18.2694C18.7298 23.4999 19.1741 23.3304 19.5175 23.0238C19.861 22.7172 20.0797 22.2949 20.1319 21.8375L21.3 11.625H10.7006L11.8675 21.8375ZM14.125 13.8125C14.2908 13.8125 14.4497 13.8783 14.5669 13.9956C14.6842 14.1128 14.75 14.2717 14.75 14.4375V20.6875C14.75 20.8533 14.6842 21.0122 14.5669 21.1294C14.4497 21.2467 14.2908 21.3125 14.125 21.3125C13.9592 21.3125 13.8003 21.2467 13.6831 21.1294C13.5658 21.0122 13.5 20.8533 13.5 20.6875V14.4375C13.5 14.2717 13.5658 14.1128 13.6831 13.9956C13.8003 13.8783 13.9592 13.8125 14.125 13.8125ZM18.5 14.4375C18.5 14.2717 18.4342 14.1128 18.3169 13.9956C18.1997 13.8783 18.0408 13.8125 17.875 13.8125C17.7092 13.8125 17.5503 13.8783 17.4331 13.9956C17.3158 14.1128 17.25 14.2717 17.25 14.4375V20.6875C17.25 20.8533 17.3158 21.0122 17.4331 21.1294C17.5503 21.2467 17.7092 21.3125 17.875 21.3125C18.0408 21.3125 18.1997 21.2467 18.3169 21.1294C18.4342 21.0122 18.5 20.8533 18.5 20.6875V14.4375Z\" fill=\"#212121\" />\n                                        </svg>\n                                      </span>\n                                      <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`shiftDeleteBtn-${shift.id}`}>\n                                          Delete\n                                      </UncontrolledTooltip>\n                                    </>\n                                  )}\n                                </td>\n                              </tr>\n\n\n                              {expandedRow === shift.id &&\n                                <tr className=\"\" key={`${shift.id}_${shift.id}`}>\n                                  <td colSpan={2} className=\"ps-border-right\">\n\n                                      <div className=\"row pt-3\">\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Day</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">From</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"></div>\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">To</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"></div>\n                                        {/* <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Week Off</p></div> */}\n                                      </div>\n\n                                       {daysOfWeek.map((day, index) => {\n                                          const dayData = JSON.parse(shift.shift_daywise_data).find((data) => data.day === index + 1);\n\n                                          if (!dayData) {\n                                            return null;\n                                          }\n\n                                          return (\n                                            <div key={`${day}-${index}-${shift.id}`} className={`row py-3`}>\n                                            {/* <div key={`${day}-${index}-${shift.id}`} className={`row py-3 ${occasionalVisible[shift.id]?.[day] ? 'gridjs-th' : ''}`}> */}\n                                              <div className=\"col-xl-2 col-md-2\"><p className=\"mb-2 mt-2 paragraph-sm-1\">{day}</p></div>\n                                              <div className=\"col-xl-3 col-md-3 col-3 ct-time-width\" id={`from_time_${shift.id}_${day}`}>\n                                                {/* <TimePicker\n                                                  className={classes.timePicker}\n                                                  name={`shift_from_time_${shift.id}_${day}`}\n                                                  label=\"Choose Time\"\n                                                  value={initialFromTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.from}\n                                                  onChange={(newTime) => {\n                                                    formik.handleChange({\n                                                      target: {\n                                                        name: `shift_from_time_${shift.id}_${day}`,\n                                                        value: newTime,\n                                                      },\n                                                    });\n                                                    handleFromTimeChange(day, newTime, shift.id);\n                                                  }}\n                                                  onClose={(event) => handleFromTimeClose(event, shift.id)}\n                                                  viewRenderers={{\n                                                    hours: renderTimeViewClock,\n                                                    minutes: renderTimeViewClock,\n                                                    seconds: renderTimeViewClock,\n                                                  }}\n                                                /> */}\n                                                  <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_from_time_${shift.id}_${day}`] ? 'date-error' : ''}`}>\n                                                    <Flatpickr\n                                                      disabled={isReadOnly}\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_from_time_${shift.id}_${day}`}\n                                                      value={initialFromTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.from}\n                                                      onChange={(newTime) => {\n                                                        \n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_from_time_${shift.id}_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleFromTimeChange(day, newTime, shift.id);\n                                                      }}\n                                                      \n                                                      onClose={(event) => handleFromTimeClose({}, shift.id)}\n                                                      className=\"timer form-control\"\n                                                      options={{\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: \"H:i\",\n                                                        altInput: true ,\n                                                        altFormat: \"h:i K\",\n                                                        disableMobile: true\n                                                      }}\n                                                  />             \n                                                    {formik.errors[`shift_from_time_${shift.id}_${day}`] ? (<p className=\"\">{formik.errors[`shift_from_time_${shift.id}_${day}`]}</p>) : null}    \n                                                </div>\n                                              </div>\n\n                                              <div className=\"col-xl-1 col-md-1 text-center\"><img className=\"mt-2\" src={arrowrightimg} alt=\"\" /></div>\n                                              <div className=\"col-xl-3 col-md-3 col-3\" id={`to_time_${shift.id}_${day}`}>\n                                                {/* <TimePicker\n                                                  className={classes.timePicker}\n                                                  name={`shift_to_time_${shift.id}_${day}`}\n                                                  label=\"Choose Time\"\n                                                  value={initialToTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.to}\n\n                                                  onChange={(newTime) => {\n                                                    formik.handleChange({\n                                                      target: {\n                                                        name: `shift_to_time_${shift.id}_${day}`,\n                                                        value: newTime,\n                                                      },\n                                                    });\n                                                    handleToTimeChange(day, newTime, shift.id);\n                                                  }}          \n                                                  onClose={(event) => handleToTimeClose(event, shift.id)}                         \n                                                  viewRenderers={{\n                                                    hours: renderTimeViewClock,\n                                                    minutes: renderTimeViewClock,\n                                                    seconds: renderTimeViewClock,\n                                                  }}\n                                                /> */}\n\n                                                  <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_to_time_${shift.id}_${day}`] ? 'date-error' : ''}`}>\n                                                    <Flatpickr\n                                                      disabled={isReadOnly}\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_to_time_${shift.id}_${day}`}\n                                                      value={initialToTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.to}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_to_time_${shift.id}_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleToTimeChange(day, newTime, shift.id);\n                                                      }}\n                                                     \n                                                      onClose={(event) => handleToTimeClose({}, shift.id)}\n                                                      className=\"timer form-control\"\n                                                      options={{\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: \"H:i\",\n                                                        altInput: true ,\n                                                        altFormat: \"h:i K\",\n                                                        disableMobile: true\n                                                      }}\n                                                    />             \n                                                    {formik.errors[`shift_to_time_${shift.id}_${day}`] ? (<p className=\"\">{formik.errors[`shift_to_time_${shift.id}_${day}`]}</p>) : null}    \n                                                </div>\n                                              </div>\n\n                                              \n\n                                              {/* {formik.errors[`shift_to_time_${shift.id}_${day}`] ? (\n        <div>{formik.errors[`shift_to_time_${shift.id}_${day}`]}</div>\n      ) : null} */}\n\n                                              <div className=\"col-xl-1 col-md-1 text-center\"><p className=\"mt-2 paragraph-sm-1\" id={`shift_time_diff_hrs_${shift.id}`}>{commonDiffHours[shift.id]?.[day] || '0'}h</p></div>\n\n                                              {/* <div className=\"col-xl-2 col-md-2 col-2 mt-2\">\n\n                                                <div className=\"form-check\">\n                                                  <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`weekOffCheck_${shift.id}_${day}`} value=\"\" onChange={() => handleWeekOffCheckbox(day, shift.id)} checked={weekOffChecked[shift.id]?.[day]} disabled={allValuesSelected[shift.id]?.[day] || isReadOnly} />\n                                                  <label className=\"form-check-label\" htmlFor={`weekOffCheck_${shift.id}_${day}`}></label>\n                                                </div>\n                                              </div> */}\n                                              <div className=\"col-xl-2 col-md-2\"></div>\n                                              {/* {occasionalVisible[shift.id]?.[day] && (\n                                                <div className=\"col-xl-10 mt-2\" id={`occasional_${shift.id}_${day}`}>\n                                                  <div className=\"d-flex\">\n                                                    <p className=\"paragraph-sm-2 text-primary\">Do you want to Occasional Working On {day}? </p>\n                                                    <div className=\"form-check mx-2\">\n                                                      <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`occasional_working_check_${shift.id}_${day}`} value=\"\" onChange={() => handleOccasionalWorkingCheckbox(day, shift.id)} checked={occasionalDayVisible[shift.id]?.[day]}/>\n                                                      <label className=\"form-check-label\" htmlFor={`occasional_working_check_${shift.id}_${day}`}></label>\n                                                    </div>\n                                                  </div>\n                                                </div>\n                                              )}\n                                              {occasionalVisible[shift.id]?.[day] && occasionalDayVisible[shift.id]?.[day] && (\n                                                <div className=\"row mt-2\" id={`occasional_working_day_${shift.id}_${day}`}>\n                                                  <div className=\"col-xl-2\"></div>\n                                                  <div className=\"col-xl-7\">\n                                                    <MultiSelect value={selectedWeeksOfMonths[shift.id]?.[day] || ''} options={groupedOfWeeksNumbers} onChange={(e) => handleMultiSelectWeeksChange(e, day, shift.id)} optionLabel=\"label\"\n                                                      optionGroupLabel=\"label\" optionGroupChildren=\"items\"\n                                                      placeholder={`Choose Working ${day}s`} display=\"chip\" className=\"w-100 md:w-20rem ps-check-drop\" />\n                                                  </div>\n                                                </div>\n                                              )} */}\n                                            </div>\n                                          );\n                                        })}\n                                  </td>\n\n                                  <td colSpan={3} className=\"align-top\">\n                                    <div className=\"ps-3 pt-3\">\n                                      {/* <div className=\"d-flex mb-4\"> */}\n                                        {/* <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mt-2\"><img className=\"pe-2\" src={breakimg} alt=\"\" />Break Time</label> */}\n                                     \n                                        {/* <input name={`shift_break_time_${shift.id}`} placeholder=\"minute\" type=\"number\" maxLength=\"3\" className=\"form-control ps-rounded-7 w-20 ms-3\" value={formik.values[`shift_break_time_${shift.id}`]} onChange={formik.handleChange}/> */}\n                                        {/* error input start  */}\n                                        {/* <div className=\"ps-form-group inp-warning ps-warn-col\"> \n                                          <input type=\"text\" className=\"form-control ps-rounded-7 w-20 ms-3 \" placeholder=\"12h\"/>\n                                          <p className=\"ms-3\">Break time should be less than the shift duration.</p>\n                                        </div> */}\n                                        {/* error input end  */}\n\n                                        {/* {formik.touched[`shift_break_time_${shift.id}`] && formik.errors[`shift_break_time_${shift.id}`] ? (\n                                          <div className=\"error\">{formik.errors[`shift_break_time_${shift.id}`]}</div>\n                                        ) : null} */}\n\n                                      {/* </div> */}\n                                      <div className=\"\">\n                                        <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mb-3\"><img className=\"pe-2 img-fluid\" src={remarkimg} alt=\"\" />Remark</label>\n                                        <textarea disabled={isReadOnly} className=\"form-control ps-rounded-7\" rows=\"5\" placeholder=\"Write your remarks or comments here...\" id={`shift_description_${shift.id}`} value={formik.values[`shift_description_${shift.id}`] || ''}\n                  onChange={formik.handleChange}/>\n                                      </div>\n                                      <div className=\"mt-3\">\n                                      {/* onClick={openModal} */}\n                                      {!isReadOnly &&\n                                        <button type=\"submit\" className=\"btn btn-blue\" disabled={error ? null : loading ? true : false}>  {error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Save Changes</button>\n                                      }\n                                      {formik.errors[`shift_common_error`] ? (<p className=\"text-danger\">{formik.errors[`shift_common_error`]}</p>) : null}\n                                      </div>\n                                    </div>\n                                  </td>\n                                </tr>\n                              }\n                              \n                              \n\n                              </React.Fragment>\n                            ))}\n                          </tbody>\n                        </Table>\n\n                        </form>\n                        ) :(\n                          <div className=\"\">\n                            <Skeleton count={8} height={60}/>\n                          </div>\n                        )}\n\n                        {noShiftYet && shifts.length === 0 && !isFirstRowOpen ? (\n                            <Table className=\"table-striped align-middle table-nowrap mb-0 \">\n                            <tbody>\n                              <tr className=\"\">\n                                  <td colSpan={5} className=\"ct-td-nodata\">\n                                      <div className=\"d-flex align-items-center justify-content-center flex-column\">\n                                          <svg width=\"58\" height=\"58\" viewBox=\"0 0 58 58\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                              <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                                              <path d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\" fill=\"#2381D9\" />\n                                          </svg>\n                                          <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                                          <p>Try Adjusting the filters again</p>\n                                      </div>\n                                  </td>\n                              </tr>\n                            </tbody>\n                            </Table>\n                        ) : ''}\n                      </div>\n                    </Col>\n\n                  </div>\n                </div>\n                {/* new design end */}\n              </Col>\n            </Row>\n\n            {/* offcanvas start  */}\n            <Offcanvas\n              isOpen={isRight2}\n              direction=\"end\"\n              toggle={toggleRightCanvas2}\n              id=\"offcanvasRight\"\n              className=\"border-bottom custom-offcavas\"\n              style={{ width: \"600px\" }}\n            >\n              <AddShiftSidebarNew\n                isRight2={isRight2}\n                toggleRightCanvas2={toggleRightCanvas2}\n                shiftDetail={shiftDetail}\n                isEdit={isEdit}\n              />\n            </Offcanvas>\n\n            <Offcanvas\n              isOpen={isRight}\n              direction=\"end\"\n              toggle={toggleRightCanvas}\n              id=\"offcanvasRight\"\n              className=\"border-bottom custom-offcavas\"\n              style={{ width: \"600px\" }}\n            >\n              <AddEmpSideBar\n                isRight={isRight}\n                toggleRightCanvas={toggleRightCanvas}\n              />\n            </Offcanvas>\n\n            <Modal isOpen={isModalOpen} toggle={closeModal} centered={true} className=\"ct-modal-md\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeModal}>\n                Week Off Details\n                <p className=\"paragraph-sm-1 ps-text-grey mb-0\">Please confirm or modify the scheduled week offs for this shift.</p>\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <div className=\"row mb-3\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-1 ps-text-grey\">Saturday<sub>(Occasional working)</sub></p></div>\n                  <div className=\"col-xl-6 col-md-6\">\n                    <div className=\"d-flex week-square-wrap\">\n                      <p className=\"table-week-square square-grey-border-circle me-2\">1</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">2</p>\n                      <p className=\"table-week-square square-grey-border-circle me-2\">3</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">4</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-1 ps-text-grey\">Saturday</p></div>\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2\">Every Week Off</p></div>\n                </div>\n\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeModal}\n                >\n                  Modify\n                </button>\n\n                <button type=\"button\" className=\"btn w-sm btn-blue\" id=\"delete-record\" onClick={openModal2}>Confirm</button>\n              </div>\n            </Modal>\n\n            {/* Success created shift             */}\n            <Modal isOpen={isModalOpen2} toggle={closeModal2} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeModal2}>\n                Shift Created successfully!\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <p>If you'd like, you can assign it to employees now or choose \"Later\".</p>\n\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeModal2}\n                >\n                  Later\n                </button>\n\n                <Link to=\"/employees-shifts-assign-new\">\n                <button type=\"button\" className=\"btn w-sm btn-blue\" >Assign Shift</button></Link>\n              </div>\n            </Modal>\n\n            {/* conform save start */}\n            <Modal isOpen={isconform} toggle={closeConformModal} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeConformModal}>\n                Week Off Details\n                <p className=\"paragraph-sm-1 ps-text-grey mb-0\">Please confirm or modify the scheduled week offs for this shift.</p>\n              </ModalHeader>\n\n              <ModalBody className=\"p-3\">\n                {daysOfWeek && daysOfWeek.map((day,index) => (\n                  <React.Fragment key={`confirm-${day}-${index}`}>\n                  \n                    {weekOffChecked[modelShiftId]?.[day] === true && selectedWeeksOfMonths[modelShiftId]?.[day]?.length > 0 && (\n                      <div className=\"row mb-3\">\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2 ps-text-grey\">{day}<sub>(Occasional working)</sub></p>\n                        </div>\n                        <div className=\"col-xl-6 col-md-6\">\n                          <div className=\"d-flex week-square-wrap\">\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(1) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>1</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(2) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>2</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(3) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>3</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(4) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>4</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(5) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>5</p>\n                            </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {weekOffChecked[modelShiftId]?.[day] === true && (!selectedWeeksOfMonths[modelShiftId]?.[day] || selectedWeeksOfMonths[modelShiftId]?.[day]?.length === 0) && (\n\n                      <div className=\"row mb-3\">\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2 ps-text-grey\">{day}</p>\n                        </div>\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2\">Every Week Off</p>\n                        </div>\n                      </div>\n                    )}\n                  </React.Fragment>\n                ))}\n              </ModalBody>\n\n              {/* <ModalBody className=\"p-3\">\n\n                \n                <div className=\"row mb-2\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2 ps-text-grey\">Saturday<sub>(Occasional working)</sub></p></div>\n                  <div className=\"col-xl-6 col-md-6\">\n                    <div className=\"d-flex week-square-wrap\">\n                      <p className=\"table-week-square square-grey-border-circle me-2\">1</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">2</p>\n                      <p className=\"table-week-square square-grey-border-circle me-2\">3</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">4</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2 ps-text-grey\">Saturday</p></div>\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2\">Every Week Off</p></div>\n\n                </div>\n\n              </ModalBody> */}\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeConformModal}\n                >\n                  Modify\n                </button>\n\n                <button type=\"button\" disabled={error ? null : loading ? true : false} className=\"btn w-sm btn-blue\" id=\"delete-record\" onClick={() => handleSave(modelShiftId,1)}>{error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Confirm</button>\n              </div>\n            </Modal>\n            {/* conform save end */}\n\n            {/* delet modal start  */}\n            <Modal isOpen={isdelet} toggle={closeDeletModal} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeDeletModal}>\n                Delete Shift\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <p>Are you sure you want to delete this shift?This action cannot be undone. </p>\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeDeletModal}\n                >\n                  Cancel\n                </button>\n\n                <button type=\"button\" className=\"btn w-sm btn-blue\" id=\"delete-record\">Delete</button>\n              </div>\n            </Modal>\n            {/* delet modal end */}\n\n            {/*set working hour sidebar start  */}\n            <Offcanvas isOpen={workHour} toggle={workHourFun} direction=\"end\" className=\"border-bottom custom-offcavas\" style={{ width: \"500px\" }}>\n              < SetWokringHoursForm toggleRightCanvas2={workHourFun} workingHrsDetail={workingHrsData} />\n            </Offcanvas>\n\n            <Offcanvas isOpen={shiftLogs} toggle={shiftLogsFun} direction=\"end\" className=\"border-bottom custom-offcavas\" style={{ width: \"600px\" }}>\n               <ShiftLogSideBar shiftLogsFun={shiftLogsFun} filterNone={'filterNone'} shiftLogsDetails={shiftLogsDetails} />\n            </Offcanvas>\n            {/*set working hour sidebar start  */}\n\n            <ConfirmationModalNew\n                show={showModal}\n                onConfirmClick={formik.handleSubmit}\n                onCloseClick={closeConfirmationModal}\n                heading={\"Save Changes?\"}\n                infoText={modalConfirmationText}\n                showConfirmBtn={true}\n                closeBtnTitle=\"Proceed Anyway\"\n                confirmBtnTitle=\"Yes, Save\"\n                isConfirmBtnLoading={loading}\n            />\n\n\n            <ConfirmationModalNew\n              show={showShiftDeleteFail}\n              onCloseClick={() => {setShowShiftDeleteFail(false)}}\n              heading={deleteModalData?.title}\n              infoText={deleteModalData?.description}\n              showConfirmBtn={false}\n              closeBtnTitle=\"Ok\"\n              isConfirmBtnLoading={loading}\n            />\n        </div>\n        </div>\n      </React.Fragment>\n  );\n};\n\nexport default ShiftTimeNew;","structuredPatch":[{"oldStart":42,"oldLines":7,"newStart":42,"newLines":7,"lines":[" import move from \"../../assets/images/svg/move.svg\";"," import { MultiSelect } from 'primereact/multiselect';"," ","-//Import Breadcrumb","+// Import breadcrumb navigation and custom components"," import BreadCrumb from \"../../Components/Common/BreadCrumb\";"," import AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";"," import AddShiftSidebar from \"./AddShiftSidebar\";"]},{"oldStart":55,"oldLines":7,"newStart":55,"newLines":7,"lines":[" import utc from 'dayjs/plugin/utc';"," import timezone from 'dayjs/plugin/timezone';"," ","-//redux","+// Redux state management imports"," import { useSelector, useDispatch } from \"react-redux\";"," "," import { toast, ToastContainer } from \"react-toastify\";"]},{"oldStart":89,"oldLines":6,"newStart":89,"newLines":10,"lines":[" "," import {userHasRights, isSuperAdmin, moduleName}  from \"../../helpers/rights_helper\""," ","+/**","+ * Main ShiftTimeNew functional component","+ * Manages shift creation, editing, assignment and roster operations","+ */"," const ShiftTimeNew = () => {","   const [isShitPageDropdown, setShitPageDropdown] = useState(false);","   const [shiftLogsDetails, setShiftLogsDetails] = useState(null);"]},{"oldStart":113,"oldLines":7,"newStart":117,"newLines":7,"lines":["     setIsRight2(!isRight2);","   }, [isRight2]);"," ","-  // Default Tabs","+  // Tab management for different shift views","   const [activeTab, setactiveTab] = useState(\"1\");","   const toggle = (tab) => {","     if (activeTab !== tab) {"]},{"oldStart":126,"oldLines":14,"newStart":130,"newLines":18,"lines":["     setCode(!codee);","   };"," ","-  const [shiftDetail, setshiftDetail] = useState([]);","-  const [isEdit, setIsEdit] = useState(false);","-  const [deleteModalData, setDeleteModalData] = useState(null);","+  // Shift management state variables","+  const [shiftDetail, setshiftDetail] = useState([]); // Current shift details","+  const [isEdit, setIsEdit] = useState(false); // Edit mode flag","+  const [deleteModalData, setDeleteModalData] = useState(null); // Delete confirmation data"," ","-  //b code","+  // Component state and Redux integration"," ","+  // Redux dispatch and navigation hooks","   const dispatch = useDispatch();","   const navigate = useNavigate();","+  ","+  // Extract shift-related state from Redux store","   const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =","     useSelector((state) => ({","       shifts: state.Shift.shifts,"]},{"oldStart":157,"oldLines":6,"newStart":165,"newLines":7,"lines":["   //     isShiftSwitchDecisionTaken = parseInt(authUser.data.shift_switch_decision_taken) || 0;","   // }","   ","+  // Check if user has made shift switch decision, redirect if not","   useEffect(() => {"," ","     const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));"]},{"oldStart":174,"oldLines":6,"newStart":183,"newLines":7,"lines":["   }, [navigate]);","   "," ","+  // Load shifts and working hours data when component mounts or when reset flag is set","   useEffect(() => {","     if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {","       dispatch(onGetShifts());"]},{"oldStart":190,"oldLines":7,"newStart":200,"newLines":7,"lines":[" ","   ","   ","-  // Update Data","+  // Handle shift editing - processes shift data for editing mode","   const handleEditShift = useCallback(","     (arg) => {","       const shift = arg;"]}],"userModified":false}}
{"parentUuid":"fd054c7d-eaaf-492d-a8f2-0bdad67a8d58","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_011B3PzHwxtwbaEYzFCqEBGL","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017USHSLiwM1eDa3uj4JDxba","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"completed"},{"id":"2","content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"in_progress"},{"id":"3","content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"pending"},{"id":"4","content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending"},{"id":"5","content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending"},{"id":"6","content":"Continue processing remaining chunks until file is complete","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":1661,"cache_read_input_tokens":23194,"output_tokens":261,"service_tier":"standard"}},"requestId":"req_011CRrztcmLkndRzxdpSLp9W","uuid":"f5170239-7de7-411d-86ae-9e7fa3fa150f"}
{"parentUuid":"f5170239-7de7-411d-86ae-9e7fa3fa150f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017USHSLiwM1eDa3uj4JDxba","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"adab9287-e5e8-4822-81fb-6b47f03d5401","timestamp":"2025-08-06T19:24:07.077Z","toolUseResult":{"oldTodos":[{"content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"in_progress","id":"1"},{"content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"pending","id":"2"},{"content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"pending","id":"3"},{"content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending","id":"4"},{"content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending","id":"5"},{"content":"Continue processing remaining chunks until file is complete","status":"pending","id":"6"}],"newTodos":[{"content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"completed","id":"1"},{"content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"in_progress","id":"2"},{"content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"pending","id":"3"},{"content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending","id":"4"},{"content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending","id":"5"},{"content":"Continue processing remaining chunks until file is complete","status":"pending","id":"6"}]}}
{"parentUuid":"adab9287-e5e8-4822-81fb-6b47f03d5401","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01KFmaJuCqmAFYDJzhrcXubo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me read lines 201-400 and add comments:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1294,"cache_read_input_tokens":24855,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRrzuDW9FetpAwWbVVr6J","uuid":"93fa823a-de73-4ea1-8f65-642a5258a2a3"}
{"parentUuid":"93fa823a-de73-4ea1-8f65-642a5258a2a3","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01KFmaJuCqmAFYDJzhrcXubo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01AKg5uGGXTiYcwTHG3SsL2n","name":"Read","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","offset":201,"limit":200}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1294,"cache_read_input_tokens":24855,"output_tokens":128,"service_tier":"standard"}},"requestId":"req_011CRrzuDW9FetpAwWbVVr6J","uuid":"ddc80e60-d56c-4805-bf48-cd7133666f32"}
{"parentUuid":"ddc80e60-d56c-4805-bf48-cd7133666f32","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01AKg5uGGXTiYcwTHG3SsL2n","type":"tool_result","content":"   201→  \n   202→  \n   203→  // Handle shift editing - processes shift data for editing mode\n   204→  const handleEditShift = useCallback(\n   205→    (arg) => {\n   206→      const shift = arg;\n   207→\n   208→      let updatedShiftDetail = {};\n   209→\n   210→      if (shift && shift.shift_daywise_data) {\n   211→        const daywiseData = JSON.parse(shift.shift_daywise_data);\n   212→        daywiseData.forEach(dayData => {\n   213→          const { day, from_time, to_time, is_weekoff } = dayData;\n   214→          updatedShiftDetail[`shift_from_time_${day}`] = from_time;\n   215→          updatedShiftDetail[`shift_to_time_${day}`] = to_time;\n   216→          updatedShiftDetail[`is_weekoff_${day}`] = is_weekoff;\n   217→        });\n   218→      }\n   219→\n   220→      setshiftDetail({\n   221→        id: shift.id,\n   222→        shift_name: shift.name,\n   223→        shift_description: shift.description,\n   224→        shift_from_time: shift.shift_from_time,\n   225→        shift_to_time: shift.shift_to_time,\n   226→        default_shift: shift.default_shift,\n   227→        ...updatedShiftDetail\n   228→\n   229→      });\n   230→\n   231→      setIsEdit(true);\n   232→      toggleRightCanvas2();\n   233→    },\n   234→    [toggleRightCanvas2]\n   235→  );\n   236→\n   237→  const [deleteModal, setDeleteModal] = useState(false);\n   238→  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n   239→\n   240→  const onClickDelete = (shift) => {\n   241→\n   242→    if(shift.employee_count > 0) {\n   243→\n   244→      setShowShiftDeleteFail(true);\n   245→      setDeleteModalData({\n   246→        name: shift.name,\n   247→        title: \"Shift Delete Fail\",\n   248→        description: (\n   249→          <>\n   250→            Cannot delete the shift <b>{shift.name}</b>, <br/> because it is currently assigned to <b>{shift.employee_count}</b> employees, <br/> Please move these employees to a different shift and try again.\n   251→          </>\n   252→        ),\n   253→      });\n   254→\n   255→    } else {\n   256→\n   257→      setshiftDetail(shift);\n   258→      setDeleteModal(true);\n   259→      setDeleteModalData({\n   260→        name: shift.name,\n   261→        title: \"Delete Shift?\",\n   262→        description: (\n   263→          <>\n   264→            Are you sure, You want to delete <br /> <span className=\"ps-word-break\">{shift.name}?</span>\n   265→          </>\n   266→        ),\n   267→      });\n   268→    }\n   269→  };\n   270→\n   271→  useEffect(() => {\n   272→    if (isShiftDeleted) {\n   273→      setDeleteModal(false);\n   274→      dispatch(afterSaveShift());\n   275→    }\n   276→  }, [isShiftDeleted, dispatch])\n   277→\n   278→  const handleDeleteShift = () => {\n   279→    if (shiftDetail) {\n   280→      dispatch(deleteShiftNew(shiftDetail.id));\n   281→      //setDeleteModal(false);\n   282→    }\n   283→  };\n   284→\n   285→  const [expandedRow, setExpandedRow] = useState(null);\n   286→\n   287→  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n   288→\n   289→  const [isModalOpen, setIsModalOpen] = useState(false);\n   290→\n   291→  const [workHour, setworkHour] = useState(false);\n   292→  const workHourFun = () => {\n   293→      setworkHour(!workHour);\n   294→  }\n   295→\n   296→  const [shiftLogs, setShiftLogs] = useState(false);\n   297→  const shiftLogsFun = () => {\n   298→      setShiftLogs(!shiftLogs);\n   299→  }\n   300→\n   301→\n   302→  const closeModal = () => {\n   303→    setIsModalOpen(false);\n   304→  };\n   305→\n   306→  const openModal = () => {\n   307→    setIsModalOpen(true);\n   308→  };\n   309→\n   310→  const [isModalOpen2, setIsModalOpen2] = useState(false);\n   311→  const closeModal2 = () => {\n   312→    setIsModalOpen2(false);\n   313→  };\n   314→\n   315→  const openModal2 = () => {\n   316→    setIsModalOpen2(true);\n   317→    setIsModalOpen(false);\n   318→  };\n   319→\n   320→  const [isconform, setConform] = useState(false);\n   321→\n   322→  const closeConformModal = () => {\n   323→    setConform(false);\n   324→  };\n   325→\n   326→  const openConformModal = () => {\n   327→    setConform(true);\n   328→  };\n   329→\n   330→  const [isdelet, setisdelet] = useState(false);\n   331→  const closeDeletModal = () => {\n   332→    setisdelet(false);\n   333→  };\n   334→  const openDeletModal = () => {\n   335→    setisdelet(true);\n   336→  };\n   337→\n   338→\n   339→  const [initialFromTimes, setInitialFromTimes] = useState({});\n   340→  const [initialToTimes, setInitialToTimes] = useState({});\n   341→  const [timeValues, setTimeValues] = useState({});\n   342→  const [commonDiffHours, setCommonDiffHours] = useState({});\n   343→\n   344→  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n   345→  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n   346→\n   347→  const [occasionalVisible, setOccasionalVisible] = useState({});\n   348→  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n   349→\n   350→  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n   351→\n   352→  const [allValuesSelected, setAllValuesSelected] = useState({});\n   353→\n   354→  const [weekOffChecked, setWeekOffChecked] = useState({}); \n   355→\n   356→  //from closed\n   357→  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {\n   358→\n   359→      let day = updatedState[shiftId]?.daz || '';\n   360→      let newTime = updatedState[shiftId]?.newTimez || '';\n   361→\n   362→      if( day !== '' && newTime !== '') {\n   363→\n   364→        if (!initialFromTimes[shiftId]?.[day]) {\n   365→          setInitialFromTimes(prevState => ({\n   366→            ...prevState,\n   367→            [shiftId]: {\n   368→              ...prevState[shiftId],\n   369→              [day]: newTime,\n   370→            },\n   371→          }));\n   372→\n   373→          if(parseInt(shiftId) === 0) {\n   374→            daysOfWeek.forEach(copyDay => {\n   375→              if (copyDay !== day && !initialFromTimes[shiftId]?.[copyDay]) {\n   376→\n   377→                setTimeValues(prevState => ({\n   378→                  ...prevState,\n   379→                  [shiftId]: {\n   380→                    ...prevState[shiftId],\n   381→                    [copyDay]: {\n   382→                      ...(prevState[shiftId]?.[copyDay] || {}),\n   383→                      from: newTime,\n   384→                    },\n   385→                  },\n   386→                }));\n   387→\n   388→                setInitialFromTimes(prevState => ({\n   389→                  ...prevState,\n   390→                  [shiftId]: {\n   391→                    ...prevState[shiftId],\n   392→                    [copyDay]: newTime,\n   393→                  },\n   394→                }));\n   395→                \n   396→                let diffHours = 0;\n   397→                if(initialToTimes[shiftId]?.[copyDay]) {\n   398→                  const fromTime = dayjs(newTime);\n   399→                  const toTime = dayjs(initialToTimes[shiftId]?.[copyDay]);\n   400→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"12f0e178-8f13-4254-9523-e910de6450ba","timestamp":"2025-08-06T19:24:07.077Z","toolUseResult":{"type":"text","file":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","content":"  \n  \n  // Handle shift editing - processes shift data for editing mode\n  const handleEditShift = useCallback(\n    (arg) => {\n      const shift = arg;\n\n      let updatedShiftDetail = {};\n\n      if (shift && shift.shift_daywise_data) {\n        const daywiseData = JSON.parse(shift.shift_daywise_data);\n        daywiseData.forEach(dayData => {\n          const { day, from_time, to_time, is_weekoff } = dayData;\n          updatedShiftDetail[`shift_from_time_${day}`] = from_time;\n          updatedShiftDetail[`shift_to_time_${day}`] = to_time;\n          updatedShiftDetail[`is_weekoff_${day}`] = is_weekoff;\n        });\n      }\n\n      setshiftDetail({\n        id: shift.id,\n        shift_name: shift.name,\n        shift_description: shift.description,\n        shift_from_time: shift.shift_from_time,\n        shift_to_time: shift.shift_to_time,\n        default_shift: shift.default_shift,\n        ...updatedShiftDetail\n\n      });\n\n      setIsEdit(true);\n      toggleRightCanvas2();\n    },\n    [toggleRightCanvas2]\n  );\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  const onClickDelete = (shift) => {\n\n    if(shift.employee_count > 0) {\n\n      setShowShiftDeleteFail(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Shift Delete Fail\",\n        description: (\n          <>\n            Cannot delete the shift <b>{shift.name}</b>, <br/> because it is currently assigned to <b>{shift.employee_count}</b> employees, <br/> Please move these employees to a different shift and try again.\n          </>\n        ),\n      });\n\n    } else {\n\n      setshiftDetail(shift);\n      setDeleteModal(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Delete Shift?\",\n        description: (\n          <>\n            Are you sure, You want to delete <br /> <span className=\"ps-word-break\">{shift.name}?</span>\n          </>\n        ),\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])\n\n  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };\n\n  const [expandedRow, setExpandedRow] = useState(null);\n\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }\n\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const [isModalOpen2, setIsModalOpen2] = useState(false);\n  const closeModal2 = () => {\n    setIsModalOpen2(false);\n  };\n\n  const openModal2 = () => {\n    setIsModalOpen2(true);\n    setIsModalOpen(false);\n  };\n\n  const [isconform, setConform] = useState(false);\n\n  const closeConformModal = () => {\n    setConform(false);\n  };\n\n  const openConformModal = () => {\n    setConform(true);\n  };\n\n  const [isdelet, setisdelet] = useState(false);\n  const closeDeletModal = () => {\n    setisdelet(false);\n  };\n  const openDeletModal = () => {\n    setisdelet(true);\n  };\n\n\n  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});\n\n  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  const [weekOffChecked, setWeekOffChecked] = useState({}); \n\n  //from closed\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {\n\n      let day = updatedState[shiftId]?.daz || '';\n      let newTime = updatedState[shiftId]?.newTimez || '';\n\n      if( day !== '' && newTime !== '') {\n\n        if (!initialFromTimes[shiftId]?.[day]) {\n          setInitialFromTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [day]: newTime,\n            },\n          }));\n\n          if(parseInt(shiftId) === 0) {\n            daysOfWeek.forEach(copyDay => {\n              if (copyDay !== day && !initialFromTimes[shiftId]?.[copyDay]) {\n\n                setTimeValues(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: {\n                      ...(prevState[shiftId]?.[copyDay] || {}),\n                      from: newTime,\n                    },\n                  },\n                }));\n\n                setInitialFromTimes(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: newTime,\n                  },\n                }));\n                \n                let diffHours = 0;\n                if(initialToTimes[shiftId]?.[copyDay]) {\n                  const fromTime = dayjs(newTime);\n                  const toTime = dayjs(initialToTimes[shiftId]?.[copyDay]);\n","numLines":200,"startLine":201,"totalLines":2166}}}
{"parentUuid":"12f0e178-8f13-4254-9523-e910de6450ba","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01AC4rhqTbWH1RYNCZVmQ9yG","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me add comments to this section:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":2605,"cache_read_input_tokens":26149,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRrzudkeqRK9VL1oRAdQx","uuid":"b20766fa-7f9c-4689-8631-7e18d6017d31"}
{"parentUuid":"b20766fa-7f9c-4689-8631-7e18d6017d31","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01AC4rhqTbWH1RYNCZVmQ9yG","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01NCvRYDXoH1V4mPdSALs1xf","name":"MultiEdit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","edits":[{"old_string":"  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  const onClickDelete = (shift) => {","new_string":"  // Delete modal state management\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  // Handle shift deletion with validation for assigned employees\n  const onClickDelete = (shift) => {"},{"old_string":"  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])","new_string":"  // Close delete modal and refresh data after successful deletion\n  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])"},{"old_string":"  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };","new_string":"  // Execute shift deletion\n  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };"},{"old_string":"  const [expandedRow, setExpandedRow] = useState(null);\n\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];","new_string":"  // UI state for expandable table rows\n  const [expandedRow, setExpandedRow] = useState(null);\n\n  // Days of week array for shift scheduling\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];"},{"old_string":"  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }","new_string":"  // Modal state management\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Working hours modal toggle\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  // Shift logs modal toggle\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }"},{"old_string":"  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});","new_string":"  // Time management state - tracks initial and current time values for shifts\n  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});"},{"old_string":"  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  const [weekOffChecked, setWeekOffChecked] = useState({});","new_string":"  // Additional time tracking for onChange events\n  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  // Occasional/flexible shift visibility controls\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  // Week selection for monthly schedules\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  // Selection state tracking\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  // Week-off checkbox state\n  const [weekOffChecked, setWeekOffChecked] = useState({});"},{"old_string":"  //from closed\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {","new_string":"  // Handle time picker close event for 'from' time - manages time synchronization across days\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":2605,"cache_read_input_tokens":26149,"output_tokens":1624,"service_tier":"standard"}},"requestId":"req_011CRrzudkeqRK9VL1oRAdQx","uuid":"c5678c1e-59f6-4c41-b0ea-492901cfaa8f"}
{"parentUuid":"c5678c1e-59f6-4c41-b0ea-492901cfaa8f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01NCvRYDXoH1V4mPdSALs1xf","type":"tool_result","content":"Applied 8 edits to /home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js:\n1. Replaced \"  const [deleteModal, setDeleteModal] = useState(f...\" with \"  // Delete modal state management\n  const [delete...\"\n2. Replaced \"  useEffect(() => {\n    if (isShiftDeleted) {\n    ...\" with \"  // Close delete modal and refresh data after suc...\"\n3. Replaced \"  const handleDeleteShift = () => {\n    if (shiftD...\" with \"  // Execute shift deletion\n  const handleDeleteSh...\"\n4. Replaced \"  const [expandedRow, setExpandedRow] = useState(n...\" with \"  // UI state for expandable table rows\n  const [e...\"\n5. Replaced \"  const [isModalOpen, setIsModalOpen] = useState(f...\" with \"  // Modal state management\n  const [isModalOpen, ...\"\n6. Replaced \"  const [initialFromTimes, setInitialFromTimes] = ...\" with \"  // Time management state - tracks initial and cu...\"\n7. Replaced \"  const [initialOnChangeFromTimes, setInitialOnCha...\" with \"  // Additional time tracking for onChange events\n...\"\n8. Replaced \"  //from closed\n  const handleFromTimeClose = (eve...\" with \"  // Handle time picker close event for 'from' tim...\""}]},"uuid":"cd8b01ea-13e7-4caa-8e16-163537a32554","timestamp":"2025-08-06T19:24:07.077Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","edits":[{"old_string":"  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  const onClickDelete = (shift) => {","new_string":"  // Delete modal state management\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  // Handle shift deletion with validation for assigned employees\n  const onClickDelete = (shift) => {","replace_all":false},{"old_string":"  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])","new_string":"  // Close delete modal and refresh data after successful deletion\n  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])","replace_all":false},{"old_string":"  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };","new_string":"  // Execute shift deletion\n  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };","replace_all":false},{"old_string":"  const [expandedRow, setExpandedRow] = useState(null);\n\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];","new_string":"  // UI state for expandable table rows\n  const [expandedRow, setExpandedRow] = useState(null);\n\n  // Days of week array for shift scheduling\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];","replace_all":false},{"old_string":"  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }","new_string":"  // Modal state management\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Working hours modal toggle\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  // Shift logs modal toggle\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }","replace_all":false},{"old_string":"  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});","new_string":"  // Time management state - tracks initial and current time values for shifts\n  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});","replace_all":false},{"old_string":"  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  const [weekOffChecked, setWeekOffChecked] = useState({});","new_string":"  // Additional time tracking for onChange events\n  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  // Occasional/flexible shift visibility controls\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  // Week selection for monthly schedules\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  // Selection state tracking\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  // Week-off checkbox state\n  const [weekOffChecked, setWeekOffChecked] = useState({});","replace_all":false},{"old_string":"  //from closed\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {","new_string":"  // Handle time picker close event for 'from' time - manages time synchronization across days\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {","replace_all":false}],"originalFileContents":"/**\n * ShiftTimeNew - Advanced shift management component\n * Handles shift creation, editing, and assignment with drag-and-drop functionality\n * Supports roster management, working hours configuration, and employee shift assignments\n */\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport {\n  Offcanvas,\n  OffcanvasBody,\n  OffcanvasHeader,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  TabPane,\n  TabContent,\n  Badge,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport noData from \"../../assets/images/no-data.svg\";\nimport SimpleBar from \"simplebar-react\";\nimport Flatpickr from \"react-flatpickr\";\nimport {\n  Container,\n  CardBody,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  Form,\n  Label,\n  Input,\n  Table,\n  Modal, ModalBody, ModalHeader, Spinner\n} from \"reactstrap\";\n\nimport stepUser from \"../../assets/images/svgIcons/stepUser.svg\";\nimport tableRight from \"../../assets/images/svgIcons/tableRight.svg\";\nimport tap from \"../../assets/images/svgIcons/TAP.svg\";\nimport more from \"../../assets/images/svgIcons/more_vert_.svg\";\nimport move from \"../../assets/images/svg/move.svg\";\nimport { MultiSelect } from 'primereact/multiselect';\n\n// Import breadcrumb navigation and custom components\nimport BreadCrumb from \"../../Components/Common/BreadCrumb\";\nimport AddEmpSideBar from \"../EmployeeManagement/AddEmpSideBar\";\nimport AddShiftSidebar from \"./AddShiftSidebar\";\nimport SetWokringHoursForm from \"./SetWokringHoursForm\";\nimport AddShiftSidebarNew from \"./AddShiftSidebarNew\";\nimport remarkimg from \"../../assets/images/svg/remark-image.svg\"\nimport breakimg from \"../../assets/images/svg/breaktime.svg\"\nimport arrowrightimg from \"../../assets/images/svg/arrow-right-grey.svg\"\nimport dayjs, { Dayjs } from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\n// Redux state management imports\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport withRouter from \"../../Components/Common/withRouter\";\n\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\n\nimport {\n  getShiftsNew as onGetShifts,\n  deleteShift as onDeleteShift,\n  afterSaveShift,\n  deleteShiftNew,\n  addNewShiftNew,\n  updateShiftNew,\n  resetValidationErrors,\n  onGetWorkingHours,\n  getShiftSwitchDecision\n} from \"../../store/actions\";\n\nimport DeleteModal from \"../../Components/Common/DeleteModal\";\nimport ConfirmationModalNew from \"../../Components/Common/ConfirmationModalNew\";\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Header from \"../../Layouts/Header\";\n\nimport * as Yup from \"yup\";\nimport { Formik, Field, useFormik, useField } from \"formik\";\nimport ShiftLogSideBar from \"./ShiftLogSideBar\";\n\nimport {userHasRights, isSuperAdmin, moduleName}  from \"../../helpers/rights_helper\"\n\n/**\n * Main ShiftTimeNew functional component\n * Manages shift creation, editing, assignment and roster operations\n */\nconst ShiftTimeNew = () => {\n  const [isShitPageDropdown, setShitPageDropdown] = useState(false);\n  const [shiftLogsDetails, setShiftLogsDetails] = useState(null);\n\n  const toggleDropdown = () => {\n    setShitPageDropdown(!isShitPageDropdown);\n  };\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const handleMouseEnter = () => {\n    setShowTooltip(!showTooltip);\n  };\n\n  const [isRight, setIsRight] = useState(false);\n  const toggleRightCanvas = () => {\n    setIsRight(!isRight);\n  };\n\n  const [isRight2, setIsRight2] = useState(false);\n\n  const toggleRightCanvas2 = useCallback(() => {\n    setIsRight2(!isRight2);\n  }, [isRight2]);\n\n  // Tab management for different shift views\n  const [activeTab, setactiveTab] = useState(\"1\");\n  const toggle = (tab) => {\n    if (activeTab !== tab) {\n      setactiveTab(tab);\n    }\n  };\n\n  const [codee, setCode] = useState(false);\n  const toggleCode = () => {\n    setCode(!codee);\n  };\n\n  // Shift management state variables\n  const [shiftDetail, setshiftDetail] = useState([]); // Current shift details\n  const [isEdit, setIsEdit] = useState(false); // Edit mode flag\n  const [deleteModalData, setDeleteModalData] = useState(null); // Delete confirmation data\n\n  // Component state and Redux integration\n\n  // Redux dispatch and navigation hooks\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n  // Extract shift-related state from Redux store\n  const { shifts, loading,  isShiftAdd, isShiftUpdate, isShiftCreated, error, noShiftYet, isShiftDeleted, isShiftDelLoading, isShiftSuccess, validationErrors, workingHrsData} =\n    useSelector((state) => ({\n      shifts: state.Shift.shifts,\n      isShiftCreated: state.Shift.isShiftCreated,\n      isShiftSuccess: state.Shift.isShiftListSuccess,\n      error: state.Shift.error,\n      noShiftYet: state.Shift.noShiftYet,\n      isShiftDelLoading: state.Shift.isShiftDelLoading,\n      isShiftDeleted: state.Shift.isShiftDelete,\n      loading: state.Shift.loading,\n      isShiftAdd: state.Shift.isShiftAdd,\n      isShiftUpdate: state.Shift.isShiftUpdate,\n      validationErrors: state.Shift.validationErrors,\n      workingHrsData: state.Shift.workingHrsData\n\n    }));\n\n  // let isShiftSwitchDecisionTaken = 0;\n\n  // if (authUser && authUser.data.shift_switch_decision_taken !== undefined) {\n  //     isShiftSwitchDecisionTaken = parseInt(authUser.data.shift_switch_decision_taken) || 0;\n  // }\n  \n  // Check if user has made shift switch decision, redirect if not\n  useEffect(() => {\n\n    const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"));\n\n    if (!authUser?.data?.shift_switch_decision_taken) {\n      navigate(\"/shiftEntryPage\");\n    }\n\n    // if( !isShiftSwitchDecisionTaken ) {\n    //   dispatch(getShiftSwitchDecision());\n    // } else if (isShiftSwitchDecisionTaken !== 1) {\n    //   navigate(\"/shiftEntryPage\");\n    // }\n\n  }, [navigate]);\n  \n\n  // Load shifts and working hours data when component mounts or when reset flag is set\n  useEffect(() => {\n    if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem('isResetShiftNewList') === 1) {\n      dispatch(onGetShifts());\n      sessionStorage.setItem('isResetShiftNewList',0)\n    }\n\n    if(shifts && shifts.length && workingHrsData === undefined) {\n      dispatch(onGetWorkingHours());\n    }\n  }, [dispatch, shifts, noShiftYet, workingHrsData]);\n\n  const [isFirstRowOpen, setIsFirstRowOpen] = useState(false);\n  const [modelShiftId, setModelShiftId] = useState(0);\n\n  \n  \n  // Handle shift editing - processes shift data for editing mode\n  const handleEditShift = useCallback(\n    (arg) => {\n      const shift = arg;\n\n      let updatedShiftDetail = {};\n\n      if (shift && shift.shift_daywise_data) {\n        const daywiseData = JSON.parse(shift.shift_daywise_data);\n        daywiseData.forEach(dayData => {\n          const { day, from_time, to_time, is_weekoff } = dayData;\n          updatedShiftDetail[`shift_from_time_${day}`] = from_time;\n          updatedShiftDetail[`shift_to_time_${day}`] = to_time;\n          updatedShiftDetail[`is_weekoff_${day}`] = is_weekoff;\n        });\n      }\n\n      setshiftDetail({\n        id: shift.id,\n        shift_name: shift.name,\n        shift_description: shift.description,\n        shift_from_time: shift.shift_from_time,\n        shift_to_time: shift.shift_to_time,\n        default_shift: shift.default_shift,\n        ...updatedShiftDetail\n\n      });\n\n      setIsEdit(true);\n      toggleRightCanvas2();\n    },\n    [toggleRightCanvas2]\n  );\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);\n\n  const onClickDelete = (shift) => {\n\n    if(shift.employee_count > 0) {\n\n      setShowShiftDeleteFail(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Shift Delete Fail\",\n        description: (\n          <>\n            Cannot delete the shift <b>{shift.name}</b>, <br/> because it is currently assigned to <b>{shift.employee_count}</b> employees, <br/> Please move these employees to a different shift and try again.\n          </>\n        ),\n      });\n\n    } else {\n\n      setshiftDetail(shift);\n      setDeleteModal(true);\n      setDeleteModalData({\n        name: shift.name,\n        title: \"Delete Shift?\",\n        description: (\n          <>\n            Are you sure, You want to delete <br /> <span className=\"ps-word-break\">{shift.name}?</span>\n          </>\n        ),\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (isShiftDeleted) {\n      setDeleteModal(false);\n      dispatch(afterSaveShift());\n    }\n  }, [isShiftDeleted, dispatch])\n\n  const handleDeleteShift = () => {\n    if (shiftDetail) {\n      dispatch(deleteShiftNew(shiftDetail.id));\n      //setDeleteModal(false);\n    }\n  };\n\n  const [expandedRow, setExpandedRow] = useState(null);\n\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [workHour, setworkHour] = useState(false);\n  const workHourFun = () => {\n      setworkHour(!workHour);\n  }\n\n  const [shiftLogs, setShiftLogs] = useState(false);\n  const shiftLogsFun = () => {\n      setShiftLogs(!shiftLogs);\n  }\n\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const [isModalOpen2, setIsModalOpen2] = useState(false);\n  const closeModal2 = () => {\n    setIsModalOpen2(false);\n  };\n\n  const openModal2 = () => {\n    setIsModalOpen2(true);\n    setIsModalOpen(false);\n  };\n\n  const [isconform, setConform] = useState(false);\n\n  const closeConformModal = () => {\n    setConform(false);\n  };\n\n  const openConformModal = () => {\n    setConform(true);\n  };\n\n  const [isdelet, setisdelet] = useState(false);\n  const closeDeletModal = () => {\n    setisdelet(false);\n  };\n  const openDeletModal = () => {\n    setisdelet(true);\n  };\n\n\n  const [initialFromTimes, setInitialFromTimes] = useState({});\n  const [initialToTimes, setInitialToTimes] = useState({});\n  const [timeValues, setTimeValues] = useState({});\n  const [commonDiffHours, setCommonDiffHours] = useState({});\n\n  const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});\n  const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});\n\n  const [occasionalVisible, setOccasionalVisible] = useState({});\n  const [occasionalDayVisible, setOccasionalDayVisible] = useState({});\n\n  const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);\n\n  const [allValuesSelected, setAllValuesSelected] = useState({});\n\n  const [weekOffChecked, setWeekOffChecked] = useState({}); \n\n  //from closed\n  const handleFromTimeClose = (event, shiftId, updatedState = {}) => {\n\n      let day = updatedState[shiftId]?.daz || '';\n      let newTime = updatedState[shiftId]?.newTimez || '';\n\n      if( day !== '' && newTime !== '') {\n\n        if (!initialFromTimes[shiftId]?.[day]) {\n          setInitialFromTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [day]: newTime,\n            },\n          }));\n\n          if(parseInt(shiftId) === 0) {\n            daysOfWeek.forEach(copyDay => {\n              if (copyDay !== day && !initialFromTimes[shiftId]?.[copyDay]) {\n\n                setTimeValues(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: {\n                      ...(prevState[shiftId]?.[copyDay] || {}),\n                      from: newTime,\n                    },\n                  },\n                }));\n\n                setInitialFromTimes(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: newTime,\n                  },\n                }));\n                \n                let diffHours = 0;\n                if(initialToTimes[shiftId]?.[copyDay]) {\n                  const fromTime = dayjs(newTime);\n                  const toTime = dayjs(initialToTimes[shiftId]?.[copyDay]);\n\n                  diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n\n                  if (diffHours <= 0) {\n                    diffHours = 24 + diffHours;\n                  }\n                  diffHours = Math.round(diffHours * 10) / 10;\n                }\n                \n                setCommonDiffHours(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: diffHours,\n                  },\n                }));\n\n              }\n            });\n          }\n        }\n\n        setTimeValues(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: {\n              ...prevState[shiftId][day],\n              from: newTime,\n            },\n          },\n        }));\n\n        let fromValue = newTime;\n        let toValue = timeValues[shiftId]?.[day]?.to;\n        let fromTime;\n        let toTime;\n        let diffHours = 0;\n\n        if(toValue) {\n          if(isFirstRowOpen) {\n            fromTime = dayjs(fromValue)\n            toTime = dayjs(toValue)\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          } else {\n            fromTime = dayjs(convertToDate(fromValue))\n            toTime = dayjs(convertToDate(toValue))\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          }\n        \n          if (diffHours <= 0) {\n            diffHours = 24 + diffHours;\n          }\n          diffHours = Math.round(diffHours * 10) / 10;\n        }\n\n        setCommonDiffHours(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: diffHours,\n          },\n        }));\n      }\n  }\n  //from onchange\n  const handleFromTimeChange = (day, newTime, shiftId) => {\n\n    setInitialOnChangeFromTimes(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        'newTimez': newTime,\n        'daz' : day\n      },\n    }));\n\n    const updatedState = {\n      ...initialOnChangeFromTimes,\n      [shiftId]: {\n        ...initialOnChangeFromTimes[shiftId],\n        'newTimez': newTime,\n        'daz': day,\n      },\n    };\n\n    handleFromTimeClose({}, shiftId, updatedState);\n  };\n  \n  //to closed\n  const handleToTimeClose = (event, shiftId, updatedState = {}) => {\n\n    let day = updatedState[shiftId]?.daz || '';\n    let newTime = updatedState[shiftId]?.newTimez || '';\n\n    if( day !== '' && newTime !== '') {\n      if (!initialToTimes[shiftId]?.[day]) {\n        setInitialToTimes(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: newTime,\n          },\n        }));\n\n        if(parseInt(shiftId) === 0) {\n          daysOfWeek.forEach(copyDay => {\n            \n            if (copyDay !== day && !initialToTimes[shiftId]?.[copyDay]) {\n\n              setTimeValues(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: {\n                    ...(prevState[shiftId]?.[copyDay] || {}),\n                    to: newTime,\n                  },\n                },\n              }));\n              \n              setInitialToTimes(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: newTime,\n                },\n              }));\n\n              let diffHours = 0;\n              if(initialFromTimes[shiftId]?.[copyDay]) {\n                const fromTime = dayjs(initialFromTimes[shiftId]?.[copyDay]);\n                const toTime = dayjs(newTime);\n                diffHours = fromTime ? toTime.diff(fromTime, 'hour',true) : 0;\n\n                if (diffHours <= 0) {\n                  diffHours = 24 + diffHours;\n                }\n                diffHours = Math.round(diffHours * 10) / 10;\n              }\n              \n              setCommonDiffHours(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: diffHours,\n                },\n              }));\n\n            }\n          });\n        }\n      }\n\n      setTimeValues(prevState => ({\n        ...prevState,\n        [shiftId]: {\n          ...prevState[shiftId],\n          [day]: {\n            ...prevState[shiftId][day],\n            to: newTime,\n          },\n        },\n      }));\n\n      let fromValue = timeValues[shiftId]?.[day]?.from;\n      let toValue = newTime;\n      let fromTime;\n      let toTime;\n      let diffHours = 0;\n\n      if(fromValue) {\n        if(isFirstRowOpen) {\n          fromTime = dayjs(fromValue)\n          toTime = dayjs(toValue)\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        } else {\n          fromTime = dayjs(convertToDate(fromValue))\n          toTime = dayjs(convertToDate(toValue))\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        }\n\n        if (diffHours <= 0) {\n          diffHours = 24 + diffHours;\n        }\n        diffHours = Math.round(diffHours * 10) / 10;\n      }\n\n      setCommonDiffHours(prevState => ({\n        ...prevState,\n        [shiftId]: {\n          ...prevState[shiftId],\n          [day]: diffHours,\n        },\n      }));\n    }\n  }\n  //to onchange\n  const handleToTimeChange = (day, newTime, shiftId) => {\n\n    setInitialOnChangeToTimes(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        'newTimez': newTime,\n        'daz' : day\n      },\n    }));\n\n    const updatedState = {\n      ...initialOnChangeToTimes,\n      [shiftId]: {\n        ...initialOnChangeToTimes[shiftId],\n        'newTimez': newTime,\n        'daz': day,\n      },\n    };\n\n    handleToTimeClose({}, shiftId, updatedState);\n    \n  };\n  \n  const groupedOfWeeksNumbers = [\n    {\n      items: [\n        { label: \"1st\", value:1},\n        { label: \"2nd\", value:2 },\n        { label: \"3rd\", value:3 },\n        { label: \"4th\", value:4 },\n        { label: \"5th\", value:5 },\n      ]\n    }\n  ];\n\n  \n  const handleMultiSelectWeeksChange = (e, day, shiftId) => {\n\n    setAllValuesSelected(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        [day]: e.value.length === groupedOfWeeksNumbers[0].items.length ? true : false,\n      },\n    }));\n\n    setSelectedOccasionalWorkingWeeks({\n      ...selectedWeeksOfMonths,\n      [shiftId]: {\n        ...selectedWeeksOfMonths[shiftId],\n        [day]: e.value,\n      },\n    })\n\n    setWeekOffChecked(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        [day]: e.value.length === groupedOfWeeksNumbers[0].items.length ? false : true,\n      },\n    }));\n\n    \n  };\n\n  const handleWeekOffCheckbox = (day, shiftId) => {\n    setWeekOffChecked(prevState => {\n      const newState = { ...prevState };\n  \n      if (!newState[shiftId]) {\n        newState[shiftId] = {};\n      }\n  \n      newState[shiftId][day] = !newState[shiftId][day];\n      return newState;\n    });\n  \n    setOccasionalVisible(prevVisible => {\n      const newVisible = { ...prevVisible };\n  \n      if (!newVisible[shiftId]) {\n        newVisible[shiftId] = {};\n      }\n  \n      newVisible[shiftId][day] = !newVisible[shiftId][day];\n      return newVisible;\n    });\n  };\n  \n  // const handleOccasionalWorkingCheckbox = (day, shiftId) => {\n  //   setOccasionalDayVisible(prevVisible => {\n  //     const newVisible = { ...prevVisible };\n  \n  //     if (!newVisible[shiftId]) {\n  //       newVisible[shiftId] = {};\n  //     }\n  \n  //     newVisible[shiftId][day] = !newVisible[shiftId][day];\n  //     return newVisible;\n  //   });\n  // };\n\n  dayjs.extend(utc);\n  // dayjs.extend(timezone);\n\n  const toggleAccordion = (rowIndex) => {\n\n    setModelShiftId(rowIndex)\n\n    if (expandedRow === rowIndex) {\n      setExpandedRow(null);\n    } else {\n      setExpandedRow(rowIndex);\n    }\n\n    if(shifts && shifts.length > 0 && rowIndex > 0) {\n      let matchedShift  = shifts.find((shift) => shift.id === parseInt(rowIndex));\n      let shiftId = rowIndex;\n      daysOfWeek.forEach((copyDay, index) => {\n\n        const dayData = JSON.parse(matchedShift.shift_daywise_data).find((data) => data.day === index + 1);\n\n        if (!dayData) {\n          return null;\n        }\n\n          setTimeValues(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: {\n                ...(prevState[shiftId]?.[copyDay] || {}),\n                from: dayData.from_time ? convertTo24Hrs(dayData.from_time) : null,\n                to: dayData.to_time ? convertTo24Hrs(dayData.to_time) : null,\n              },\n            },\n          }));\n\n          setInitialFromTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]:  convertTo24Hrs(dayData.from_time),\n            },\n          }));\n          \n\n          setInitialToTimes(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: convertTo24Hrs(dayData.to_time),\n            },\n          }));\n\n          let diffHours = 0;\n          if( dayData.from_time && dayData.to_time ) {\n            const fromTime = convertTo24Hrs(dayData.from_time)\n            const toTime = convertTo24Hrs(dayData.to_time)\n            diffHours = toTime && fromTime ? dayjs(toTime).diff(dayjs(fromTime), 'hour',true) : 0;\n\n            if (diffHours <= 0) {\n              diffHours = 24 + diffHours;\n            }\n            diffHours = Math.round(diffHours * 10) / 10;\n          }\n\n          setCommonDiffHours(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: diffHours,\n            },\n          }));\n          \n\n          setWeekOffChecked(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff ? true : false,\n            },\n          }));\n        \n          setOccasionalVisible(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff ? true : false,\n            },\n          }));\n\n          dayData.occasional_working_days = dayData.occasional_working_days ? dayData.occasional_working_days : [];\n\n          setOccasionalDayVisible(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.is_weekoff === 1 && dayData.occasional_working_days.length > 0 ? true : false,\n            },\n          }));\n\n\n          setAllValuesSelected(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.occasional_working_days && dayData.occasional_working_days.length === groupedOfWeeksNumbers[0].items.length ? true : false,\n            },\n          }));\n\n          setSelectedOccasionalWorkingWeeks(prevState => ({\n            ...prevState,\n            [shiftId]: {\n              ...prevState[shiftId],\n              [copyDay]: dayData.occasional_working_days,\n            },\n          }));\n      });\n    }\n  }; \n\n  const handleSave = async (shiftId = 0, isConfirmModel = 2) => {\n\n    if(isConfirmModel === 1) {\n      setConform(false);\n    }\n\n    if (isConfirmModel === 2 && ((Array.isArray(selectedWeeksOfMonths) && selectedWeeksOfMonths.length > 0) || (typeof selectedWeeksOfMonths === \"object\" && selectedWeeksOfMonths !== null && Object.keys(selectedWeeksOfMonths).length > 0))) {\n\n        let isAnyDayTrue = false;\n\n        for (const day of daysOfWeek) {\n          if (selectedWeeksOfMonths?.[shiftId]?.[day] && selectedWeeksOfMonths?.[shiftId]?.[day].length > 0) {\n            isAnyDayTrue = true;\n            break;\n          }\n        }\n\n        if( isAnyDayTrue ) {\n          setModelShiftId(shiftId);\n          setConform(true);\n          return false;\n\n        }\n\n    }\n\n    const shiftName = document.querySelector(`input[name=\"shift_name_${shiftId}\"]`).value;\n    const shiftDescriptions = document.querySelector(`textarea[id=\"shift_description_${shiftId}\"]`).value;\n    // const breakTime = document.querySelector(`input[name=\"shift_break_time_${shiftId}\"]`).value;\n\n    if (!shiftName.trim() ) {\n      return;\n    }\n\n    const shiftDaywiseData = daysOfWeek.map((day, index) => {\n      const fromTime = timeValues[shiftId]?.[day]?.from;\n      const toTime = timeValues[shiftId]?.[day]?.to;\n      return {\n        day: index + 1,\n        from_time: fromTime ? dayjs(fromTime).format(\"HH:mm\") : null,\n        to_time: toTime ? dayjs(toTime).format(\"HH:mm\") : null,\n        is_weekoff:0\n        // is_weekoff: weekOffChecked[shiftId]?.[day] ? 1 : 0,\n        // occasional_working_days: selectedWeeksOfMonths[shiftId]?.[day] ?? [],\n      };\n    });\n\n    let shiftData = {\n      'shift_daywise_data': shiftDaywiseData,\n      // 'break_time' : breakTime.length > 0 ? breakTime : 0 ,\n      'shift_name' : shiftName,\n      'shift_description': shiftDescriptions\n    }\n\n    if(shiftId > 0) {\n      shiftData.id  = shiftId;\n      dispatch(updateShiftNew(shiftData));\n    } else {\n      dispatch(addNewShiftNew(shiftData));\n    }\n\n  };\n\n  const getTotalMinutes = (dateObj)=>{\n    return dateObj.hour() * 60 + dateObj.minute();\n  }\n\n  const validationSchema = Yup.object().shape({\n    shift_name: Yup.array().of(Yup.string().required('Shift name is required')),\n    // shift_break_time: Yup.array().of(Yup.number().typeError('Break time must be a number').min(0, 'Break time must be greater than or equal to 0')),\n    // shift_description: Yup.array().of(Yup.string()),\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      shift_name: '',\n      // shift_break_time: '',\n      shift_description: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n\n      console.log(values);\n      \n     \n      const shiftNameErrors = {};\n\n\n      const shiftNameRegex = /^[A-Za-z0-9 ]+$/;\n      if (isFirstRowOpen) {\n        if (!values['shift_name_0']) { \n          shiftNameErrors['shift_name_0'] = 'Shift name is required';\n        }else if(!shiftNameRegex.test(values['shift_name_0'])){\n          shiftNameErrors['shift_name_0'] = 'Only letters and numbers are allowed';\n        }\n      } else {\n        //shifts.forEach(shift => {\n          const shiftNameKey = `shift_name_${modelShiftId}`;\n          if (!values[shiftNameKey]) {\n            shiftNameErrors[shiftNameKey] = 'Shift name is required';\n          }else if(!shiftNameRegex.test(values[shiftNameKey])){\n            shiftNameErrors[shiftNameKey] = 'Only letters and numbers are allowed';\n          }\n        //});\n      }\n\n      const fromToErrors = {};\n\n      // Validation for \"From\" and \"To\" times\n      daysOfWeek.forEach(day => {\n        const dayIndex = daysOfWeek.indexOf(day);\n        const prevDay = daysOfWeek[(dayIndex - 1 + 7) % 7];\n\n        const shiftId = isFirstRowOpen ? 0 : modelShiftId;\n\n        const prevDayFrom = timeValues[shiftId]?.[prevDay]?.from;\n        const prevDayTo = timeValues[shiftId]?.[prevDay]?.to;\n        \n        if(isFirstRowOpen) {\n          if(!weekOffChecked[shiftId]?.[day] || (weekOffChecked[shiftId]?.[day] === true && selectedWeeksOfMonths[shiftId]?.[day]?.length > 0)) {\n            const fromKey = `shift_from_time_${shiftId}_${day}`;\n            const toKey = `shift_to_time_${shiftId}_${day}`;\n            const fromValue = timeValues[shiftId]?.[day]?.from;\n            const toValue = timeValues[shiftId]?.[day]?.to;\n            \n            if (!fromValue) {\n              fromToErrors[fromKey] = 'From time is required';\n            }\n    \n            if (!toValue) {\n              fromToErrors[toKey] = 'To time is required';\n            }\n\n            if (fromValue && toValue) {\n              const fromTime = dayjs(fromValue)\n              const toTime = dayjs(toValue)\n              \n              const prevFromTime = dayjs(prevDayFrom);\n              const prevToTime = dayjs(prevDayTo);\n              \n              const currentFromMinutes = getTotalMinutes(fromTime);\n              const prevFromMinutes = getTotalMinutes(prevFromTime);\n              const prevToMinutes = getTotalMinutes(prevToTime);\n              \n              \n              let diffHours = toTime ? toTime.diff(fromTime, 'hour') : 0;\n              \n              // Check if to time is greater than from time\n              if (diffHours === 0 && fromTime.isSame(toTime, 'minute')) {\n                \n                fromToErrors[toKey] = 'The shift duration cannot be exactly 24 hours';\n              }\n\n              if (prevFromMinutes > prevToMinutes && prevToMinutes > currentFromMinutes) {\n                fromToErrors[fromKey] = 'Shift timing is overlapping with previous day';\n              }\n            }\n          }\n\n        } else {\n            \n            if(!weekOffChecked[shiftId]?.[day] || (weekOffChecked[shiftId]?.[day] === true && selectedWeeksOfMonths[shiftId]?.[day]?.length > 0))  {\n              const fromKey = `shift_from_time_${shiftId}_${day}`;\n              const toKey = `shift_to_time_${shiftId}_${day}`;\n              const fromValue = timeValues[shiftId]?.[day]?.from;\n              const toValue = timeValues[shiftId]?.[day]?.to;\n      \n              if (!fromValue) {\n                fromToErrors[fromKey] = 'From time is required';\n              }\n      \n              if (!toValue) {\n                fromToErrors[toKey] = 'To time is required';\n              }\n\n              if (fromValue && toValue) {\n\n                const fromTime = dayjs(convertToDate(fromValue))\n                const toTime = dayjs(convertToDate(toValue))\n\n                const prevFromTime = dayjs(prevDayFrom);\n                const prevToTime = dayjs(prevDayTo);\n                \n                const currentFromMinutes = getTotalMinutes(fromTime);\n                const prevFromMinutes = getTotalMinutes(prevFromTime);\n                const prevToMinutes = getTotalMinutes(prevToTime);\n             \n                let diffHours = toTime ? toTime.diff(fromTime, 'hour') : 0;\n              \n                // Check if to time is greater than from time\n                if (diffHours === 0 && fromTime.isSame(toTime, 'minute')) {\n                  fromToErrors[toKey] = 'The shift duration cannot be exactly 24 hours';\n                }\n\n                if (prevFromMinutes > prevToMinutes && prevToMinutes > currentFromMinutes) {\n                  fromToErrors[fromKey] = 'Shift timing is overlapping with previous day';\n                }\n              }\n            }\n        }\n      });\n\n      // Merge errors from shiftNameErrors and fromToErrors\n      const errors = { ...shiftNameErrors, ...fromToErrors };\n\n      // console.log( 'errors >>>', errors)\n      \n      if(isFirstRowOpen) {\n        setShowModal(false);\n      }      \n\n      if (errors && Object.keys(errors).length > 0) {\n        formik.setErrors(errors);\n      } else {\n        // Proceed with form submission\n        // handleSave(modelShiftId, 2);\n      }\n    },\n  });\n\n  const [isInitValAdd, setInitValAdd] = useState(false);\n  const isInitValAddRef = useRef(false);\n\n  useEffect(() => {\n    if (isShiftAdd || isShiftUpdate) {\n      dispatch(onGetWorkingHours());\n      resetAllData();\n      setIsFirstRowOpen(false);\n      setConform(false);\n      setExpandedRow(null);\n      setModelShiftId(0);\n      dispatch(afterSaveShift());\n      setInitValAdd(false);\n      formik.resetForm();\n      if(isShiftAdd) {\n        setIsModalOpen2(true)\n      }\n    }\n  }, [formik, isShiftAdd, isShiftUpdate, dispatch, modelShiftId])\n\n  useEffect(() => {\n    const isInitValAdd = isInitValAddRef.current;\n\n    if(validationErrors && Object.keys(validationErrors).length > 0) {\n      formik.setErrors(validationErrors)\n      setTimeout(() => {\n          dispatch(resetValidationErrors());\n      }, 3000);\n    }\n\n    if (shifts && shifts.length > 0 && (!isInitValAdd || (isShiftAdd || isShiftUpdate))) {\n      \n      isInitValAddRef.current = true;\n      setInitValAdd(true);\n      const initialValues = {};\n\n      shifts.forEach(shift => {\n        initialValues[`shift_name_${shift.id}`] = shift.name;\n        // initialValues[`shift_break_time_${shift.id}`] = shift.break_time;\n        initialValues[`shift_description_${shift.id}`] = shift.description;\n      });\n      formik.setValues(initialValues); // Update formik values after shifts are available\n    }\n  }, [formik, shifts, validationErrors, dispatch, isInitValAdd, isShiftAdd, isShiftUpdate]);\n\n  const convertTo24Hrs = (time) => {\n    if (time) {\n      const [hoursStr, minutesStr] = time.split(':');\n      let hours = parseInt(hoursStr);\n      const minutes = parseInt(minutesStr);\n  \n      // Adjust hours for PM times\n      if (time.includes('PM') && hours < 12) {\n        hours += 12;\n      }\n  \n      // Adjust hours for 12 AM\n      if (time.includes('AM') && hours === 12) {\n        hours = 0;\n      }\n  \n      // Create a Date object with the adjusted hours and minutes\n      const dateObj = new Date();\n      dateObj.setHours(hours);\n      dateObj.setMinutes(minutes);\n  \n      return dateObj;\n    } else {\n      return null;\n    }\n  };\n\n  const convertToDate = (time) => {\n    if (typeof time === 'string' && time.includes(':')) {\n\n      const currentDate = new Date();\n      const TimeParts = time.split(':');\n      currentDate.setHours(Number(TimeParts[0]), Number(TimeParts[1]), 0, 0);\n      return currentDate;\n    } else {\n      return time;\n    }\n  };\n\n  \n  const convertTo24HrsOld = ((time) => {\n    if(time) {\n      var hours = Number(time.match(/^(\\d+)/)[1]);\n      var minutes = Number(time.match(/:(\\d+)/)[1]);\n      var AMPM = time.match(/\\s(.*)$/)[1];\n      if (AMPM === \"PM\" && hours < 12) hours = hours + 12;\n      if (AMPM === \"AM\" && hours === 12) hours = hours - 12;\n      var sHours = hours.toString();\n      var sMinutes = minutes.toString();\n      if (hours < 10) sHours = \"0\" + sHours;\n      if (minutes < 10) sMinutes = \"0\" + sMinutes;\n\n      return sHours + \":\" + sMinutes;\n    } else {\n      return null;\n    }\n  });\n\n  const resetAllData = () => {\n\n    setInitialFromTimes({});\n    setInitialToTimes({});\n    setTimeValues({});\n    setCommonDiffHours({});\n\n    setInitialOnChangeFromTimes({});\n    setInitialOnChangeToTimes({});\n\n    setOccasionalVisible({});\n    setOccasionalDayVisible({});\n\n    setSelectedOccasionalWorkingWeeks([]);\n\n    setAllValuesSelected({});\n\n    setWeekOffChecked({}); \n\n  }\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalConfirmationText, setModalConfirmationText] = useState(<>You have some unsaved changes, do you want to save them?</>);\n\n  const closeConfirmationModal = () => {\n    formik.resetForm();\n    setIsFirstRowOpen(false);\n    setShowModal(false);\n    resetAllData();\n  };\n\n  const openConfirmationModal = () => {\n\n    const shiftName = document.querySelector(`input[name=\"shift_name_0\"]`).value;\n    const fromTime = timeValues[0]?.['Monday']?.from;\n    const toTime = timeValues[0]?.['Monday']?.to;\n\n    if(shiftName.length > 0 || fromTime !== undefined || toTime !== undefined) {\n      setShowModal(true);\n    } else {\n      formik.resetForm();\n      resetAllData();\n      setIsFirstRowOpen(false);\n    }\n  }\n  const pageHistory =useNavigate()\n\n  const handleSaveShift = () => {\n    setShowModal(false);\n    formik.handleSubmit();\n  };\n\n  const onClosedUnsaveModelClick = () => {\n    formik.resetForm();\n    setIsFirstRowOpen(false);\n    setShowModal(false);\n    resetAllData();\n    pageHistory(-1);\n  };\n\n  const isReadOnly = !userHasRights(moduleName.assignShift, 'C');\n\n  document.title = \"Manage Shifts | Petpooja Payroll\";\n  return (\n      <React.Fragment>\n        <Header title=\"Manage Shifts\" currentPage=\"shiftTime\"\n                showUnchangeModal={formik.dirty}\n                onClosedUnsaveModelClick={onClosedUnsaveModelClick}\n                onSaveClick={handleSaveShift}\n                modalConfirmationText={modalConfirmationText}/>\n        <div className=\"page-content\">\n          <DeleteModal\n            show={deleteModal}\n            onDeleteClick={handleDeleteShift}\n            onCloseClick={() => {\n              setDeleteModalData(null);\n              setDeleteModal(false);\n            }}\n            name={deleteModalData?.name}\n            title={deleteModalData?.title}\n            description={deleteModalData?.description}\n            btnLoading={isShiftDelLoading}\n          />\n           <div className=\"container-fluid\">\n            <Card className=\" p-3 mb-2 barrierEnd\">\n              <CardBody>\n                <div className=\" Employees-emptyBox\" style={{ height: \"300px\" }}>\n                  <div className=\"text-center\">\n                    <img\n                      src={noData}\n                      alt=\"no-data \"\n                      className=\"mb-3\"\n                      style={{ width: \"150px\", opacity: \"60%\" }}\n                    />\n                    <h5>Apologies,</h5>\n                    <p className=\"mx-lg-5 mt-2 p-0\">\n                      For better experience please open this page on web.\n                    </p>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            <Row className=\"barrierStart\">\n              <Col lg={12}>\n                \n\n                {/* new design start */}\n                <div className=\"card  ps-border ps-rounded-10 shadow-none shift-managment-wrap\">\n                  <div className=\"card-header ps-border-bottom ps-rounded-top-rl px-4\">\n                    <div className=\"pr-page-title d-flex justify-content-between align-items-center ps-emp-total\">\n                      <h5>Shifts <span>({shifts.length > 0 ? shifts.length : 0})</span></h5>\n\n                      <div className=\"d-flex\">\n                        <Link to=\"/employees-shifts-assign-new\"><button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn me-3\" id=\"assign-btn\" >Assign Shift</button>\n                        </Link>\n                        {userHasRights(moduleName.assignShift, 'C') && \n                          <>\n                            <button type=\"button\" className=\"ps-btn sm-btn primary-btn \" onClick={()=>workHourFun()}>Set Working Hours</button>\n                            <button type=\"button\" className=\"ps-btn sm-btn primary-btn ms-3\" id=\"create-btn\" onClick={() => { setshiftDetail([]); setIsEdit(false); setIsFirstRowOpen(true); resetAllData(); setExpandedRow(null);}} >Create Shift</button>\n                          </>\n                        }\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* <div className=\"ps-emp-not-ass-alert ps-border-bottom\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M17.87 13.3398C17.42 14.3698 16.81 15.2898 16.04 16.0498C15.27 16.8198 14.36 17.4298 13.33 17.8798C12.29 18.3198 11.17 18.5498 9.99 18.5498C8.81 18.5498 7.7 18.3198 6.66 17.8798C5.63 17.4298 4.71 16.8198 3.95 16.0498C3.18 15.2798 2.57 14.3698 2.12 13.3398C1.68 12.2998 1.45 11.1798 1.45 9.9998C1.45 8.8198 1.68 7.7098 2.12 6.6698C2.57 5.6398 3.19 4.7198 3.95 3.9598C4.72 3.1898 5.63 2.5798 6.66 2.1298C7.7 1.6898 8.82 1.4598 10 1.4598C11.18 1.4598 12.29 1.6898 13.33 2.1298C14.36 2.5798 15.28 3.1998 16.04 3.9598C16.8 4.7198 17.42 5.6398 17.87 6.6698C18.31 7.7098 18.54 8.8298 18.54 10.0098C18.54 11.1898 18.31 12.2998 17.87 13.3398ZM17.1 10.0098C17.1 8.0298 16.4 6.3398 15.03 4.9698C13.66 3.5998 11.97 2.89981 10 2.89981C8.03 2.89981 6.33 3.5998 4.96 4.9698C3.59 6.3398 2.89 8.0298 2.89 10.0098C2.89 11.9898 3.59 13.6698 4.96 15.0398C6.33 16.4098 8.02 17.1098 10 17.1098C11.98 17.1098 13.66 16.4098 15.03 15.0398C16.4 13.6698 17.1 11.9798 17.1 10.0098Z\" fill=\"#212121\"/>\n                      <path d=\"M10.72 13.7398V9.70978C10.72 9.50978 10.65 9.33978 10.51 9.19978C10.37 9.05978 10.2 8.98978 10 8.98978C9.79 8.98978 9.62 9.05978 9.48 9.19978C9.34 9.33978 9.28 9.50978 9.28 9.70978V13.7398C9.28 13.9398 9.34 14.1098 9.48 14.2498C9.62 14.3898 9.79 14.4598 9.99 14.4598C10.2 14.4598 10.37 14.3898 10.51 14.2498C10.65 14.1098 10.72 13.9398 10.72 13.7398Z\" fill=\"#212121\"/>\n                      <path d=\"M10.77 6.49977C10.77 6.27977 10.69 6.09977 10.55 5.94977C10.4 5.79978 10.21 5.72978 10 5.72978C9.79 5.72978 9.59 5.79978 9.45 5.94977C9.3 6.09977 9.22 6.27977 9.22 6.49977C9.22 6.71978 9.3 6.89978 9.45 7.04978C9.59 7.18978 9.78 7.26978 10 7.26978C10.22 7.26978 10.4 7.18978 10.55 7.04978C10.69 6.89978 10.77 6.70977 10.77 6.49977Z\" fill=\"#212121\"/>\n                    </svg>\n                    <h5>120 Employees are not assigned to any Shift Yet</h5>\n                    <Link to=\"/employees-shifts-assign-new\"><button type=\"button\" className=\"ps-btn sm-btn grey-outline-btn ms-1\" id=\"assign-btn\" >Assign Now</button></Link>\n                  </div> */}\n\n                  <div className=\"card-body p-4 row\">\n                    {/*<Col xl={12}>\n                      <div className=\"float-md-end indicator-bg py-1 py-md-1 px-3 mb-3\">\n                        <div className=\"d-md-flex justify-content-end align-items-center\">\n                          <p className=\"mb-0 tx-black fw-500 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"7\" fill=\"#F3F3F9\" stroke=\"#D2D6DB\" strokeWidth=\"2\" />\n                              </svg>\n                            </span>Week Off\n                          </p>\n                          <p className=\"mb-0 tx-black fw-500 ms-md-3 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"7\" fill=\"#F3F3F9\" stroke=\"#2381D9\" strokeWidth=\"2\" />\n                              </svg></span>Occassional Working\n                          </p>\n                          <p className=\"mb-0 tx-black fw-500 ms-md-3 mb-1 mb-md-0\">\n                            <span className=\"me-1\">\n                              <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"8.625\" cy=\"8\" r=\"8\" fill=\"#2381D9\" />\n                              </svg>\n                            </span>Working Day\n                          </p>\n                        </div>\n                      </div>\n                    </Col>*/}\n\n                    <Col xl={12}>\n                      {/* <SimpleBar style={{ height: \"60vh\" }}> */}\n                      <div className=\"table-responsive mt-4 mt-xl-0 ct-emp-shit-assign\">\n                      {isShiftSuccess ? (\n                      <form onSubmit={formik.handleSubmit}>\n                        <Table className=\"table-striped align-middle table-nowrap mb-0 \">\n                          <thead>\n                            <tr>\n                              <th scope=\"col\" width=\"25%\" style={{minWidth:\"250px\"}}>Shift Name</th>\n                              {/* <th scope=\"col\" width=\"30%\">Shift Days</th> */}\n                              <th scope=\"col\" width=\"30%\">Assigned Employees</th>\n                              <th scope=\"col\" width=\"30%\">Created On</th>\n                              <th scope=\"col\">Action</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {isFirstRowOpen && (\n                              <tr className=\"cursor-pointer\" key=\"0\">\n                                <td onClick={() => toggleAccordion(0)}>\n\n                                  <div className={`ps-form-group ${formik.errors[`shift_name_0`] ? 'inp-warning' : ''} ps-warn-col`}> \n\n                                    <input name={`shift_name_0`} placeholder=\"Write Shift Name Here\" type=\"text\" className={`form-control ps-rounded-7 ${formik.errors[`shift_name_0`] ? 'warning' : ''}`} value={formik.values[`shift_name_0`] || ''}  onChange={formik.handleChange}/>\n\n                                    {formik.touched[`shift_name_0`] && formik.errors[`shift_name_0`] ? (<p>{formik.errors[`shift_name_0`]}</p>) : null}\n\n                                  </div>\n\n                                </td>\n                                {/* <td onClick={() => toggleAccordion(0)}>\n                                  <div className=\"d-flex week-circle-wrap\">\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                    <p className=\"table-week-circle round-grey-border-circle me-2\"></p>\n                                  </div>\n                                </td> */}\n                                <td onClick={() => toggleAccordion(0)}>0 Employees </td>\n                                <td onClick={() => toggleAccordion(0)}>{dayjs().format('YYYY-MM-DD')}</td>\n                                <td>\n                                  <span id=\"expandNewShiftBtn\" className=\"d-inline-block\" onClick={() => toggleAccordion(0)}>\n                                    {expandedRow === 0 ?\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" fill=\"white\" />\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M21 18.5L16 13.5L11 18.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                      :\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M11 13.5L16 18.5L21 13.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                    }\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`expandNewShiftBtn`}>\n                                      {expandedRow === 0 ? \"Collapse\" : \"Expand\"}\n                                  </UncontrolledTooltip>\n                                  <span id=\"deleteNewShiftBtn\" className=\"d-inline-block ms-3\" onClick={() => { openConfirmationModal(); }}>\n                                    <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                      <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                      <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                      <path d=\"M14.4375 10.0625V10.375H17.5625V10.0625C17.5625 9.6481 17.3979 9.25067 17.1049 8.95765C16.8118 8.66462 16.4144 8.5 16 8.5C15.5856 8.5 15.1882 8.66462 14.8951 8.95765C14.6021 9.25067 14.4375 9.6481 14.4375 10.0625ZM13.1875 10.375V10.0625C13.1875 9.31658 13.4838 8.60121 14.0113 8.07376C14.5387 7.54632 15.2541 7.25 16 7.25C16.7459 7.25 17.4613 7.54632 17.9887 8.07376C18.5162 8.60121 18.8125 9.31658 18.8125 10.0625V10.375H23.5C23.6658 10.375 23.8247 10.4408 23.9419 10.5581C24.0592 10.6753 24.125 10.8342 24.125 11C24.125 11.1658 24.0592 11.3247 23.9419 11.4419C23.8247 11.5592 23.6658 11.625 23.5 11.625H22.5575L21.375 21.98C21.2878 22.7426 20.923 23.4465 20.3501 23.9573C19.7772 24.4682 19.0363 24.7504 18.2687 24.75H13.7312C12.9637 24.7504 12.2228 24.4682 11.6499 23.9573C11.077 23.4465 10.7122 22.7426 10.625 21.98L9.4425 11.625H8.5C8.33424 11.625 8.17527 11.5592 8.05806 11.4419C7.94085 11.3247 7.875 11.1658 7.875 11C7.875 10.8342 7.94085 10.6753 8.05806 10.5581C8.17527 10.4408 8.33424 10.375 8.5 10.375H13.1875ZM11.8675 21.8375C11.9197 22.2949 12.1383 22.7172 12.4818 23.0238C12.8253 23.3304 13.2696 23.4999 13.73 23.5H18.2694C18.7298 23.4999 19.1741 23.3304 19.5175 23.0238C19.861 22.7172 20.0797 22.2949 20.1319 21.8375L21.3 11.625H10.7006L11.8675 21.8375ZM14.125 13.8125C14.2908 13.8125 14.4497 13.8783 14.5669 13.9956C14.6842 14.1128 14.75 14.2717 14.75 14.4375V20.6875C14.75 20.8533 14.6842 21.0122 14.5669 21.1294C14.4497 21.2467 14.2908 21.3125 14.125 21.3125C13.9592 21.3125 13.8003 21.2467 13.6831 21.1294C13.5658 21.0122 13.5 20.8533 13.5 20.6875V14.4375C13.5 14.2717 13.5658 14.1128 13.6831 13.9956C13.8003 13.8783 13.9592 13.8125 14.125 13.8125ZM18.5 14.4375C18.5 14.2717 18.4342 14.1128 18.3169 13.9956C18.1997 13.8783 18.0408 13.8125 17.875 13.8125C17.7092 13.8125 17.5503 13.8783 17.4331 13.9956C17.3158 14.1128 17.25 14.2717 17.25 14.4375V20.6875C17.25 20.8533 17.3158 21.0122 17.4331 21.1294C17.5503 21.2467 17.7092 21.3125 17.875 21.3125C18.0408 21.3125 18.1997 21.2467 18.3169 21.1294C18.4342 21.0122 18.5 20.8533 18.5 20.6875V14.4375Z\" fill=\"#212121\" />\n                                    </svg>\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`deleteNewShiftBtn`}>\n                                      Delete\n                                  </UncontrolledTooltip>\n                                </td>\n                              </tr>\n                            )}\n                            {isFirstRowOpen && expandedRow === 0 &&\n                              <tr className=\"\" key=\"0_0\">\n\n                                <td colSpan={2} className=\"ps-border-right\">\n\n                                  <div className=\"row pt-3\">\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Day</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">From</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"></div>\n                                    <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">To</p></div>\n                                    <div className=\"col-xl-2 col-md-2\"></div>\n                                    {/* <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Week Off</p></div> */}\n                                  </div>\n\n                                  {daysOfWeek.map((day, index) => (\n                                    <div key={`${day}-${index}-0`} className={`row py-3 ${occasionalVisible[0]?.[day] ? 'gridjs-th' : ''}`}>\n                                      <div className=\"col-xl-2 col-md-2\"><p className=\"mb-2 mt-2 paragraph-sm-1\">{day}</p></div>\n                                      <div className=\"col-xl-3 col-md-3 col-3 ct-time-width\" id=\n                                      {`from_time_0_${day}`}>\n                                          {/* <TimePicker\n                                            className={classes.timePicker}\n                                            name={`shift_from_time_0_${day}`}\n                                            label=\"Choose Time\"\n                                            value={initialFromTimes[0]?.[day] || timeValues[0]?.[day]?.from}\n                                            onChange={(newTime) => {\n                                              formik.handleChange({\n                                                target: {\n                                                  name: `shift_from_time_0_${day}`,\n                                                  value: newTime,\n                                                },\n                                              });\n                                              handleFromTimeChange(day, newTime, 0);\n                                            }} \n                                            onClose={(event) => handleFromTimeClose(event, 0)}\n                                            viewRenderers={{\n                                              hours: renderTimeViewClock,\n                                              minutes: renderTimeViewClock,\n                                              seconds: renderTimeViewClock,\n                                            }}\n                                          /> */}\n\n\n\n                                            <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_from_time_0_${day}`] ? 'date-error' : ''}`}>\n                                                <Flatpickr\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_from_time_0_${day}`}\n                                                      className=\"timer form-control\"\n                                                      value={initialFromTimes[0]?.[day] || timeValues[0]?.[day]?.from || ''}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_from_time_0_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleFromTimeChange(day, newTime, 0);\n                                                      }}\n                                                      onClose={(event) => handleFromTimeClose({}, 0)}\n                                                      options={{\n                                                          enableTime: true,\n                                                          noCalendar: true,\n                                                          dateFormat: \"H:i\",\n                                                          altInput: true ,\n                                                          altFormat: \"h:i K\",\n                                                          disableMobile: true\n                                                      }}\n                                                  /> \n                                                  {formik.errors[`shift_from_time_0_${day}`] ? (<p className=\"\">{formik.errors[`shift_from_time_0_${day}`]}</p>) : null}                    \n                                            </div>\n                                            \n                                        </div>\n                                       \n                                      <div className=\"col-xl-1 col-md-1 text-center\"><img className=\"mt-2\" src={arrowrightimg} alt=\"\" /></div>\n                                      <div className=\"col-xl-3 col-md-3 col-3\" id=\n                                      {`to_time_0_${day}`}>\n                                          {/* <TimePicker\n                                            className={classes.timePicker}\n                                            name={`shift_to_time_0_${day}`}\n                                            label=\"Choose Time\"\n                                            value={initialToTimes[0]?.[day] || timeValues[0]?.[day]?.to}\n                                            onChange={(newTime) => {\n                                              formik.handleChange({\n                                                target: {\n                                                  name: `shift_to_time_0_${day}`,\n                                                  value: newTime,\n                                                },\n                                              });\n                                              handleToTimeChange(day, newTime, 0);\n                                            }}          \n                                            onClose={(event) => handleToTimeClose(event, 0)}                         \n                                            viewRenderers={{\n                                              hours: renderTimeViewClock,\n                                              minutes: renderTimeViewClock,\n                                              seconds: renderTimeViewClock,\n                                            }}\n                                          /> */}\n\n                                              <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_to_time_0_${day}`] ? 'date-error' : ''}`}>\n                                                <Flatpickr\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_to_time_0_${day}`}\n                                                      className=\"timer form-control\"\n                                                      value={initialToTimes[0]?.[day] || timeValues[0]?.[day]?.to || ''}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_to_time_0_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleToTimeChange(day, newTime, 0);\n                                                      }} \n                                                      \n                                                      onClose={(event) => handleToTimeClose({}, 0)}\n                                                      options={{\n                                                          enableTime: true,\n                                                          noCalendar: true,\n                                                          dateFormat: \"H:i\",\n                                                          altInput: true ,\n                                                          altFormat: \"h:i K\",\n                                                          disableMobile: true\n                                                      }}\n                                                  /> \n                                                  {formik.errors[`shift_to_time_0_${day}`] ? (<p className=\"\">{formik.errors[`shift_to_time_0_${day}`]}</p>) : null}                    \n                                            </div>\n                                        </div>\n                                        {/* {formik.errors[`shift_to_time_0_${day}`] ? (\n                                            <div>{formik.errors[`shift_to_time_0_${day}`]}</div>\n                                          ) : null} */}\n\n                                      <div className=\"col-xl-1 col-md-1 text-center\"><p className=\"mt-2 paragraph-sm-1\" id=\"shift_time_diff_hrs_0\">{commonDiffHours[0]?.[day] || '0'}h</p></div>\n\n                                      {/* <div className=\"col-xl-2 col-md-2 col-2 mt-2\">\n\n                                        <div className=\"form-check\">\n                                          <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`weekOffCheck_0_${day}`} value=\"\" onChange={() => handleWeekOffCheckbox(day,0)} checked={weekOffChecked[0]?.[day]} disabled={allValuesSelected[0]?.[day]} />\n                                          <label className=\"form-check-label\" htmlFor={`weekOffCheck_0_${day}`}></label>\n                                        </div>\n                                      </div> */}\n                                      <div className=\"col-xl-2 col-md-2\"></div>\n                                      {/* {occasionalVisible[0]?.[day] && (\n                                      <div className=\"col-xl-10 mt-2\" id={`occasional_0_${day}`}>\n                                        <div className=\"d-flex\">\n                                          <p className=\"paragraph-sm-2 text-primary\">Do you want to Occasional Working On {day}? </p>\n                                          <div className=\"form-check mx-2\">\n                                            <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`occasional_working_check_0_${day}`} value=\"\" onChange={() => handleOccasionalWorkingCheckbox(day,0)} checked={occasionalDayVisible[0]?.[day]}/>\n                                            <label className=\"form-check-label\" htmlFor={`occasional_working_check_${day}`}></label>\n                                          </div>\n                                        </div>\n                                      </div>\n                                      )}\n                                      {occasionalVisible[0]?.[day] && occasionalDayVisible[0]?.[day] && (\n                                      <div className=\"row mt-2\" id={`occasional_working_day_0_${day}`}>\n                                        <div className=\"col-xl-2\"></div>\n                                        <div className=\"col-xl-7\">\n                                          <MultiSelect value={selectedWeeksOfMonths[0]?.[day] || ''} options={groupedOfWeeksNumbers} onChange={(e) => handleMultiSelectWeeksChange(e, day, 0)} optionLabel=\"label\"\n                                            optionGroupLabel=\"label\" optionGroupChildren=\"items\"\n                                            placeholder={`Choose Working ${day}s`} display=\"chip\" className=\"w-100 md:w-20rem ps-check-drop\" />\n                                        </div>\n                                      </div>\n                                      )} */}\n                                      \n                                    </div>\n                                  ))}\n                                </td>\n\n\n                                <td colSpan={2} className=\"align-top\">\n                                  <div className=\"ps-3 pt-3\">\n                                    {/* <div className=\"d-flex align-items-center mb-4\">\n                                      <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey\"><img className=\"pe-2\" src={breakimg} alt=\"\" />Break Time</label>\n                                      <input name=\"shift_break_time_0\" type=\"number\" maxLength=\"3\" placeholder=\"minute\" className=\"form-control  form-control ps-rounded-7 w-20 ms-3\" />\n                                    </div> */}\n                                    <div className=\"\">\n                                      <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mb-3\"><img className=\"pe-2 img-fluid\" src={remarkimg} alt=\"\" />Remark</label>\n                                      <textarea className=\"form-control ps-rounded-7\" rows=\"5\" placeholder=\"Write your remarks or comments here...\" id=\"shift_description_0\"/>\n                                    </div>\n                                    {!isReadOnly && \n                                      <div className=\"mt-3\">\n                                        <button type=\"submit\" disabled={error ? null : loading ? true : false} className=\"btn btn-blue\" \n                                        >{error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Save Changes</button>\n                                      </div>\n                                    }\n                                  </div>\n                                </td>\n                              </tr>\n                            }\n\n                            {shifts.map((shift) => (\n                              <React.Fragment key={`frag-${shift.id}`}>\n                              <tr key={shift.id} className=\"cursor-pointer\">\n\n                                <td onClick={() => toggleAccordion(shift.id)} className=\"d-flex align-items-center\">\n                           \n                                  <div className={`ps-form-group ${formik.errors[`shift_name_${shift.id}`] ? 'inp-warning' : ''} ps-warn-col`}> \n\n                                    <input name={`shift_name_${shift.id}`} disabled={isReadOnly} placeholder=\"Write Shift Name Here\" type=\"text\" className={`form-control ps-rounded-7 ${formik.errors[`shift_name_${shift.id}`] ? 'warning' : ''}`} value={formik.values[`shift_name_${shift.id}`] || ''}  onChange={formik.handleChange}/>\n\n                                    {formik.touched[`shift_name_${shift.id}`] && formik.errors[`shift_name_${shift.id}`] ? (<p>{formik.errors[`shift_name_${shift.id}`]}</p>) : null}\n\n                                </div>\n                                {shift.default_shift === 1 ? <Badge pill bg=\"info\" className=\"ms-2 ps-badge-12\">Default</Badge> : <div className=\"\" style={{width:\"74px\"}}></div>}\n                                </td>\n\n                                <td onClick={() => toggleAccordion(shift.id)} className=\"d-none\">\n                                  <div className=\"d-flex week-circle-wrap\">\n\n                                  {JSON.parse(shift.shift_daywise_data)\n                                    .sort((a, b) => a.day - b.day)\n                                    .map((dayData, index) => (\n                                      <p\n                                        key={index}\n                                        className={`table-week-circle round-blue-circle me-2`}\n                                        // className={`table-week-circle ${\n                                        //   dayData.is_weekoff === 1 &&\n                                        //   (!dayData.occasional_working_days || dayData.occasional_working_days.length === 0)\n                                        //     ? 'round-grey-circle'\n                                        //     : dayData.is_weekoff === 1 && dayData.occasional_working_days && dayData.occasional_working_days.length > 0\n                                        //     ? 'round-blue-border-circle'\n                                        //     : 'round-blue-circle'\n                                        // } me-2`}\n                                      >\n                                        {dayData.day !== null ? daysOfWeek[dayData.day - 1].charAt(0) : ''}\n                                      </p>\n                                    ))}\n\n                                  \n                                    {/* <p className=\"table-week-circle round-blue-circle me-2\">M</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">T</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">W</p>\n                                    <p className=\"table-week-circle round-blue-circle me-2\">T</p>\n                                    <p className=\"table-week-circle round-grey-circle me-2\">F</p>\n                                    <p className=\"table-week-circle round-grey-circle me-2\">S</p>\n                                    <p className=\"table-week-circle round-blue-border-circle me-2\">S</p> */}\n\n                                  </div>\n                                </td>\n                                <td onClick={() => toggleAccordion(shift.id)} >{shift.employee_count} </td>\n                                <td onClick={() => toggleAccordion(shift.id)} >{shift.added_on}</td>\n                                <td>\n                                  \n                                <span id={`expandShiftBtn-${shift.id}`} className=\"d-inline-block\" onClick={() => toggleAccordion(shift.id)}>\n                                    {expandedRow === shift.id ?\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" fill=\"white\" />\n                                        <rect x=\"31.5\" y=\"31.5\" width=\"31\" height=\"31\" rx=\"4.76667\" transform=\"rotate(-180 31.5 31.5)\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M21 18.5L16 13.5L11 18.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                      :\n                                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                        <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                        <path d=\"M11 13.5L16 18.5L21 13.5\" stroke=\"#212121\" strokeWidth=\"1.33333\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                      </svg>\n                                    }\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`expandShiftBtn-${shift.id}`}>\n                                      {expandedRow === shift.id ? \"Collapse\" : \"Expand\"}\n                                  </UncontrolledTooltip>\n\n                                  <span id={`logsBtn-${shift.id}`} className=\"d-inline-block ms-3\" onClick={()=>{setShiftLogsDetails(shift); shiftLogsFun();}}>\n                                    <svg width=\"32\" height=\"33\" viewBox=\"0 0 32 33\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                      <rect x=\"0.5\" y=\"0.724609\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\"/>\n                                      <rect x=\"0.5\" y=\"0.724609\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10.5835 10.1816C10.4684 10.1816 10.3751 10.2749 10.3751 10.39V23.7233C10.3751 23.8384 10.4684 23.9316 10.5835 23.9316H21.4168C21.5319 23.9316 21.6251 23.8384 21.6251 23.7233V10.39C21.6251 10.2749 21.5319 10.1816 21.4168 10.1816H10.5835ZM9.12512 10.39C9.12512 9.58456 9.77804 8.93164 10.5835 8.93164H21.4168C22.2222 8.93164 22.8751 9.58456 22.8751 10.39V23.7233C22.8751 24.5287 22.2222 25.1816 21.4168 25.1816H10.5835C9.77804 25.1816 9.12512 24.5287 9.12512 23.7233V10.39Z\" fill=\"#212121\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.5002 7.26562C13.8454 7.26562 14.1252 7.54545 14.1252 7.89062V10.3906C14.1252 10.7358 13.8454 11.0156 13.5002 11.0156C13.1551 11.0156 12.8752 10.7358 12.8752 10.3906V7.89062C12.8752 7.54545 13.1551 7.26562 13.5002 7.26562Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M18.5002 7.26562C18.8454 7.26562 19.1252 7.54545 19.1252 7.89062V10.3906C19.1252 10.7358 18.8454 11.0156 18.5002 11.0156C18.1551 11.0156 17.8752 10.7358 17.8752 10.3906V7.89062C17.8752 7.54545 18.1551 7.26562 18.5002 7.26562Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.042 14.1406C12.042 13.7955 12.3218 13.5156 12.667 13.5156H19.3337C19.6788 13.5156 19.9587 13.7955 19.9587 14.1406C19.9587 14.4858 19.6788 14.7656 19.3337 14.7656H12.667C12.3218 14.7656 12.042 14.4858 12.042 14.1406Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.0421 17.4746C12.0421 17.1294 12.3219 16.8496 12.6671 16.8496H17.6671C18.0123 16.8496 18.2921 17.1294 18.2921 17.4746C18.2921 17.8198 18.0123 18.0996 17.6671 18.0996H12.6671C12.3219 18.0996 12.0421 17.8198 12.0421 17.4746Z\" fill=\"black\"/>\n                                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.0421 20.8066C12.0421 20.4615 12.3219 20.1816 12.6671 20.1816H16.0004C16.3456 20.1816 16.6254 20.4615 16.6254 20.8066C16.6254 21.1518 16.3456 21.4316 16.0004 21.4316H12.6671C12.3219 21.4316 12.0421 21.1518 12.0421 20.8066Z\" fill=\"black\"/>\n                                    </svg>\n                                  </span>\n                                  <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`logsBtn-${shift.id}`}>\n                                      Logs\n                                  </UncontrolledTooltip>\n\n                                  {(!shift.default_shift && userHasRights(moduleName.assignShift, 'C')) && (\n                                    <>\n                                      <span id={`shiftDeleteBtn-${shift.id}`} className=\"ms-3 d-inline-block\" onClick={() => {onClickDelete(shift);}}>\n                                        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                          <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" fill=\"white\" />\n                                          <rect x=\"0.5\" y=\"0.5\" width=\"31\" height=\"31\" rx=\"4.76667\" stroke=\"#D2D6DB\" />\n                                          <path d=\"M14.4375 10.0625V10.375H17.5625V10.0625C17.5625 9.6481 17.3979 9.25067 17.1049 8.95765C16.8118 8.66462 16.4144 8.5 16 8.5C15.5856 8.5 15.1882 8.66462 14.8951 8.95765C14.6021 9.25067 14.4375 9.6481 14.4375 10.0625ZM13.1875 10.375V10.0625C13.1875 9.31658 13.4838 8.60121 14.0113 8.07376C14.5387 7.54632 15.2541 7.25 16 7.25C16.7459 7.25 17.4613 7.54632 17.9887 8.07376C18.5162 8.60121 18.8125 9.31658 18.8125 10.0625V10.375H23.5C23.6658 10.375 23.8247 10.4408 23.9419 10.5581C24.0592 10.6753 24.125 10.8342 24.125 11C24.125 11.1658 24.0592 11.3247 23.9419 11.4419C23.8247 11.5592 23.6658 11.625 23.5 11.625H22.5575L21.375 21.98C21.2878 22.7426 20.923 23.4465 20.3501 23.9573C19.7772 24.4682 19.0363 24.7504 18.2687 24.75H13.7312C12.9637 24.7504 12.2228 24.4682 11.6499 23.9573C11.077 23.4465 10.7122 22.7426 10.625 21.98L9.4425 11.625H8.5C8.33424 11.625 8.17527 11.5592 8.05806 11.4419C7.94085 11.3247 7.875 11.1658 7.875 11C7.875 10.8342 7.94085 10.6753 8.05806 10.5581C8.17527 10.4408 8.33424 10.375 8.5 10.375H13.1875ZM11.8675 21.8375C11.9197 22.2949 12.1383 22.7172 12.4818 23.0238C12.8253 23.3304 13.2696 23.4999 13.73 23.5H18.2694C18.7298 23.4999 19.1741 23.3304 19.5175 23.0238C19.861 22.7172 20.0797 22.2949 20.1319 21.8375L21.3 11.625H10.7006L11.8675 21.8375ZM14.125 13.8125C14.2908 13.8125 14.4497 13.8783 14.5669 13.9956C14.6842 14.1128 14.75 14.2717 14.75 14.4375V20.6875C14.75 20.8533 14.6842 21.0122 14.5669 21.1294C14.4497 21.2467 14.2908 21.3125 14.125 21.3125C13.9592 21.3125 13.8003 21.2467 13.6831 21.1294C13.5658 21.0122 13.5 20.8533 13.5 20.6875V14.4375C13.5 14.2717 13.5658 14.1128 13.6831 13.9956C13.8003 13.8783 13.9592 13.8125 14.125 13.8125ZM18.5 14.4375C18.5 14.2717 18.4342 14.1128 18.3169 13.9956C18.1997 13.8783 18.0408 13.8125 17.875 13.8125C17.7092 13.8125 17.5503 13.8783 17.4331 13.9956C17.3158 14.1128 17.25 14.2717 17.25 14.4375V20.6875C17.25 20.8533 17.3158 21.0122 17.4331 21.1294C17.5503 21.2467 17.7092 21.3125 17.875 21.3125C18.0408 21.3125 18.1997 21.2467 18.3169 21.1294C18.4342 21.0122 18.5 20.8533 18.5 20.6875V14.4375Z\" fill=\"#212121\" />\n                                        </svg>\n                                      </span>\n                                      <UncontrolledTooltip trigger=\"hover\" placement=\"bottom\" target={`shiftDeleteBtn-${shift.id}`}>\n                                          Delete\n                                      </UncontrolledTooltip>\n                                    </>\n                                  )}\n                                </td>\n                              </tr>\n\n\n                              {expandedRow === shift.id &&\n                                <tr className=\"\" key={`${shift.id}_${shift.id}`}>\n                                  <td colSpan={2} className=\"ps-border-right\">\n\n                                      <div className=\"row pt-3\">\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Day</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">From</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"></div>\n                                        <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">To</p></div>\n                                        <div className=\"col-xl-2 col-md-2\"></div>\n                                        {/* <div className=\"col-xl-2 col-md-2\"><p className=\"ps-text-grey paragraph-sm-3\">Week Off</p></div> */}\n                                      </div>\n\n                                       {daysOfWeek.map((day, index) => {\n                                          const dayData = JSON.parse(shift.shift_daywise_data).find((data) => data.day === index + 1);\n\n                                          if (!dayData) {\n                                            return null;\n                                          }\n\n                                          return (\n                                            <div key={`${day}-${index}-${shift.id}`} className={`row py-3`}>\n                                            {/* <div key={`${day}-${index}-${shift.id}`} className={`row py-3 ${occasionalVisible[shift.id]?.[day] ? 'gridjs-th' : ''}`}> */}\n                                              <div className=\"col-xl-2 col-md-2\"><p className=\"mb-2 mt-2 paragraph-sm-1\">{day}</p></div>\n                                              <div className=\"col-xl-3 col-md-3 col-3 ct-time-width\" id={`from_time_${shift.id}_${day}`}>\n                                                {/* <TimePicker\n                                                  className={classes.timePicker}\n                                                  name={`shift_from_time_${shift.id}_${day}`}\n                                                  label=\"Choose Time\"\n                                                  value={initialFromTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.from}\n                                                  onChange={(newTime) => {\n                                                    formik.handleChange({\n                                                      target: {\n                                                        name: `shift_from_time_${shift.id}_${day}`,\n                                                        value: newTime,\n                                                      },\n                                                    });\n                                                    handleFromTimeChange(day, newTime, shift.id);\n                                                  }}\n                                                  onClose={(event) => handleFromTimeClose(event, shift.id)}\n                                                  viewRenderers={{\n                                                    hours: renderTimeViewClock,\n                                                    minutes: renderTimeViewClock,\n                                                    seconds: renderTimeViewClock,\n                                                  }}\n                                                /> */}\n                                                  <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_from_time_${shift.id}_${day}`] ? 'date-error' : ''}`}>\n                                                    <Flatpickr\n                                                      disabled={isReadOnly}\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_from_time_${shift.id}_${day}`}\n                                                      value={initialFromTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.from}\n                                                      onChange={(newTime) => {\n                                                        \n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_from_time_${shift.id}_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleFromTimeChange(day, newTime, shift.id);\n                                                      }}\n                                                      \n                                                      onClose={(event) => handleFromTimeClose({}, shift.id)}\n                                                      className=\"timer form-control\"\n                                                      options={{\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: \"H:i\",\n                                                        altInput: true ,\n                                                        altFormat: \"h:i K\",\n                                                        disableMobile: true\n                                                      }}\n                                                  />             \n                                                    {formik.errors[`shift_from_time_${shift.id}_${day}`] ? (<p className=\"\">{formik.errors[`shift_from_time_${shift.id}_${day}`]}</p>) : null}    \n                                                </div>\n                                              </div>\n\n                                              <div className=\"col-xl-1 col-md-1 text-center\"><img className=\"mt-2\" src={arrowrightimg} alt=\"\" /></div>\n                                              <div className=\"col-xl-3 col-md-3 col-3\" id={`to_time_${shift.id}_${day}`}>\n                                                {/* <TimePicker\n                                                  className={classes.timePicker}\n                                                  name={`shift_to_time_${shift.id}_${day}`}\n                                                  label=\"Choose Time\"\n                                                  value={initialToTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.to}\n\n                                                  onChange={(newTime) => {\n                                                    formik.handleChange({\n                                                      target: {\n                                                        name: `shift_to_time_${shift.id}_${day}`,\n                                                        value: newTime,\n                                                      },\n                                                    });\n                                                    handleToTimeChange(day, newTime, shift.id);\n                                                  }}          \n                                                  onClose={(event) => handleToTimeClose(event, shift.id)}                         \n                                                  viewRenderers={{\n                                                    hours: renderTimeViewClock,\n                                                    minutes: renderTimeViewClock,\n                                                    seconds: renderTimeViewClock,\n                                                  }}\n                                                /> */}\n\n                                                  <div className={`ps-warn-col ps-form-group time-icon ${formik.errors[`shift_to_time_${shift.id}_${day}`] ? 'date-error' : ''}`}>\n                                                    <Flatpickr\n                                                      disabled={isReadOnly}\n                                                      placeholder=\"Choose Time\"\n                                                      name={`shift_to_time_${shift.id}_${day}`}\n                                                      value={initialToTimes[shift.id]?.[day] || timeValues[shift.id]?.[day]?.to}\n                                                      onChange={(newTime) => {\n                                                        formik.handleChange({\n                                                          target: {\n                                                            name: `shift_to_time_${shift.id}_${day}`,\n                                                            value: newTime,\n                                                          },\n                                                        });\n                                                        handleToTimeChange(day, newTime, shift.id);\n                                                      }}\n                                                     \n                                                      onClose={(event) => handleToTimeClose({}, shift.id)}\n                                                      className=\"timer form-control\"\n                                                      options={{\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: \"H:i\",\n                                                        altInput: true ,\n                                                        altFormat: \"h:i K\",\n                                                        disableMobile: true\n                                                      }}\n                                                    />             \n                                                    {formik.errors[`shift_to_time_${shift.id}_${day}`] ? (<p className=\"\">{formik.errors[`shift_to_time_${shift.id}_${day}`]}</p>) : null}    \n                                                </div>\n                                              </div>\n\n                                              \n\n                                              {/* {formik.errors[`shift_to_time_${shift.id}_${day}`] ? (\n        <div>{formik.errors[`shift_to_time_${shift.id}_${day}`]}</div>\n      ) : null} */}\n\n                                              <div className=\"col-xl-1 col-md-1 text-center\"><p className=\"mt-2 paragraph-sm-1\" id={`shift_time_diff_hrs_${shift.id}`}>{commonDiffHours[shift.id]?.[day] || '0'}h</p></div>\n\n                                              {/* <div className=\"col-xl-2 col-md-2 col-2 mt-2\">\n\n                                                <div className=\"form-check\">\n                                                  <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`weekOffCheck_${shift.id}_${day}`} value=\"\" onChange={() => handleWeekOffCheckbox(day, shift.id)} checked={weekOffChecked[shift.id]?.[day]} disabled={allValuesSelected[shift.id]?.[day] || isReadOnly} />\n                                                  <label className=\"form-check-label\" htmlFor={`weekOffCheck_${shift.id}_${day}`}></label>\n                                                </div>\n                                              </div> */}\n                                              <div className=\"col-xl-2 col-md-2\"></div>\n                                              {/* {occasionalVisible[shift.id]?.[day] && (\n                                                <div className=\"col-xl-10 mt-2\" id={`occasional_${shift.id}_${day}`}>\n                                                  <div className=\"d-flex\">\n                                                    <p className=\"paragraph-sm-2 text-primary\">Do you want to Occasional Working On {day}? </p>\n                                                    <div className=\"form-check mx-2\">\n                                                      <input className=\"form-check-input ct-checkbox\" type=\"checkbox\" id={`occasional_working_check_${shift.id}_${day}`} value=\"\" onChange={() => handleOccasionalWorkingCheckbox(day, shift.id)} checked={occasionalDayVisible[shift.id]?.[day]}/>\n                                                      <label className=\"form-check-label\" htmlFor={`occasional_working_check_${shift.id}_${day}`}></label>\n                                                    </div>\n                                                  </div>\n                                                </div>\n                                              )}\n                                              {occasionalVisible[shift.id]?.[day] && occasionalDayVisible[shift.id]?.[day] && (\n                                                <div className=\"row mt-2\" id={`occasional_working_day_${shift.id}_${day}`}>\n                                                  <div className=\"col-xl-2\"></div>\n                                                  <div className=\"col-xl-7\">\n                                                    <MultiSelect value={selectedWeeksOfMonths[shift.id]?.[day] || ''} options={groupedOfWeeksNumbers} onChange={(e) => handleMultiSelectWeeksChange(e, day, shift.id)} optionLabel=\"label\"\n                                                      optionGroupLabel=\"label\" optionGroupChildren=\"items\"\n                                                      placeholder={`Choose Working ${day}s`} display=\"chip\" className=\"w-100 md:w-20rem ps-check-drop\" />\n                                                  </div>\n                                                </div>\n                                              )} */}\n                                            </div>\n                                          );\n                                        })}\n                                  </td>\n\n                                  <td colSpan={3} className=\"align-top\">\n                                    <div className=\"ps-3 pt-3\">\n                                      {/* <div className=\"d-flex mb-4\"> */}\n                                        {/* <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mt-2\"><img className=\"pe-2\" src={breakimg} alt=\"\" />Break Time</label> */}\n                                     \n                                        {/* <input name={`shift_break_time_${shift.id}`} placeholder=\"minute\" type=\"number\" maxLength=\"3\" className=\"form-control ps-rounded-7 w-20 ms-3\" value={formik.values[`shift_break_time_${shift.id}`]} onChange={formik.handleChange}/> */}\n                                        {/* error input start  */}\n                                        {/* <div className=\"ps-form-group inp-warning ps-warn-col\"> \n                                          <input type=\"text\" className=\"form-control ps-rounded-7 w-20 ms-3 \" placeholder=\"12h\"/>\n                                          <p className=\"ms-3\">Break time should be less than the shift duration.</p>\n                                        </div> */}\n                                        {/* error input end  */}\n\n                                        {/* {formik.touched[`shift_break_time_${shift.id}`] && formik.errors[`shift_break_time_${shift.id}`] ? (\n                                          <div className=\"error\">{formik.errors[`shift_break_time_${shift.id}`]}</div>\n                                        ) : null} */}\n\n                                      {/* </div> */}\n                                      <div className=\"\">\n                                        <label htmlFor=\"from\" className=\"form-label form-label ps-text-grey mb-3\"><img className=\"pe-2 img-fluid\" src={remarkimg} alt=\"\" />Remark</label>\n                                        <textarea disabled={isReadOnly} className=\"form-control ps-rounded-7\" rows=\"5\" placeholder=\"Write your remarks or comments here...\" id={`shift_description_${shift.id}`} value={formik.values[`shift_description_${shift.id}`] || ''}\n                  onChange={formik.handleChange}/>\n                                      </div>\n                                      <div className=\"mt-3\">\n                                      {/* onClick={openModal} */}\n                                      {!isReadOnly &&\n                                        <button type=\"submit\" className=\"btn btn-blue\" disabled={error ? null : loading ? true : false}>  {error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Save Changes</button>\n                                      }\n                                      {formik.errors[`shift_common_error`] ? (<p className=\"text-danger\">{formik.errors[`shift_common_error`]}</p>) : null}\n                                      </div>\n                                    </div>\n                                  </td>\n                                </tr>\n                              }\n                              \n                              \n\n                              </React.Fragment>\n                            ))}\n                          </tbody>\n                        </Table>\n\n                        </form>\n                        ) :(\n                          <div className=\"\">\n                            <Skeleton count={8} height={60}/>\n                          </div>\n                        )}\n\n                        {noShiftYet && shifts.length === 0 && !isFirstRowOpen ? (\n                            <Table className=\"table-striped align-middle table-nowrap mb-0 \">\n                            <tbody>\n                              <tr className=\"\">\n                                  <td colSpan={5} className=\"ct-td-nodata\">\n                                      <div className=\"d-flex align-items-center justify-content-center flex-column\">\n                                          <svg width=\"58\" height=\"58\" viewBox=\"0 0 58 58\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                              <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                                              <path d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\" fill=\"#2381D9\" />\n                                          </svg>\n                                          <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                                          <p>Try Adjusting the filters again</p>\n                                      </div>\n                                  </td>\n                              </tr>\n                            </tbody>\n                            </Table>\n                        ) : ''}\n                      </div>\n                    </Col>\n\n                  </div>\n                </div>\n                {/* new design end */}\n              </Col>\n            </Row>\n\n            {/* offcanvas start  */}\n            <Offcanvas\n              isOpen={isRight2}\n              direction=\"end\"\n              toggle={toggleRightCanvas2}\n              id=\"offcanvasRight\"\n              className=\"border-bottom custom-offcavas\"\n              style={{ width: \"600px\" }}\n            >\n              <AddShiftSidebarNew\n                isRight2={isRight2}\n                toggleRightCanvas2={toggleRightCanvas2}\n                shiftDetail={shiftDetail}\n                isEdit={isEdit}\n              />\n            </Offcanvas>\n\n            <Offcanvas\n              isOpen={isRight}\n              direction=\"end\"\n              toggle={toggleRightCanvas}\n              id=\"offcanvasRight\"\n              className=\"border-bottom custom-offcavas\"\n              style={{ width: \"600px\" }}\n            >\n              <AddEmpSideBar\n                isRight={isRight}\n                toggleRightCanvas={toggleRightCanvas}\n              />\n            </Offcanvas>\n\n            <Modal isOpen={isModalOpen} toggle={closeModal} centered={true} className=\"ct-modal-md\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeModal}>\n                Week Off Details\n                <p className=\"paragraph-sm-1 ps-text-grey mb-0\">Please confirm or modify the scheduled week offs for this shift.</p>\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <div className=\"row mb-3\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-1 ps-text-grey\">Saturday<sub>(Occasional working)</sub></p></div>\n                  <div className=\"col-xl-6 col-md-6\">\n                    <div className=\"d-flex week-square-wrap\">\n                      <p className=\"table-week-square square-grey-border-circle me-2\">1</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">2</p>\n                      <p className=\"table-week-square square-grey-border-circle me-2\">3</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">4</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-1 ps-text-grey\">Saturday</p></div>\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2\">Every Week Off</p></div>\n                </div>\n\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeModal}\n                >\n                  Modify\n                </button>\n\n                <button type=\"button\" className=\"btn w-sm btn-blue\" id=\"delete-record\" onClick={openModal2}>Confirm</button>\n              </div>\n            </Modal>\n\n            {/* Success created shift             */}\n            <Modal isOpen={isModalOpen2} toggle={closeModal2} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeModal2}>\n                Shift Created successfully!\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <p>If you'd like, you can assign it to employees now or choose \"Later\".</p>\n\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeModal2}\n                >\n                  Later\n                </button>\n\n                <Link to=\"/employees-shifts-assign-new\">\n                <button type=\"button\" className=\"btn w-sm btn-blue\" >Assign Shift</button></Link>\n              </div>\n            </Modal>\n\n            {/* conform save start */}\n            <Modal isOpen={isconform} toggle={closeConformModal} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeConformModal}>\n                Week Off Details\n                <p className=\"paragraph-sm-1 ps-text-grey mb-0\">Please confirm or modify the scheduled week offs for this shift.</p>\n              </ModalHeader>\n\n              <ModalBody className=\"p-3\">\n                {daysOfWeek && daysOfWeek.map((day,index) => (\n                  <React.Fragment key={`confirm-${day}-${index}`}>\n                  \n                    {weekOffChecked[modelShiftId]?.[day] === true && selectedWeeksOfMonths[modelShiftId]?.[day]?.length > 0 && (\n                      <div className=\"row mb-3\">\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2 ps-text-grey\">{day}<sub>(Occasional working)</sub></p>\n                        </div>\n                        <div className=\"col-xl-6 col-md-6\">\n                          <div className=\"d-flex week-square-wrap\">\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(1) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>1</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(2) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>2</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(3) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>3</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(4) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>4</p>\n                              <p className={`table-week-square ${selectedWeeksOfMonths[modelShiftId]?.[day].includes(5) ? 'square-blue-border-circle' : 'square-grey-border-circle'} me-2`}>5</p>\n                            </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {weekOffChecked[modelShiftId]?.[day] === true && (!selectedWeeksOfMonths[modelShiftId]?.[day] || selectedWeeksOfMonths[modelShiftId]?.[day]?.length === 0) && (\n\n                      <div className=\"row mb-3\">\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2 ps-text-grey\">{day}</p>\n                        </div>\n                        <div className=\"col-xl-6 col-md-6\">\n                          <p className=\"paragraph-sm-2\">Every Week Off</p>\n                        </div>\n                      </div>\n                    )}\n                  </React.Fragment>\n                ))}\n              </ModalBody>\n\n              {/* <ModalBody className=\"p-3\">\n\n                \n                <div className=\"row mb-2\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2 ps-text-grey\">Saturday<sub>(Occasional working)</sub></p></div>\n                  <div className=\"col-xl-6 col-md-6\">\n                    <div className=\"d-flex week-square-wrap\">\n                      <p className=\"table-week-square square-grey-border-circle me-2\">1</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">2</p>\n                      <p className=\"table-week-square square-grey-border-circle me-2\">3</p>\n                      <p className=\"table-week-square square-blue-border-circle me-2\">4</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2 ps-text-grey\">Saturday</p></div>\n                  <div className=\"col-xl-6 col-md-6\"><p className=\"paragraph-sm-2\">Every Week Off</p></div>\n\n                </div>\n\n              </ModalBody> */}\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeConformModal}\n                >\n                  Modify\n                </button>\n\n                <button type=\"button\" disabled={error ? null : loading ? true : false} className=\"btn w-sm btn-blue\" id=\"delete-record\" onClick={() => handleSave(modelShiftId,1)}>{error ? null : loading ? <Spinner size=\"sm\" className='me-2'> Loading... </Spinner> : null}Confirm</button>\n              </div>\n            </Modal>\n            {/* conform save end */}\n\n            {/* delet modal start  */}\n            <Modal isOpen={isdelet} toggle={closeDeletModal} centered={true} className=\"ct-modal\">\n              <ModalHeader className=\"modal-title border-bottom p-3\"\n                id=\"myModalLabel\" onClick={closeDeletModal}>\n                Delete Shift\n              </ModalHeader>\n              <ModalBody className=\"p-3\">\n                <p>Are you sure you want to delete this shift?This action cannot be undone. </p>\n              </ModalBody>\n              <div className=\"modal-footer border-top p-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn w-sm btn-light\"\n                  data-bs-dismiss=\"modal\"\n                  onClick={closeDeletModal}\n                >\n                  Cancel\n                </button>\n\n                <button type=\"button\" className=\"btn w-sm btn-blue\" id=\"delete-record\">Delete</button>\n              </div>\n            </Modal>\n            {/* delet modal end */}\n\n            {/*set working hour sidebar start  */}\n            <Offcanvas isOpen={workHour} toggle={workHourFun} direction=\"end\" className=\"border-bottom custom-offcavas\" style={{ width: \"500px\" }}>\n              < SetWokringHoursForm toggleRightCanvas2={workHourFun} workingHrsDetail={workingHrsData} />\n            </Offcanvas>\n\n            <Offcanvas isOpen={shiftLogs} toggle={shiftLogsFun} direction=\"end\" className=\"border-bottom custom-offcavas\" style={{ width: \"600px\" }}>\n               <ShiftLogSideBar shiftLogsFun={shiftLogsFun} filterNone={'filterNone'} shiftLogsDetails={shiftLogsDetails} />\n            </Offcanvas>\n            {/*set working hour sidebar start  */}\n\n            <ConfirmationModalNew\n                show={showModal}\n                onConfirmClick={formik.handleSubmit}\n                onCloseClick={closeConfirmationModal}\n                heading={\"Save Changes?\"}\n                infoText={modalConfirmationText}\n                showConfirmBtn={true}\n                closeBtnTitle=\"Proceed Anyway\"\n                confirmBtnTitle=\"Yes, Save\"\n                isConfirmBtnLoading={loading}\n            />\n\n\n            <ConfirmationModalNew\n              show={showShiftDeleteFail}\n              onCloseClick={() => {setShowShiftDeleteFail(false)}}\n              heading={deleteModalData?.title}\n              infoText={deleteModalData?.description}\n              showConfirmBtn={false}\n              closeBtnTitle=\"Ok\"\n              isConfirmBtnLoading={loading}\n            />\n        </div>\n        </div>\n      </React.Fragment>\n  );\n};\n\nexport default ShiftTimeNew;","structuredPatch":[{"oldStart":234,"oldLines":9,"newStart":234,"newLines":11,"lines":["     [toggleRightCanvas2]","   );"," ","+  // Delete modal state management","   const [deleteModal, setDeleteModal] = useState(false);","   const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false);"," ","+  // Handle shift deletion with validation for assigned employees","   const onClickDelete = (shift) => {"," ","     if(shift.employee_count > 0) {"]},{"oldStart":268,"oldLines":6,"newStart":270,"newLines":7,"lines":["     }","   };"," ","+  // Close delete modal and refresh data after successful deletion","   useEffect(() => {","     if (isShiftDeleted) {","       setDeleteModal(false);"]},{"oldStart":275,"oldLines":6,"newStart":278,"newLines":7,"lines":["     }","   }, [isShiftDeleted, dispatch])"," ","+  // Execute shift deletion","   const handleDeleteShift = () => {","     if (shiftDetail) {","       dispatch(deleteShiftNew(shiftDetail.id));"]},{"oldStart":282,"oldLines":17,"newStart":286,"newLines":22,"lines":["     }","   };"," ","+  // UI state for expandable table rows","   const [expandedRow, setExpandedRow] = useState(null);"," ","+  // Days of week array for shift scheduling","   const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];"," ","+  // Modal state management","   const [isModalOpen, setIsModalOpen] = useState(false);"," ","+  // Working hours modal toggle","   const [workHour, setworkHour] = useState(false);","   const workHourFun = () => {","       setworkHour(!workHour);","   }"," ","+  // Shift logs modal toggle","   const [shiftLogs, setShiftLogs] = useState(false);","   const shiftLogsFun = () => {","       setShiftLogs(!shiftLogs);"]},{"oldStart":336,"oldLines":24,"newStart":345,"newLines":30,"lines":["   };"," "," ","+  // Time management state - tracks initial and current time values for shifts","   const [initialFromTimes, setInitialFromTimes] = useState({});","   const [initialToTimes, setInitialToTimes] = useState({});","   const [timeValues, setTimeValues] = useState({});","   const [commonDiffHours, setCommonDiffHours] = useState({});"," ","+  // Additional time tracking for onChange events","   const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({});","   const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({});"," ","+  // Occasional/flexible shift visibility controls","   const [occasionalVisible, setOccasionalVisible] = useState({});","   const [occasionalDayVisible, setOccasionalDayVisible] = useState({});"," ","+  // Week selection for monthly schedules","   const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([]);"," ","+  // Selection state tracking","   const [allValuesSelected, setAllValuesSelected] = useState({});"," ","+  // Week-off checkbox state","   const [weekOffChecked, setWeekOffChecked] = useState({}); "," ","-  //from closed","+  // Handle time picker close event for 'from' time - manages time synchronization across days","   const handleFromTimeClose = (event, shiftId, updatedState = {}) => {"," ","       let day = updatedState[shiftId]?.daz || '';"]}],"userModified":false}}
{"parentUuid":"cd8b01ea-13e7-4caa-8e16-163537a32554","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01LPppxEH9q9hHE1k3juPqtA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01R1kTFhiw69Ufzdtx5vDepa","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"completed"},{"id":"2","content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"completed"},{"id":"3","content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"in_progress"},{"id":"4","content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending"},{"id":"5","content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending"},{"id":"6","content":"Continue processing remaining chunks until file is complete","status":"pending"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1975,"cache_read_input_tokens":28754,"output_tokens":261,"service_tier":"standard"}},"requestId":"req_011CRrzwEcfgDNTJ9ZNtrfUt","uuid":"cbb252a8-beb2-4a14-9855-6a5f02732834"}
{"parentUuid":"cbb252a8-beb2-4a14-9855-6a5f02732834","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01R1kTFhiw69Ufzdtx5vDepa","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"c09e5503-1f10-4098-a984-73c11352bf1f","timestamp":"2025-08-06T19:24:07.077Z","toolUseResult":{"oldTodos":[{"content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"completed","id":"1"},{"content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"in_progress","id":"2"},{"content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"pending","id":"3"},{"content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending","id":"4"},{"content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending","id":"5"},{"content":"Continue processing remaining chunks until file is complete","status":"pending","id":"6"}],"newTodos":[{"content":"Read and add comments to lines 1-200 of ShiftTimeNew.js","status":"completed","id":"1"},{"content":"Read and add comments to lines 201-400 of ShiftTimeNew.js","status":"completed","id":"2"},{"content":"Read and add comments to lines 401-600 of ShiftTimeNew.js","status":"in_progress","id":"3"},{"content":"Read and add comments to lines 601-800 of ShiftTimeNew.js","status":"pending","id":"4"},{"content":"Read and add comments to lines 801-1000 of ShiftTimeNew.js","status":"pending","id":"5"},{"content":"Continue processing remaining chunks until file is complete","status":"pending","id":"6"}]}}
{"parentUuid":"c09e5503-1f10-4098-a984-73c11352bf1f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01MtBydzV83dxRQbq6nk4Wyb","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me read lines 401-600:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1089,"cache_read_input_tokens":30729,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRrzwkZUuXcE5Xmu3N9co","uuid":"7f6e559c-279d-4135-8f92-5ec68634933c"}
{"parentUuid":"7f6e559c-279d-4135-8f92-5ec68634933c","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01MtBydzV83dxRQbq6nk4Wyb","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01CWRdiDHBNaA8b5Qrgmafra","name":"Read","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","offset":401,"limit":200}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1089,"cache_read_input_tokens":30729,"output_tokens":124,"service_tier":"standard"}},"requestId":"req_011CRrzwkZUuXcE5Xmu3N9co","uuid":"c40647ed-1669-4849-95d6-319a13b22b89"}
{"parentUuid":"c40647ed-1669-4849-95d6-319a13b22b89","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01CWRdiDHBNaA8b5Qrgmafra","type":"tool_result","content":"   401→                }));\n   402→\n   403→                setInitialFromTimes(prevState => ({\n   404→                  ...prevState,\n   405→                  [shiftId]: {\n   406→                    ...prevState[shiftId],\n   407→                    [copyDay]: newTime,\n   408→                  },\n   409→                }));\n   410→                \n   411→                let diffHours = 0;\n   412→                if(initialToTimes[shiftId]?.[copyDay]) {\n   413→                  const fromTime = dayjs(newTime);\n   414→                  const toTime = dayjs(initialToTimes[shiftId]?.[copyDay]);\n   415→\n   416→                  diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n   417→\n   418→                  if (diffHours <= 0) {\n   419→                    diffHours = 24 + diffHours;\n   420→                  }\n   421→                  diffHours = Math.round(diffHours * 10) / 10;\n   422→                }\n   423→                \n   424→                setCommonDiffHours(prevState => ({\n   425→                  ...prevState,\n   426→                  [shiftId]: {\n   427→                    ...prevState[shiftId],\n   428→                    [copyDay]: diffHours,\n   429→                  },\n   430→                }));\n   431→\n   432→              }\n   433→            });\n   434→          }\n   435→        }\n   436→\n   437→        setTimeValues(prevState => ({\n   438→          ...prevState,\n   439→          [shiftId]: {\n   440→            ...prevState[shiftId],\n   441→            [day]: {\n   442→              ...prevState[shiftId][day],\n   443→              from: newTime,\n   444→            },\n   445→          },\n   446→        }));\n   447→\n   448→        let fromValue = newTime;\n   449→        let toValue = timeValues[shiftId]?.[day]?.to;\n   450→        let fromTime;\n   451→        let toTime;\n   452→        let diffHours = 0;\n   453→\n   454→        if(toValue) {\n   455→          if(isFirstRowOpen) {\n   456→            fromTime = dayjs(fromValue)\n   457→            toTime = dayjs(toValue)\n   458→            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n   459→          } else {\n   460→            fromTime = dayjs(convertToDate(fromValue))\n   461→            toTime = dayjs(convertToDate(toValue))\n   462→            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n   463→          }\n   464→        \n   465→          if (diffHours <= 0) {\n   466→            diffHours = 24 + diffHours;\n   467→          }\n   468→          diffHours = Math.round(diffHours * 10) / 10;\n   469→        }\n   470→\n   471→        setCommonDiffHours(prevState => ({\n   472→          ...prevState,\n   473→          [shiftId]: {\n   474→            ...prevState[shiftId],\n   475→            [day]: diffHours,\n   476→          },\n   477→        }));\n   478→      }\n   479→  }\n   480→  //from onchange\n   481→  const handleFromTimeChange = (day, newTime, shiftId) => {\n   482→\n   483→    setInitialOnChangeFromTimes(prevState => ({\n   484→      ...prevState,\n   485→      [shiftId]: {\n   486→        ...prevState[shiftId],\n   487→        'newTimez': newTime,\n   488→        'daz' : day\n   489→      },\n   490→    }));\n   491→\n   492→    const updatedState = {\n   493→      ...initialOnChangeFromTimes,\n   494→      [shiftId]: {\n   495→        ...initialOnChangeFromTimes[shiftId],\n   496→        'newTimez': newTime,\n   497→        'daz': day,\n   498→      },\n   499→    };\n   500→\n   501→    handleFromTimeClose({}, shiftId, updatedState);\n   502→  };\n   503→  \n   504→  //to closed\n   505→  const handleToTimeClose = (event, shiftId, updatedState = {}) => {\n   506→\n   507→    let day = updatedState[shiftId]?.daz || '';\n   508→    let newTime = updatedState[shiftId]?.newTimez || '';\n   509→\n   510→    if( day !== '' && newTime !== '') {\n   511→      if (!initialToTimes[shiftId]?.[day]) {\n   512→        setInitialToTimes(prevState => ({\n   513→          ...prevState,\n   514→          [shiftId]: {\n   515→            ...prevState[shiftId],\n   516→            [day]: newTime,\n   517→          },\n   518→        }));\n   519→\n   520→        if(parseInt(shiftId) === 0) {\n   521→          daysOfWeek.forEach(copyDay => {\n   522→            \n   523→            if (copyDay !== day && !initialToTimes[shiftId]?.[copyDay]) {\n   524→\n   525→              setTimeValues(prevState => ({\n   526→                ...prevState,\n   527→                [shiftId]: {\n   528→                  ...prevState[shiftId],\n   529→                  [copyDay]: {\n   530→                    ...(prevState[shiftId]?.[copyDay] || {}),\n   531→                    to: newTime,\n   532→                  },\n   533→                },\n   534→              }));\n   535→              \n   536→              setInitialToTimes(prevState => ({\n   537→                ...prevState,\n   538→                [shiftId]: {\n   539→                  ...prevState[shiftId],\n   540→                  [copyDay]: newTime,\n   541→                },\n   542→              }));\n   543→\n   544→              let diffHours = 0;\n   545→              if(initialFromTimes[shiftId]?.[copyDay]) {\n   546→                const fromTime = dayjs(initialFromTimes[shiftId]?.[copyDay]);\n   547→                const toTime = dayjs(newTime);\n   548→                diffHours = fromTime ? toTime.diff(fromTime, 'hour',true) : 0;\n   549→\n   550→                if (diffHours <= 0) {\n   551→                  diffHours = 24 + diffHours;\n   552→                }\n   553→                diffHours = Math.round(diffHours * 10) / 10;\n   554→              }\n   555→              \n   556→              setCommonDiffHours(prevState => ({\n   557→                ...prevState,\n   558→                [shiftId]: {\n   559→                  ...prevState[shiftId],\n   560→                  [copyDay]: diffHours,\n   561→                },\n   562→              }));\n   563→\n   564→            }\n   565→          });\n   566→        }\n   567→      }\n   568→\n   569→      setTimeValues(prevState => ({\n   570→        ...prevState,\n   571→        [shiftId]: {\n   572→          ...prevState[shiftId],\n   573→          [day]: {\n   574→            ...prevState[shiftId][day],\n   575→            to: newTime,\n   576→          },\n   577→        },\n   578→      }));\n   579→\n   580→      let fromValue = timeValues[shiftId]?.[day]?.from;\n   581→      let toValue = newTime;\n   582→      let fromTime;\n   583→      let toTime;\n   584→      let diffHours = 0;\n   585→\n   586→      if(fromValue) {\n   587→        if(isFirstRowOpen) {\n   588→          fromTime = dayjs(fromValue)\n   589→          toTime = dayjs(toValue)\n   590→          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n   591→        } else {\n   592→          fromTime = dayjs(convertToDate(fromValue))\n   593→          toTime = dayjs(convertToDate(toValue))\n   594→          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n   595→        }\n   596→\n   597→        if (diffHours <= 0) {\n   598→          diffHours = 24 + diffHours;\n   599→        }\n   600→        diffHours = Math.round(diffHours * 10) / 10;\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"673cd2f4-b299-4c88-9efd-13cabf7147c6","timestamp":"2025-08-06T19:24:07.077Z","toolUseResult":{"type":"text","file":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/ShiftTimeNew.js","content":"                }));\n\n                setInitialFromTimes(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: newTime,\n                  },\n                }));\n                \n                let diffHours = 0;\n                if(initialToTimes[shiftId]?.[copyDay]) {\n                  const fromTime = dayjs(newTime);\n                  const toTime = dayjs(initialToTimes[shiftId]?.[copyDay]);\n\n                  diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n\n                  if (diffHours <= 0) {\n                    diffHours = 24 + diffHours;\n                  }\n                  diffHours = Math.round(diffHours * 10) / 10;\n                }\n                \n                setCommonDiffHours(prevState => ({\n                  ...prevState,\n                  [shiftId]: {\n                    ...prevState[shiftId],\n                    [copyDay]: diffHours,\n                  },\n                }));\n\n              }\n            });\n          }\n        }\n\n        setTimeValues(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: {\n              ...prevState[shiftId][day],\n              from: newTime,\n            },\n          },\n        }));\n\n        let fromValue = newTime;\n        let toValue = timeValues[shiftId]?.[day]?.to;\n        let fromTime;\n        let toTime;\n        let diffHours = 0;\n\n        if(toValue) {\n          if(isFirstRowOpen) {\n            fromTime = dayjs(fromValue)\n            toTime = dayjs(toValue)\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          } else {\n            fromTime = dayjs(convertToDate(fromValue))\n            toTime = dayjs(convertToDate(toValue))\n            diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n          }\n        \n          if (diffHours <= 0) {\n            diffHours = 24 + diffHours;\n          }\n          diffHours = Math.round(diffHours * 10) / 10;\n        }\n\n        setCommonDiffHours(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: diffHours,\n          },\n        }));\n      }\n  }\n  //from onchange\n  const handleFromTimeChange = (day, newTime, shiftId) => {\n\n    setInitialOnChangeFromTimes(prevState => ({\n      ...prevState,\n      [shiftId]: {\n        ...prevState[shiftId],\n        'newTimez': newTime,\n        'daz' : day\n      },\n    }));\n\n    const updatedState = {\n      ...initialOnChangeFromTimes,\n      [shiftId]: {\n        ...initialOnChangeFromTimes[shiftId],\n        'newTimez': newTime,\n        'daz': day,\n      },\n    };\n\n    handleFromTimeClose({}, shiftId, updatedState);\n  };\n  \n  //to closed\n  const handleToTimeClose = (event, shiftId, updatedState = {}) => {\n\n    let day = updatedState[shiftId]?.daz || '';\n    let newTime = updatedState[shiftId]?.newTimez || '';\n\n    if( day !== '' && newTime !== '') {\n      if (!initialToTimes[shiftId]?.[day]) {\n        setInitialToTimes(prevState => ({\n          ...prevState,\n          [shiftId]: {\n            ...prevState[shiftId],\n            [day]: newTime,\n          },\n        }));\n\n        if(parseInt(shiftId) === 0) {\n          daysOfWeek.forEach(copyDay => {\n            \n            if (copyDay !== day && !initialToTimes[shiftId]?.[copyDay]) {\n\n              setTimeValues(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: {\n                    ...(prevState[shiftId]?.[copyDay] || {}),\n                    to: newTime,\n                  },\n                },\n              }));\n              \n              setInitialToTimes(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: newTime,\n                },\n              }));\n\n              let diffHours = 0;\n              if(initialFromTimes[shiftId]?.[copyDay]) {\n                const fromTime = dayjs(initialFromTimes[shiftId]?.[copyDay]);\n                const toTime = dayjs(newTime);\n                diffHours = fromTime ? toTime.diff(fromTime, 'hour',true) : 0;\n\n                if (diffHours <= 0) {\n                  diffHours = 24 + diffHours;\n                }\n                diffHours = Math.round(diffHours * 10) / 10;\n              }\n              \n              setCommonDiffHours(prevState => ({\n                ...prevState,\n                [shiftId]: {\n                  ...prevState[shiftId],\n                  [copyDay]: diffHours,\n                },\n              }));\n\n            }\n          });\n        }\n      }\n\n      setTimeValues(prevState => ({\n        ...prevState,\n        [shiftId]: {\n          ...prevState[shiftId],\n          [day]: {\n            ...prevState[shiftId][day],\n            to: newTime,\n          },\n        },\n      }));\n\n      let fromValue = timeValues[shiftId]?.[day]?.from;\n      let toValue = newTime;\n      let fromTime;\n      let toTime;\n      let diffHours = 0;\n\n      if(fromValue) {\n        if(isFirstRowOpen) {\n          fromTime = dayjs(fromValue)\n          toTime = dayjs(toValue)\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        } else {\n          fromTime = dayjs(convertToDate(fromValue))\n          toTime = dayjs(convertToDate(toValue))\n          diffHours = toTime ? toTime.diff(fromTime, 'hour', true) : 0;\n        }\n\n        if (diffHours <= 0) {\n          diffHours = 24 + diffHours;\n        }\n        diffHours = Math.round(diffHours * 10) / 10;","numLines":200,"startLine":401,"totalLines":2181}}}
{"parentUuid":"673cd2f4-b299-4c88-9efd-13cabf7147c6","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"581bc699-db30-498f-b445-9db469456609","version":"1.0.69","gitBranch":"shift_and_weekoff_revamp","type":"assistant","timestamp":"2025-08-06T19:24:07.077Z","message":{"id":"msg_01NogC5YNxbnQfWeqazWk8iW","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me add comments to this section:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":2517,"cache_read_input_tokens":31818,"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CRrzx8kDwGUCAEKDF9vCq","uuid":"98679cb1-bb41-4f67-bdd3-7476a6c89394"}
