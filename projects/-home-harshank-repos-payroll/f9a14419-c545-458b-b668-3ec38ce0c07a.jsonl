{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f12991e0-fbe7-4c6f-85c4-6ce21f992231","version":"1.0.72","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"text","text":"Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."}]},"isMeta":true,"uuid":"26e29640-550b-4d19-adf2-2a48619b7346","timestamp":"2025-08-11T13:23:23.599Z"}
{"parentUuid":"26e29640-550b-4d19-adf2-2a48619b7346","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f12991e0-fbe7-4c6f-85c4-6ce21f992231","version":"1.0.72","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"text","text":"<command-name>/clear</command-name>\n          <command-message>clear</command-message>\n          <command-args></command-args>"}]},"uuid":"36619f97-f777-4a01-86b0-5ec78e494c2f","timestamp":"2025-08-11T13:23:23.575Z"}
{"parentUuid":"36619f97-f777-4a01-86b0-5ec78e494c2f","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f12991e0-fbe7-4c6f-85c4-6ce21f992231","version":"1.0.72","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"text","text":"<local-command-stdout></local-command-stdout>"}]},"uuid":"6681b328-d581-4fa9-b1c5-a98dc9beea8c","timestamp":"2025-08-11T13:23:23.598Z"}
{"parentUuid":"6681b328-d581-4fa9-b1c5-a98dc9beea8c","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f12991e0-fbe7-4c6f-85c4-6ce21f992231","version":"1.0.72","gitBranch":"shift_and_weekoff_revamp","type":"user","message":{"role":"user","content":[{"type":"text","text":"so in this file i have added weekoff and shift module switch mode functionality, now when i switch between the mode then after api call i need to update the layout menu option somehow or refresh the page fully so component can remount and user can see updated layout menu. @src/Layouts/LayoutMenuData.js , @src/pages/ShiftManagement/CommonShiftTime.js in this file shift switching is happening."}]},"uuid":"386bf4d9-1853-4e54-a5ba-556bf05d3351","timestamp":"2025-08-11T13:26:57.434Z"}
{"parentUuid":"386bf4d9-1853-4e54-a5ba-556bf05d3351","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01RpaqQ9mSJCgJfFPYV13T1z","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll help you solve the issue with updating the layout menu after switching shift module modes. Let me analyze the current code and create a plan."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":63057,"cache_read_input_tokens":0,"output_tokens":5,"service_tier":"standard"}},"requestId":"req_011CS1zvJW5ye4xp5fNAxEtg","uuid":"529414d4-0b65-44e7-a96a-fa4a43b08187"}
{"parentUuid":"529414d4-0b65-44e7-a96a-fa4a43b08187","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01RpaqQ9mSJCgJfFPYV13T1z","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01M6iQa9Jyi8wJxd1VUgwoKo","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"in_progress"},{"id":"2","content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"pending"},{"id":"3","content":"Identify the best approach to refresh layout menu after mode switch","status":"pending"},{"id":"4","content":"Implement solution to update layout menu visibility","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":63057,"cache_read_input_tokens":0,"output_tokens":253,"service_tier":"standard"}},"requestId":"req_011CS1zvJW5ye4xp5fNAxEtg","uuid":"caed47e8-ec63-461f-ae21-d6515c698bf9"}
{"parentUuid":"caed47e8-ec63-461f-ae21-d6515c698bf9","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01M6iQa9Jyi8wJxd1VUgwoKo","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"77e529f9-23cb-4efb-b865-9e94afce6083","timestamp":"2025-08-12T11:38:51.991Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"in_progress","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"pending","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"pending","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"pending","id":"4"}]}}
{"parentUuid":"77e529f9-23cb-4efb-b865-9e94afce6083","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01RApc9nQhw6NVxTAxEPrjKz","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"After analyzing the code, I can see the issue. In `LayoutMenuData.js`, the menu items (specifically the \"Shift Assignment\" and \"Week Off\" items) have their visibility controlled by `shiftModuleMode` state. However, when the shift mode is switched in `CommonShiftTime.js`, the `LayoutMenuData.js` component doesn't get re-rendered because it only reads the shift mode from sessionStorage on initial mount.\n\nHere's the problem:\n\n1. In `LayoutMenuData.js` lines 177-179, `shiftModuleMode` is set from sessionStorage only during the initial useEffect\n2. In `CommonShiftTime.js` lines 1007-1010, the sessionStorage is updated but no mechanism triggers the layout menu to re-read this value\n3. The menu items on lines 485 and 493 in `LayoutMenuData.js` use `shiftModuleMode` to determine visibility, but this state doesn't update after the switch"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":402,"cache_read_input_tokens":63057,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CS1zvv2Wdv7TcoexRUvgJ","uuid":"29491a06-4d64-4833-b806-22cf49876503"}
{"parentUuid":"29491a06-4d64-4833-b806-22cf49876503","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01RApc9nQhw6NVxTAxEPrjKz","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01H8Jx5iNvz2rKWKARMdDm2A","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed"},{"id":"2","content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed"},{"id":"3","content":"Identify the best approach to refresh layout menu after mode switch","status":"in_progress"},{"id":"4","content":"Implement solution to update layout menu visibility","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":402,"cache_read_input_tokens":63057,"output_tokens":401,"service_tier":"standard"}},"requestId":"req_011CS1zvv2Wdv7TcoexRUvgJ","uuid":"afefbcb5-4efb-496e-b1c5-3925a7bfa3e6"}
{"parentUuid":"afefbcb5-4efb-496e-b1c5-3925a7bfa3e6","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01H8Jx5iNvz2rKWKARMdDm2A","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"ee56b278-f9e4-41d3-b1a9-7130b6fe7901","timestamp":"2025-08-12T11:38:51.991Z","toolUseResult":{"oldTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"in_progress","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"pending","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"pending","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"pending","id":"4"}],"newTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"in_progress","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"pending","id":"4"}]}}
{"parentUuid":"ee56b278-f9e4-41d3-b1a9-7130b6fe7901","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01DFSKu6Husjisn5ABzitpGQ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01YU85HLgbGSGa4EWya7NBjY","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed"},{"id":"2","content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed"},{"id":"3","content":"Identify the best approach to refresh layout menu after mode switch","status":"completed"},{"id":"4","content":"Implement solution to update layout menu visibility","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":600,"cache_read_input_tokens":63459,"output_tokens":174,"service_tier":"standard"}},"requestId":"req_011CS1zwisKmUbXmjREGionw","uuid":"b139786f-454c-4f47-b3ad-fe9edd4f16a2"}
{"parentUuid":"b139786f-454c-4f47-b3ad-fe9edd4f16a2","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01YU85HLgbGSGa4EWya7NBjY","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"49883f81-c93c-48f9-b06c-924520c44fc7","timestamp":"2025-08-12T11:38:51.991Z","toolUseResult":{"oldTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"in_progress","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"pending","id":"4"}],"newTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"completed","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"pending","id":"4"}]}}
{"parentUuid":"49883f81-c93c-48f9-b06c-924520c44fc7","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01T7gsBKv6reNty8k7AFAfgB","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01SveZb3vqpubXbUoDqEBV15","name":"ExitPlanMode","input":{"plan":"# Plan: Fix Layout Menu Update After Shift Mode Switch\n\n## Problem\nWhen switching between shift module modes in CommonShiftTime.js, the layout menu doesn't update to show/hide the appropriate menu items because LayoutMenuData.js only reads the shift mode from sessionStorage on initial mount.\n\n## Solution Options (Choose the simplest)\n\n### Option 1: Add Window Reload (Simplest)\n- Uncomment and modify the window.location.reload() in CommonShiftTime.js after successful mode switch\n- This ensures complete component remount and menu update\n\n### Option 2: Add Storage Event Listener (More elegant)\n- Add an event listener in LayoutMenuData.js to listen for sessionStorage changes\n- Update shiftModuleMode state when storage changes\n\n## Implementation Steps\n\n1. **Modify CommonShiftTime.js** (lines 1018-1021):\n   - Uncomment the setTimeout with window.location.reload()\n   - Reduce timeout to 1000ms for faster response\n\n2. **Test the solution**:\n   - Switch between modes and verify menu items update correctly\n   - Ensure no other functionality breaks\n\n## Files to Modify\n- `src/pages/ShiftManagement/CommonShiftTime.js` (1 line change)\n\nThis is the simplest approach that follows the project's preference for minimal changes."}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":373,"cache_read_input_tokens":64059,"output_tokens":356,"service_tier":"standard"}},"requestId":"req_011CS1zx5mBG2cuqqmVQJ1nz","uuid":"1f50190c-fc83-4c7b-a113-b02421714589"}
{"parentUuid":"1f50190c-fc83-4c7b-a113-b02421714589","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"User has approved your plan. You can now start coding. Start with updating your todo list if applicable","tool_use_id":"toolu_01SveZb3vqpubXbUoDqEBV15"}]},"uuid":"46e59bb8-4a89-4a00-975c-5974d57bde1a","timestamp":"2025-08-12T11:38:51.991Z","toolUseResult":{"plan":"# Plan: Fix Layout Menu Update After Shift Mode Switch\n\n## Problem\nWhen switching between shift module modes in CommonShiftTime.js, the layout menu doesn't update to show/hide the appropriate menu items because LayoutMenuData.js only reads the shift mode from sessionStorage on initial mount.\n\n## Solution Options (Choose the simplest)\n\n### Option 1: Add Window Reload (Simplest)\n- Uncomment and modify the window.location.reload() in CommonShiftTime.js after successful mode switch\n- This ensures complete component remount and menu update\n\n### Option 2: Add Storage Event Listener (More elegant)\n- Add an event listener in LayoutMenuData.js to listen for sessionStorage changes\n- Update shiftModuleMode state when storage changes\n\n## Implementation Steps\n\n1. **Modify CommonShiftTime.js** (lines 1018-1021):\n   - Uncomment the setTimeout with window.location.reload()\n   - Reduce timeout to 1000ms for faster response\n\n2. **Test the solution**:\n   - Switch between modes and verify menu items update correctly\n   - Ensure no other functionality breaks\n\n## Files to Modify\n- `src/pages/ShiftManagement/CommonShiftTime.js` (1 line change)\n\nThis is the simplest approach that follows the project's preference for minimal changes.","isAgent":false}}
{"parentUuid":"46e59bb8-4a89-4a00-975c-5974d57bde1a","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01RuvdVs7bcBHVu3PfVgwtZA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_018iDr9YiuvHi2KZwXfwC4se","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed"},{"id":"2","content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed"},{"id":"3","content":"Identify the best approach to refresh layout menu after mode switch","status":"completed"},{"id":"4","content":"Implement solution to update layout menu visibility","status":"in_progress"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":388,"cache_read_input_tokens":64432,"output_tokens":176,"service_tier":"standard"}},"requestId":"req_011CS1zy5ybjmL3eopVmuFSF","uuid":"040e9337-e182-45aa-944a-5b1a3333eb2e"}
{"parentUuid":"040e9337-e182-45aa-944a-5b1a3333eb2e","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018iDr9YiuvHi2KZwXfwC4se","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"b5351159-70a0-4508-91df-01f4d0b8f3a4","timestamp":"2025-08-12T11:38:51.991Z","toolUseResult":{"oldTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"completed","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"pending","id":"4"}],"newTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"completed","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"in_progress","id":"4"}]}}
{"parentUuid":"b5351159-70a0-4508-91df-01f4d0b8f3a4","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_015iLZ2RMwDRt1V2aArBgGzA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now I'll implement the solution by modifying the CommonShiftTime.js file to enable the page reload after a successful mode switch."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":218,"cache_read_input_tokens":64820,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CS1zyULG1XygfWbfsHsc2","uuid":"7860b5f4-1333-4672-811a-a54f714b94a5"}
{"parentUuid":"7860b5f4-1333-4672-811a-a54f714b94a5","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_015iLZ2RMwDRt1V2aArBgGzA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_014ZsHYoVpz5vhEje9Co6M6U","name":"Edit","input":{"file_path":"/home/harshank/repos/payroll/src/pages/ShiftManagement/CommonShiftTime.js","old_string":"                // Optional: Trigger a page refresh to ensure all components reflect the new mode\n                // setTimeout(() => {\n                //     window.location.reload();\n                // }, 1500);","new_string":"                // Trigger a page refresh to ensure all components reflect the new mode\n                setTimeout(() => {\n                    window.location.reload();\n                }, 1000);"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":218,"cache_read_input_tokens":64820,"output_tokens":223,"service_tier":"standard"}},"requestId":"req_011CS1zyULG1XygfWbfsHsc2","uuid":"7e2eb77f-afc3-4686-9376-8c74f56c688c"}
{"parentUuid":"7e2eb77f-afc3-4686-9376-8c74f56c688c","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014ZsHYoVpz5vhEje9Co6M6U","type":"tool_result","content":"The file /home/harshank/repos/payroll/src/pages/ShiftManagement/CommonShiftTime.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n  1014→                \n  1015→                // Show success message\n  1016→                toast.success(response.message || `Successfully switched to ${newMode === 1 ? 'Simple' : 'Advanced'} Shift mode`)\n  1017→                \n  1018→                // Trigger a page refresh to ensure all components reflect the new mode\n  1019→                setTimeout(() => {\n  1020→                    window.location.reload();\n  1021→                }, 1000);\n  1022→            } else {\n  1023→                throw new Error(response.message || 'Failed to switch mode')\n  1024→            }\n  1025→        } catch (error) {"}]},"uuid":"9f5dcb6f-fa3b-470b-8817-d79b71de0766","timestamp":"2025-08-12T11:38:51.991Z","toolUseResult":{"filePath":"/home/harshank/repos/payroll/src/pages/ShiftManagement/CommonShiftTime.js","oldString":"                // Optional: Trigger a page refresh to ensure all components reflect the new mode\n                // setTimeout(() => {\n                //     window.location.reload();\n                // }, 1500);","newString":"                // Trigger a page refresh to ensure all components reflect the new mode\n                setTimeout(() => {\n                    window.location.reload();\n                }, 1000);","originalFile":"import React, { useState, useEffect, useCallback, useRef } from \"react\"\nimport { Offcanvas, Badge } from \"reactstrap\"\nimport noData from \"../../assets/images/no-data.svg\"\nimport { CardBody, Row, Col, Card, Table, Modal, ModalBody, ModalHeader, CardHeader, UncontrolledDropdown, DropdownMenu, DropdownToggle, DropdownItem } from \"reactstrap\"\nimport { toast } from 'react-toastify'\nimport { switchShiftModuleMode } from \"../../helpers/awsapibackend_helper\"\n\n//Import Breadcrumb\nimport SetWokringHoursForm from \"./SetWokringHoursForm\"\nimport dayjs from \"dayjs\"\nimport utc from \"dayjs/plugin/utc\"\n\n//redux\nimport { useSelector, useDispatch } from \"react-redux\"\nimport \"react-toastify/dist/ReactToastify.css\"\n\nimport Skeleton from \"react-loading-skeleton\"\nimport \"react-loading-skeleton/dist/skeleton.css\"\n\nimport {\n    getShiftsNew as onGetShifts,\n    afterSaveShift,\n    deleteShiftNew,\n    addNewShiftNew,\n    updateShiftNew,\n    resetValidationErrors,\n    onGetWorkingHours,\n} from \"../../store/actions\"\n\nimport DeleteModal from \"../../Components/Common/DeleteModal\"\nimport ConfirmationModalNew from \"../../Components/Common/ConfirmationModalNew\"\n\nimport { Link, useNavigate } from \"react-router-dom\"\nimport Header from \"../../Layouts/Header\"\n\nimport * as Yup from \"yup\"\nimport { useFormik } from \"formik\"\n\nimport { userHasRights, moduleName } from \"../../helpers/rights_helper\"\nimport ShiftFormOffcanvas from \"./ShiftFormOffcanvas\"\nimport MyCustomTable from \"../../Components/Common/MyCustomTable\"\nimport { ActionIcon, DeletIcon, EditIcon } from \"../../Components/Common/AllSvgIcons\"\n\nconst CommonShiftTime = () => {\n    const [isMobile, setIsMobile] = useState(window.innerWidth < 720);\n    const handleResize = () => { setIsMobile(window.innerWidth < 720); };\n    useEffect(() => {\n        window.addEventListener(\"resize\", handleResize);\n        return () => { window.removeEventListener(\"resize\", handleResize); };\n    }, []);\n\n    const {\n        shifts,\n        loading,\n        isShiftAdd,\n        isShiftUpdate,\n        isShiftCreated,\n        error,\n        noShiftYet,\n        isShiftDeleted,\n        isShiftDelLoading,\n        isShiftSuccess,\n        validationErrors,\n        workingHrsData,\n    } = useSelector((state) => ({\n        shifts: state.Shift.shifts,\n        isShiftCreated: state.Shift.isShiftCreated,\n        isShiftSuccess: state.Shift.isShiftListSuccess,\n        error: state.Shift.error,\n        noShiftYet: state.Shift.noShiftYet,\n        isShiftDelLoading: state.Shift.isShiftDelLoading,\n        isShiftDeleted: state.Shift.isShiftDelete,\n        loading: state.Shift.loading,\n        isShiftAdd: state.Shift.isShiftAdd,\n        isShiftUpdate: state.Shift.isShiftUpdate,\n        validationErrors: state.Shift.validationErrors,\n        workingHrsData: state.Shift.workingHrsData,\n    }))\n\n    // Enhanced validation schema\n    const validationSchema = Yup.object().shape({\n        shift_name: Yup.array().of(Yup.string().required(\"Shift name is required\")),\n    })\n\n    // Enhanced formik setup\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            shift_name: \"\",\n            shift_description: \"\",\n        },\n        validationSchema: validationSchema,\n        onSubmit: (values) => {\n\n            const shiftNameErrors = {}\n            const fromToErrors = {}\n\n            // ✅ Validate shift name\n            const blockedChar = '¶';\n            if (isFirstRowOpen) {\n                values[\"shift_name_0\"] = values[\"shift_name_0\"].trim();\n                if (!values['shift_name_0']) {\n                    shiftNameErrors['shift_name_0'] = 'Shift name is required';\n                } else if (values['shift_name_0'].includes(blockedChar)) {\n                    shiftNameErrors['shift_name_0'] = 'Special characters are not allowed';\n                }\n            } else {\n                const shiftNameKey = `shift_name_${modelShiftId}`;\n                values[shiftNameKey] = values[shiftNameKey].trim();\n                if (!values[shiftNameKey]) {\n                    shiftNameErrors[shiftNameKey] = 'Shift name is required';\n                } else if (values[shiftNameKey].includes(blockedChar)) {\n                    shiftNameErrors[shiftNameKey] = 'Special characters are not allowed';\n                }\n            }\n\n            // ✅ Validate time fields\n            daysOfWeek.forEach((day) => {\n                const shiftId = isFirstRowOpen ? 0 : modelShiftId\n\n                if (\n                    !weekOffChecked[shiftId]?.[day] ||\n                    (weekOffChecked[shiftId]?.[day] === true && selectedWeeksOfMonths[shiftId]?.[day]?.length > 0)\n                ) {\n                    const fromKey = `shift_from_time_${shiftId}_${day}`\n                    const toKey = `shift_to_time_${shiftId}_${day}`\n                    const fromValue = timeValues[shiftId]?.[day]?.from\n                    const toValue = timeValues[shiftId]?.[day]?.to\n\n                    if (!fromValue) {\n                        fromToErrors[fromKey] = \"From time is required\"\n                    }\n\n                    if (!toValue) {\n                        fromToErrors[toKey] = \"To time is required\"\n                    }\n\n                    if (fromValue && toValue) {\n                        const fromTime = isFirstRowOpen ? dayjs(fromValue) : dayjs(convertToDate(fromValue))\n                        const toTime = isFirstRowOpen ? dayjs(toValue) : dayjs(convertToDate(toValue))\n\n                        const diffHours = toTime ? toTime.diff(fromTime, \"hour\") : 0\n\n                        // Check if to time is greater than from time\n                        if (diffHours === 0 && fromTime.isSame(toTime, \"minute\")) {\n                            fromToErrors[toKey] = \"The shift duration cannot be exactly 24 hours\"\n                        }\n                    }\n                }\n            })\n\n            const shiftDaywiseData = daysOfWeek.map((day, index) => {\n                const fromTime = timeValues[modelShiftId]?.[day]?.from\n                const toTime = timeValues[modelShiftId]?.[day]?.to\n\n                return {\n                    day: index + 1,\n                    from_time: fromTime ? dayjs(fromTime).format(\"HH:mm\") : null,\n                    to_time: toTime ? dayjs(toTime).format(\"HH:mm\") : null\n                }\n            })\n\n            if (!Object.keys(fromToErrors).length) {\n                \n                const overLapDay = validateShiftOverlaps(shiftDaywiseData);\n                \n                if (overLapDay) {\n                    fromToErrors[`shift_from_time_${modelShiftId}_${daysOfWeek[overLapDay - 1]}`] = \"Shift overlap detected\";\n                }\n\n            }\n\n            // ✅ Merge errors\n            const errors = { ...shiftNameErrors, ...fromToErrors }\n\n            if (isFirstRowOpen) {\n                setShowModal(false)\n            }\n\n            if (errors && Object.keys(errors).length > 0) {\n                formik.setErrors(errors)\n            } else {\n                // Proceed with form submission\n                handleSave(modelShiftId, 2)\n            }\n        },\n    })\n\n    const [shiftDetail, setshiftDetail] = useState([])\n    const [deleteModalData, setDeleteModalData] = useState(null)\n    const [isCreateShift, setisCreateShift] = useState(false)\n    const isCreateShiftFun = useCallback(() => {\n        setisCreateShift(!isCreateShift)\n        formik.resetForm();\n    }, [isCreateShift,formik])\n    const [editShiftData, seteditShiftData] = useState(false)\n    const [editShift, seteditShift] = useState(false)\n    const editShiftFun = useCallback(\n        (shiftall) => {\n            seteditShift(!editShift)\n            seteditShiftData(shiftall)\n\n            const initialValues = {}\n            shifts.forEach((shift) => {\n                initialValues[`shift_name_${shift.id}`] = shift.name\n                initialValues[`shift_description_${shift.id}`] = shift.description\n            })\n            formik.setValues(initialValues);\n        },\n        [editShift, shifts, formik],\n    )\n\n    const dispatch = useDispatch()\n    // const navigate = useNavigate()\n\n    // useEffect(() => {\n    //     const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"))\n    //     if (!authUser?.data?.shift_switch_decision_taken) {\n    //         navigate(\"/shiftEntryPage\")\n    //     }\n    // }, [navigate])\n\n    useEffect(() => {\n        if ((shifts && !shifts.length && !noShiftYet) || +sessionStorage.getItem(\"isResetShiftNewList\") === 1) {\n            dispatch(onGetShifts())\n            sessionStorage.setItem(\"isResetShiftNewList\", 0)\n        }\n\n        if (shifts && shifts.length && workingHrsData === undefined) {\n            dispatch(onGetWorkingHours())\n        }\n    }, [dispatch, shifts, noShiftYet, workingHrsData])\n\n    // Initialize shift module mode from session storage\n    useEffect(() => {\n        const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"))\n        if (authUser && authUser.data && authUser.data.shift_module_mode !== undefined) {\n            setCurrentShiftModuleMode(parseInt(authUser.data.shift_module_mode) || 1)\n        }\n    }, [])\n\n    const [isFirstRowOpen, setIsFirstRowOpen] = useState(false)\n    const [modelShiftId, setModelShiftId] = useState(0)\n\n    const [deleteModal, setDeleteModal] = useState(false)\n    const [showShiftDeleteFail, setShowShiftDeleteFail] = useState(false)\n\n    const onClickDelete = (shift) => {\n        if (shift.employee_count > 0) {\n            setShowShiftDeleteFail(true)\n            setDeleteModalData({\n                name: shift.name,\n                title: \"Shift Delete Fail\",\n                description: (\n                    <>\n                        Cannot delete the shift <b>{shift.name}</b>, <br /> because it is currently assigned to{\" \"}\n                        <b>{shift.employee_count}</b> employees, <br /> Please move these employees to a different shift and try\n                        again.\n                    </>\n                ),\n            })\n        } else {\n            setshiftDetail(shift)\n            setDeleteModal(true)\n            setDeleteModalData({\n                name: shift.name,\n                title: \"Delete Shift?\",\n                description: (\n                    <>\n                        Are you sure, You want to delete <br /> <span className=\"ps-word-break\">{shift.name}?</span>\n                    </>\n                ),\n            })\n        }\n    }\n\n    useEffect(() => {\n        if (isShiftDeleted) {\n            setDeleteModal(false)\n            dispatch(afterSaveShift())\n        }\n    }, [isShiftDeleted, dispatch])\n\n    const handleDeleteShift = () => {\n        if (shiftDetail) {\n            dispatch(deleteShiftNew(shiftDetail.id))\n        }\n    }\n\n    const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    const [workHour, setworkHour] = useState(false)\n    const workHourFun = () => {\n        setworkHour(!workHour)\n    }\n\n    const [isModalOpen2, setIsModalOpen2] = useState(false)\n    const closeModal2 = () => {\n        setIsModalOpen2(false)\n\n        // Use setTimeout to handle cleanup after modal closes\n        setTimeout(() => {\n            setisCreateShift(false)\n            seteditShift(false)\n\n            document.body.classList.remove('modal-open')\n            document.body.style.overflow = ''\n            document.body.style.paddingRight = ''\n        }, 600)\n    }\n\n    const [isconform, setConform] = useState(false)\n\n    const [initialFromTimes, setInitialFromTimes] = useState({})\n    const [initialToTimes, setInitialToTimes] = useState({})\n    const [timeValues, setTimeValues] = useState({})\n    const [commonDiffHours, setCommonDiffHours] = useState({})\n\n    const [initialOnChangeFromTimes, setInitialOnChangeFromTimes] = useState({})\n    const [initialOnChangeToTimes, setInitialOnChangeToTimes] = useState({})\n\n    const [occasionalVisible, setOccasionalVisible] = useState({})\n    const [occasionalDayVisible, setOccasionalDayVisible] = useState({})\n\n    const [selectedWeeksOfMonths, setSelectedOccasionalWorkingWeeks] = useState([])\n\n    const [weekOffChecked, setWeekOffChecked] = useState({})\n\n    // Shift Module Mode State\n    const [currentShiftModuleMode, setCurrentShiftModuleMode] = useState(1)\n    const [showModeSwitchModal, setShowModeSwitchModal] = useState(false)\n    const [isSwitchingMode, setIsSwitchingMode] = useState(false)\n\n    // Enhanced from time close handler\n    const handleFromTimeClose = (event, shiftId, updatedState = {}) => {\n        const day = updatedState[shiftId]?.daz || \"\"\n        const newTime = updatedState[shiftId]?.newTimez || \"\"\n\n        if (day !== \"\" && newTime !== \"\") {\n            if (!initialFromTimes[shiftId]?.[day]) {\n                setInitialFromTimes((prevState) => ({\n                    ...prevState,\n                    [shiftId]: {\n                        ...prevState[shiftId],\n                        [day]: newTime,\n                    },\n                }))\n\n                if (Number.parseInt(shiftId) === 0) {\n                    daysOfWeek.forEach((copyDay) => {\n                        if (copyDay !== day && !initialFromTimes[shiftId]?.[copyDay]) {\n                            setTimeValues((prevState) => ({\n                                ...prevState,\n                                [shiftId]: {\n                                    ...prevState[shiftId],\n                                    [copyDay]: {\n                                        ...(prevState[shiftId]?.[copyDay] || {}),\n                                        from: newTime,\n                                    },\n                                },\n                            }))\n\n                            setInitialFromTimes((prevState) => ({\n                                ...prevState,\n                                [shiftId]: {\n                                    ...prevState[shiftId],\n                                    [copyDay]: newTime,\n                                },\n                            }))\n\n                            let diffHours = 0\n                            if (initialToTimes[shiftId]?.[copyDay]) {\n                                const fromTime = dayjs(newTime)\n                                const toTime = dayjs(initialToTimes[shiftId]?.[copyDay])\n\n                                diffHours = toTime ? toTime.diff(fromTime, \"hour\", true) : 0\n\n                                if (diffHours <= 0) {\n                                    diffHours = 24 + diffHours\n                                }\n                                diffHours = Math.round(diffHours * 10) / 10\n                            }\n\n                            setCommonDiffHours((prevState) => ({\n                                ...prevState,\n                                [shiftId]: {\n                                    ...prevState[shiftId],\n                                    [copyDay]: diffHours,\n                                },\n                            }))\n                        }\n                    })\n                }\n            }\n\n            setTimeValues((prevState) => ({\n                ...prevState,\n                [shiftId]: {\n                    ...prevState[shiftId],\n                    [day]: {\n                        ...(prevState[shiftId]?.[day] || {}),\n                        from: newTime,\n                    },\n                },\n            }))\n\n            const fromValue = newTime\n            const toValue = timeValues[shiftId]?.[day]?.to\n            let fromTime\n            let toTime\n            let diffHours = 0\n\n            if (toValue) {\n                if (isFirstRowOpen) {\n                    fromTime = dayjs(fromValue)\n                    toTime = dayjs(toValue)\n                    diffHours = toTime ? toTime.diff(fromTime, \"hour\", true) : 0\n                } else {\n                    fromTime = dayjs(convertToDate(fromValue))\n                    toTime = dayjs(convertToDate(toValue))\n                    diffHours = toTime ? toTime.diff(fromTime, \"hour\", true) : 0\n                }\n\n                if (diffHours <= 0) {\n                    diffHours = 24 + diffHours\n                }\n                diffHours = Math.round(diffHours * 10) / 10\n            }\n\n            setCommonDiffHours((prevState) => ({\n                ...prevState,\n                [shiftId]: {\n                    ...prevState[shiftId],\n                    [day]: diffHours,\n                },\n            }))\n        }\n    }\n\n    // Enhanced from time change handler\n    const handleFromTimeChange = (day, newTime, shiftId) => {\n        setInitialOnChangeFromTimes((prevState) => ({\n            ...prevState,\n            [shiftId]: {\n                ...prevState[shiftId],\n                newTimez: newTime,\n                daz: day,\n            },\n        }))\n\n        const updatedState = {\n            ...initialOnChangeFromTimes,\n            [shiftId]: {\n                ...initialOnChangeFromTimes[shiftId],\n                newTimez: newTime,\n                daz: day,\n            },\n        }\n\n        handleFromTimeClose({}, shiftId, updatedState)\n    }\n\n    // Enhanced to time close handler\n    const handleToTimeClose = (event, shiftId, updatedState = {}) => {\n        const day = updatedState[shiftId]?.daz || \"\"\n        const newTime = updatedState[shiftId]?.newTimez || \"\"\n\n        if (day !== \"\" && newTime !== \"\") {\n            if (!initialToTimes[shiftId]?.[day]) {\n                setInitialToTimes((prevState) => ({\n                    ...prevState,\n                    [shiftId]: {\n                        ...prevState[shiftId],\n                        [day]: newTime,\n                    },\n                }))\n\n                if (Number.parseInt(shiftId) === 0) {\n                    daysOfWeek.forEach((copyDay) => {\n                        if (copyDay !== day && !initialToTimes[shiftId]?.[copyDay]) {\n                            setTimeValues((prevState) => ({\n                                ...prevState,\n                                [shiftId]: {\n                                    ...prevState[shiftId],\n                                    [copyDay]: {\n                                        ...(prevState[shiftId]?.[copyDay] || {}),\n                                        to: newTime,\n                                    },\n                                },\n                            }))\n\n                            setInitialToTimes((prevState) => ({\n                                ...prevState,\n                                [shiftId]: {\n                                    ...prevState[shiftId],\n                                    [copyDay]: newTime,\n                                },\n                            }))\n\n                            let diffHours = 0\n                            if (initialFromTimes[shiftId]?.[copyDay]) {\n                                const fromTime = dayjs(initialFromTimes[shiftId]?.[copyDay])\n                                const toTime = dayjs(newTime)\n                                diffHours = fromTime ? toTime.diff(fromTime, \"hour\", true) : 0\n\n                                if (diffHours <= 0) {\n                                    diffHours = 24 + diffHours\n                                }\n                                diffHours = Math.round(diffHours * 10) / 10\n                            }\n\n                            setCommonDiffHours((prevState) => ({\n                                ...prevState,\n                                [shiftId]: {\n                                    ...prevState[shiftId],\n                                    [copyDay]: diffHours,\n                                },\n                            }))\n                        }\n                    })\n                }\n            }\n\n            setTimeValues((prevState) => ({\n                ...prevState,\n                [shiftId]: {\n                    ...prevState[shiftId],\n                    [day]: {\n                        ...(prevState[shiftId]?.[day] || {}),\n                        to: newTime,\n                    },\n                },\n            }))\n\n            const fromValue = timeValues[shiftId]?.[day]?.from\n            const toValue = newTime\n            let fromTime\n            let toTime\n            let diffHours = 0\n\n            if (fromValue) {\n                if (isFirstRowOpen) {\n                    fromTime = dayjs(fromValue)\n                    toTime = dayjs(toValue)\n                    diffHours = toTime ? toTime.diff(fromTime, \"hour\", true) : 0\n                } else {\n                    fromTime = dayjs(convertToDate(fromValue))\n                    toTime = dayjs(convertToDate(toValue))\n                    diffHours = toTime ? toTime.diff(fromTime, \"hour\", true) : 0\n                }\n\n                if (diffHours <= 0) {\n                    diffHours = 24 + diffHours\n                }\n                diffHours = Math.round(diffHours * 10) / 10\n            }\n\n            setCommonDiffHours((prevState) => ({\n                ...prevState,\n                [shiftId]: {\n                    ...prevState[shiftId],\n                    [day]: diffHours,\n                },\n            }))\n        }\n    }\n\n    // Enhanced to time change handler\n    const handleToTimeChange = (day, newTime, shiftId) => {\n        setInitialOnChangeToTimes((prevState) => ({\n            ...prevState,\n            [shiftId]: {\n                ...prevState[shiftId],\n                newTimez: newTime,\n                daz: day,\n            },\n        }))\n\n        const updatedState = {\n            ...initialOnChangeToTimes,\n            [shiftId]: {\n                ...initialOnChangeToTimes[shiftId],\n                newTimez: newTime,\n                daz: day,\n            },\n        }\n\n        handleToTimeClose({}, shiftId, updatedState)\n    }\n\n    const handleOccasionalWorkingCheckbox = (day, shiftId) => {\n        setOccasionalDayVisible((prevVisible) => {\n            const newVisible = { ...prevVisible }\n\n            if (!newVisible[shiftId]) {\n                newVisible[shiftId] = {}\n            }\n\n            newVisible[shiftId][day] = !newVisible[shiftId][day]\n            return newVisible\n        })\n    }\n\n    // Enhanced week off toggle handler\n    const handleWeekOffToggle = (day, shiftId) => {\n        setWeekOffChecked((prevState) => ({\n            ...prevState,\n            [shiftId]: {\n                ...(prevState[shiftId] || {}),\n                [day]: !(prevState[shiftId]?.[day] || false),\n            },\n        }))\n\n        // Also update occasional visible state\n        setOccasionalVisible((prevState) => ({\n            ...prevState,\n            [shiftId]: {\n                ...prevState[shiftId],\n                [day]: !(prevState[shiftId]?.[day] || false),\n            },\n        }))\n    }\n\n    // Enhanced occasional working weeks selection\n    const handleOccasionalWeekSelection = (day, shiftId, weekNumber) => {\n        setSelectedOccasionalWorkingWeeks((prevState) => {\n            const newState = { ...prevState }\n\n            if (!newState[shiftId]) {\n                newState[shiftId] = {}\n            }\n\n            if (!newState[shiftId][day]) {\n                newState[shiftId][day] = []\n            }\n\n            const index = newState[shiftId][day].indexOf(weekNumber)\n\n            if (index === -1) {\n                newState[shiftId][day] = [...newState[shiftId][day], weekNumber]\n            } else {\n                newState[shiftId][day] = newState[shiftId][day].filter((week) => week !== weekNumber)\n            }\n\n            return newState\n        })\n    }\n\n    dayjs.extend(utc)\n\n    // Enhanced toggle accordion with better state management\n    const toggleAccordion = (rowIndex, shiftall) => {\n        editShiftFun(shiftall)\n        setModelShiftId(rowIndex) // ✅ Set the current shift ID being edited\n        setIsFirstRowOpen(false);\n\n        if (shifts && shifts.length > 0 && rowIndex > 0) {\n            const matchedShift = shifts.find((shift) => shift.id === Number.parseInt(rowIndex))\n            const shiftId = rowIndex\n\n            if (matchedShift && matchedShift.shift_daywise_data) {\n                try {\n                    const shiftDayData = JSON.parse(matchedShift.shift_daywise_data)\n                    const weekOffState = {} // ✅ Initialize weekoff state for this shift\n\n                    daysOfWeek.forEach((copyDay, index) => {\n                        const dayData = shiftDayData.find((data) => data.day === index + 1)\n\n                        if (!dayData) {\n                            return\n                        }\n\n                        // ✅ Set time values with proper error handling\n                        setTimeValues((prevState) => ({\n                            ...prevState,\n                            [shiftId]: {\n                                ...prevState[shiftId],\n                                [copyDay]: {\n                                    ...(prevState[shiftId]?.[copyDay] || {}),\n                                    from: dayData.from_time ? convertTo24Hrs(dayData.from_time) : null,\n                                    to: dayData.to_time ? convertTo24Hrs(dayData.to_time) : null,\n                                },\n                            },\n                        }))\n\n                        // ✅ Set initial from times\n                        setInitialFromTimes((prevState) => ({\n                            ...prevState,\n                            [shiftId]: {\n                                ...prevState[shiftId],\n                                [copyDay]: dayData.from_time ? convertTo24Hrs(dayData.from_time) : null,\n                            },\n                        }))\n\n                        // ✅ Set initial to times\n                        setInitialToTimes((prevState) => ({\n                            ...prevState,\n                            [shiftId]: {\n                                ...prevState[shiftId],\n                                [copyDay]: dayData.to_time ? convertTo24Hrs(dayData.to_time) : null,\n                            },\n                        }))\n\n                        // ✅ Calculate and set diff hours\n                        let diffHours = 0\n                        if (dayData.from_time && dayData.to_time) {\n                            const fromTime = convertTo24Hrs(dayData.from_time)\n                            const toTime = convertTo24Hrs(dayData.to_time)\n                            diffHours = toTime && fromTime ? dayjs(toTime).diff(dayjs(fromTime), \"hour\", true) : 0\n\n                            if (diffHours <= 0) {\n                                diffHours = 24 + diffHours\n                            }\n                            diffHours = Math.round(diffHours * 10) / 10\n                        }\n\n                        setCommonDiffHours((prevState) => ({\n                            ...prevState,\n                            [shiftId]: {\n                                ...prevState[shiftId],\n                                [copyDay]: diffHours,\n                            },\n                        }))\n\n                        // ✅ Set weekoff status\n                        weekOffState[copyDay] = dayData.is_weekoff ? true : false\n\n                        // ✅ Set occasional visible\n                        setOccasionalVisible((prevState) => ({\n                            ...prevState,\n                            [shiftId]: {\n                                ...prevState[shiftId],\n                                [copyDay]: dayData.is_weekoff ? true : false,\n                            },\n                        }))\n\n                        // ✅ Set occasional day visible\n                        dayData.occasional_working_days = dayData.occasional_working_days ? dayData.occasional_working_days : []\n                        setOccasionalDayVisible((prevState) => ({\n                            ...prevState,\n                            [shiftId]: {\n                                ...prevState[shiftId],\n                                [copyDay]: dayData.is_weekoff === 1 && dayData.occasional_working_days.length > 0 ? true : false,\n                            },\n                        }))\n\n                        // ✅ Set selected occasional working weeks\n                        setSelectedOccasionalWorkingWeeks((prevState) => ({\n                            ...prevState,\n                            [shiftId]: {\n                                ...prevState[shiftId],\n                                [copyDay]: dayData.occasional_working_days,\n                            },\n                        }))\n                    })\n\n                    // ✅ Update weekOffChecked state with all days at once\n                    setWeekOffChecked((prevState) => ({\n                        ...prevState,\n                        [shiftId]: weekOffState,\n                    }))\n                } catch (error) {\n                    console.error(\"Error parsing shift daywise data:\", error)\n                }\n            }\n        }\n    }\n\n    // Enhanced save handler with better error handling and state preservation\n    const handleSave = async (shiftId = 0, isConfirmModel = 2) => {\n        if (isConfirmModel === 1) {\n            setConform(false)\n        }\n\n        // ✅ Check for occasional working days confirmation\n        if (\n            isConfirmModel === 2 &&\n            ((Array.isArray(selectedWeeksOfMonths) && selectedWeeksOfMonths.length > 0) ||\n                (typeof selectedWeeksOfMonths === \"object\" &&\n                    selectedWeeksOfMonths !== null &&\n                    Object.keys(selectedWeeksOfMonths).length > 0))\n        ) {\n            let isAnyDayTrue = false\n\n            for (const day of daysOfWeek) {\n                if (selectedWeeksOfMonths?.[shiftId]?.[day] && selectedWeeksOfMonths?.[shiftId]?.[day].length > 0) {\n                    isAnyDayTrue = true\n                    break\n                }\n            }\n\n            if (isAnyDayTrue) {\n                setModelShiftId(shiftId)\n                setConform(true)\n                return false\n            }\n        }\n\n        // ✅ Get form values with better error handling\n        const shiftNameInput = document.querySelector(`input[name=\"shift_name_${shiftId}\"]`)\n        const shiftDescriptionsInput = document.querySelector(`textarea[id=\"shift_description_${shiftId}\"]`)\n\n        if (!shiftNameInput || !shiftNameInput.value.trim()) {\n            console.error(\"Shift name is required\")\n            return\n        }\n\n        const shiftName = shiftNameInput.value?.trim()\n        const shiftDescriptions = shiftDescriptionsInput ? shiftDescriptionsInput.value : \"\"\n\n        // ✅ Prepare shift daywise data with proper validation\n        const shiftDaywiseData = daysOfWeek.map((day, index) => {\n            const fromTime = timeValues[shiftId]?.[day]?.from\n            const toTime = timeValues[shiftId]?.[day]?.to\n\n            return {\n                day: index + 1,\n                from_time: fromTime ? dayjs(fromTime).format(\"HH:mm\") : null,\n                to_time: toTime ? dayjs(toTime).format(\"HH:mm\") : null,\n                is_weekoff: weekOffChecked[shiftId]?.[day] ? 1 : 0,\n                occasional_working_days: selectedWeeksOfMonths[shiftId]?.[day] ?? [],\n            }\n        })\n\n        // ✅ Prepare shift data for API\n        const shiftData = {\n            shift_daywise_data: shiftDaywiseData,\n            shift_name: shiftName,\n            shift_description: shiftDescriptions,\n        }\n\n        try {\n            // ✅ Update or create shift based on ID\n            if (shiftId > 0) {\n                shiftData.id = shiftId\n                dispatch(updateShiftNew(shiftData))\n            } else {\n                dispatch(addNewShiftNew(shiftData))\n            }\n        } catch (error) {\n            console.error(\"Error saving shift:\", error)\n        }\n    }\n\n    const [isInitValAdd, setInitValAdd] = useState(false)\n    const isInitValAddRef = useRef(false)\n\n    // ✅ Enhanced effect for handling shift add/update success\n    useEffect(() => {\n        if (isShiftAdd || isShiftUpdate) {\n            dispatch(onGetWorkingHours())\n            resetAllData()\n            setIsFirstRowOpen(false)\n            setConform(false)\n            setModelShiftId(0)\n            dispatch(afterSaveShift())\n            setInitValAdd(false)\n            formik.resetForm()\n            if (isShiftAdd) {\n                setIsModalOpen2(true)\n                setisCreateShift(false)\n            }\n            // ✅ Close edit modal after successful update\n            if (isShiftUpdate) {\n                seteditShift(false)\n                seteditShiftData(false)\n            }\n        }\n    }, [formik, isShiftAdd, isShiftUpdate, dispatch])\n\n    // ✅ Enhanced effect for handling validation errors and form initialization\n    useEffect(() => {\n        const isInitValAdd = isInitValAddRef.current\n\n        if (validationErrors && Object.keys(validationErrors).length > 0) {\n            formik.setErrors(validationErrors)\n            setTimeout(() => {\n                dispatch(resetValidationErrors())\n            }, 3000)\n        }\n\n        if (shifts && shifts.length > 0 && (!isInitValAdd || isShiftAdd || isShiftUpdate)) {\n            isInitValAddRef.current = true\n            setInitValAdd(true)\n            const initialValues = {}\n\n            shifts.forEach((shift) => {\n                initialValues[`shift_name_${shift.id}`] = shift.name\n                initialValues[`shift_description_${shift.id}`] = shift.description\n            })\n            formik.setValues(initialValues)\n        }\n    }, [formik, shifts, validationErrors, dispatch, isInitValAdd, isShiftAdd, isShiftUpdate])\n\n    // ✅ Enhanced time conversion functions\n    const convertTo24Hrs = (time) => {\n        if (time) {\n            try {\n                const [hoursStr, minutesStr] = time.split(\":\")\n                let hours = Number.parseInt(hoursStr)\n                const minutes = Number.parseInt(minutesStr)\n\n                // Adjust hours for PM times\n                if (time.includes(\"PM\") && hours < 12) {\n                    hours += 12\n                }\n\n                // Adjust hours for 12 AM\n                if (time.includes(\"AM\") && hours === 12) {\n                    hours = 0\n                }\n\n                // Create a Date object with the adjusted hours and minutes\n                const dateObj = new Date()\n                dateObj.setHours(hours)\n                dateObj.setMinutes(minutes)\n\n                return dateObj\n            } catch (error) {\n                console.error(\"Error converting time to 24hrs:\", error)\n                return null\n            }\n        } else {\n            return null\n        }\n    }\n\n    const convertToDate = (time) => {\n        if (typeof time === \"string\" && time.includes(\":\")) {\n            try {\n                const currentDate = new Date()\n                const TimeParts = time.split(\":\")\n                currentDate.setHours(Number(TimeParts[0]), Number(TimeParts[1]), 0, 0)\n                return currentDate\n            } catch (error) {\n                console.error(\"Error converting to date:\", error)\n                return time\n            }\n        } else {\n            return time\n        }\n    }\n\n    // ✅ Enhanced reset function\n    const resetAllData = () => {\n        setInitialFromTimes({})\n        setInitialToTimes({})\n        setTimeValues({})\n        setCommonDiffHours({})\n        setInitialOnChangeFromTimes({})\n        setInitialOnChangeToTimes({})\n        setOccasionalVisible({})\n        setOccasionalDayVisible({})\n        setSelectedOccasionalWorkingWeeks([])\n        setWeekOffChecked({})\n    }\n\n    const [showModal, setShowModal] = useState(false)\n\n    const closeConfirmationModal = () => {\n        formik.resetForm()\n        setIsFirstRowOpen(false)\n        setShowModal(false)\n        resetAllData()\n    }\n\n    const pageHistory = useNavigate()\n\n    const handleSaveShift = () => {\n        setShowModal(false)\n        isCreateShiftFun()\n        formik.handleSubmit()\n    }\n\n    const onClosedUnsaveModelClick = () => {\n        formik.resetForm()\n        setIsFirstRowOpen(false)\n        setShowModal(false)\n        resetAllData()\n        pageHistory(-1)\n    }\n\n    // Shift Module Mode switching functions\n    const handleModeSwitchClick = () => {\n        if (currentShiftModuleMode === 2) {\n            // Show confirmation modal for 2->1 switch\n            setShowModeSwitchModal(true)\n        } else {\n            // Direct switch from 1->2\n            handleModeSwitch(2)\n        }\n    }\n\n    const handleModeSwitch = async (newMode) => {\n        setIsSwitchingMode(true)\n        try {\n            // Prepare API data\n            const requestData = {\n                method: 'switch_shift_module_mode',\n                shift_module_mode_change: newMode\n            }\n\n            // Make API call to switch mode\n            const response = await switchShiftModuleMode(requestData)\n\n            if (response && response.status === 1) {\n                // Update session storage\n                const authUser = JSON.parse(sessionStorage.getItem(\"authUser\"))\n                authUser.data.shift_module_mode = newMode\n                sessionStorage.setItem(\"authUser\", JSON.stringify(authUser))\n                \n                // Update local state\n                setCurrentShiftModuleMode(newMode)\n                \n                // Show success message\n                toast.success(response.message || `Successfully switched to ${newMode === 1 ? 'Simple' : 'Advanced'} Shift mode`)\n                \n                // Optional: Trigger a page refresh to ensure all components reflect the new mode\n                // setTimeout(() => {\n                //     window.location.reload();\n                // }, 1500);\n            } else {\n                throw new Error(response.message || 'Failed to switch mode')\n            }\n        } catch (error) {\n            console.error('Error switching shift mode:', error)\n            toast.error(error.message || 'Failed to switch shift mode. Please try again.')\n        } finally {\n            setIsSwitchingMode(false)\n            setShowModeSwitchModal(false)\n        }\n    }\n\n    const closeModeSwitchModal = () => {\n        setShowModeSwitchModal(false)\n    }\n\n    // ✅ Enhanced table columns with better error handling\n    const columns = [\n        {\n            Header: \"Shift Name\",\n            accessor: \"name\",\n            sortable: true,\n            Cell: ({ row }) => (\n                <div className=\"d-flex align-items-center\">\n                    <div> {row.original?.name || \"\"}</div>\n                    {row.original.default_shift === 1 ? (\n                        <Badge pill bg=\"info\" className=\"ms-2 ps-badge-12\">\n                            Default\n                        </Badge>\n                    ) : (\n                        <div style={{ width: \"74px\" }}></div>\n                    )}\n                </div>\n            )\n        },\n        {\n            Header: \"Shift Day & Timings\",\n            accessor: \"ShitDayTimings\",\n            sortable: false,\n            Cell: ({ row }) => {\n                const { shift_daywise_data } = row.original\n                let days = []\n\n                try {\n                    const parsed = JSON.parse(shift_daywise_data)\n                    const dayMap = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n                    days = parsed.map((entry) => {\n                        const dayName = dayMap[entry.day - 1] || `Day ${entry.day}`\n                        return (\n                            <div key={entry.day} className=\"ps-shift-dayTime\">\n                                <div className=\"ps-shift-day\">{dayName}</div>\n                                <div className=\"ps-shift-time\">{entry.from_time} - {entry.to_time}</div>\n                            </div>\n                        )\n                    })\n                } catch (err) {\n                    console.error(\"Invalid JSON in shift_daywise_data:\", err)\n                    days = <div className=\"text-danger\">Invalid daywise data</div>\n                }\n\n                return <div className=\"daywiseclass\">{days}</div>\n            },\n        },\n        {\n            Header: (<>  Assigned <br /> Employees </>),\n            accessor: \"employee_count\",\n            Cell: ({ row }) => <>{row.original.employee_count || 0}</>,\n        },\n        {\n            Header: \"Created On\",\n            accessor: \"added_on\",\n        },\n        {\n            Header: \"Action\",\n            Cell: ({ row }) => {\n                const shift = row.original\n                return (\n                    <div className=\"d-flex align-items-center\">\n                        <UncontrolledDropdown className=\"d-inline-block iconBtn bg-white ps-action-dropdown\">\n                            <DropdownToggle tag=\"button\" className=\"p-0 border-0 bg-white\" id=\"dropdownMenuButton\">\n                                <ActionIcon />\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                <DropdownItem id={`expandShiftBtn-${shift.id}`} onClick={() => toggleAccordion(shift.id, shift)}><EditIcon /> Edit\n                                </DropdownItem>\n                                {!shift.default_shift && userHasRights(moduleName.assignShift, \"C\") && (\n                                    <DropdownItem id={`shiftDeleteBtn-${shift.id}`} onClick={() => onClickDelete(shift)} className=\"ps-delete-btn\"><DeletIcon /> Delete\n                                    </DropdownItem>\n                                )}\n                            </DropdownMenu>\n                        </UncontrolledDropdown>\n                    </div>\n                )\n            },\n        },\n    ]\n\n    const isReadOnly = !userHasRights(moduleName.assignShift, \"C\")\n\n    document.title = \"Manage Shifts | Petpooja Payroll\"\n\n    return (\n        <React.Fragment>\n            <Header\n                title=\"Manage Shifts\"\n                currentPage=\"shiftTime\"\n                showUnchangeModal={formik.dirty}\n                onClosedUnsaveModelClick={onClosedUnsaveModelClick}\n                onSaveClick={handleSaveShift}\n                modalConfirmationText=\"You have some unsaved changes, do you want to save them?\"\n            />\n            <div className=\"page-content\">\n                <DeleteModal\n                    show={deleteModal}\n                    onDeleteClick={handleDeleteShift}\n                    onCloseClick={() => {\n                        setDeleteModalData(null)\n                        setDeleteModal(false)\n                    }}\n                    name={deleteModalData?.name}\n                    title={deleteModalData?.title}\n                    description={deleteModalData?.description}\n                    btnLoading={isShiftDelLoading}\n                />\n\n                <div className=\"container-fluid\">\n                    <Card className=\"p-3 mb-2 barrierEnd\">\n                        <CardBody>\n                            <div className=\"Employees-emptyBox\" style={{ height: \"300px\" }}>\n                                <div className=\"text-center\">\n                                    <img\n                                        src={noData || \"/placeholder.svg\"}\n                                        alt=\"no-data\"\n                                        className=\"mb-3\"\n                                        style={{ width: \"150px\", opacity: \"60%\" }}\n                                    />\n                                    <h5>Apologies,</h5>\n                                    <p className=\"mx-lg-5 mt-2 p-0\">For better experience please open this page on web.</p>\n                                </div>\n                            </div>\n                        </CardBody>\n                    </Card>\n\n                    <Row className=\"barrierStart\">\n                        <Col lg={12}>\n                            <Card className=\"card  ps-border ps-rounded-10 shadow-none shift-managment-wrap\">\n                                <CardHeader className=\"ps-border-bottom ps-rounded-top-rl px-4 py-3\" >\n                                    <div className=\"pr-page-title d-flex justify-content-between align-items-center ps-emp-total\">\n                                        <h5>\n                                            Shifts <span>({shifts.length > 0 ? shifts.length : 0})</span>\n                                        </h5>\n\n                                        <div className=\"d-flex\">\n                                            {/* Shift Module Toggle Button */}\n                                            <button \n                                                type=\"button\" \n                                                className=\"ps-btn sm-btn primary-btn me-3\" \n                                                onClick={handleModeSwitchClick}\n                                                disabled={isSwitchingMode}\n                                                title={`Switch to ${currentShiftModuleMode === 1 ? 'Advanced' : 'Simple'} Shift Mode`}\n                                            >\n                                                {isSwitchingMode ? \n                                                    \"Switching...\" : \n                                                    `Switch to ${currentShiftModuleMode === 1 ? 'Advanced' : 'Simple'} Shift`\n                                                }\n                                            </button>\n\n                                            <Link to=\"/shift-assignment\">\n                                                <button type=\"button\" className=\"ps-btn sm-btn primary-btn me-3\" id=\"assign-btn\">\n                                                    Assign Shift\n                                                </button>\n                                            </Link>\n                                            {userHasRights(moduleName.assignShift, \"C\") && (\n                                                <>\n                                                    <button type=\"button\" className=\"ps-btn sm-btn primary-btn\" onClick={workHourFun}>\n                                                        Set Working Hours\n                                                    </button>\n                                                    <button\n                                                        type=\"button\"\n                                                        className=\"ps-btn sm-btn primary-btn ms-3\"\n                                                        id=\"create-btn\"\n                                                        onClick={() => {\n                                                            setshiftDetail([])\n                                                            setIsFirstRowOpen(true)\n                                                            resetAllData()\n                                                            isCreateShiftFun()\n                                                        }}\n                                                    >\n                                                        Create Shift\n                                                    </button>\n                                                </>\n                                            )}\n                                        </div>\n                                    </div>\n                                </CardHeader>\n\n                                <CardBody className=\"py-3\">\n                                    <Col xl={12}>\n                                        {isShiftSuccess ? (\n                                            <MyCustomTable tableName={isMobile ? \"\" : \"ps-static-col1st\"} columns={columns} data={shifts} />\n                                        ) : (\n                                            <div className=\"\">\n                                                <Skeleton count={8} height={60} />\n                                            </div>\n                                        )}\n\n                                        {noShiftYet && shifts.length === 0 && !isFirstRowOpen ? (\n                                            <Table className=\"table-striped align-middle table-nowrap mb-0\">\n                                                <tbody>\n                                                    <tr className=\"\">\n                                                        <td colSpan={5} className=\"ct-td-nodata\">\n                                                            <div className=\"d-flex align-items-center justify-content-center flex-column\">\n                                                                <svg\n                                                                    width=\"58\"\n                                                                    height=\"58\"\n                                                                    viewBox=\"0 0 58 58\"\n                                                                    fill=\"none\"\n                                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                                >\n                                                                    <rect width=\"58\" height=\"58\" rx=\"29\" fill=\"#E3F1FF\" />\n                                                                    <path\n                                                                        d=\"M35.74 34.74L31.12 30.12C31.42 29.74 31.67 29.29 31.86 28.78C32.06 28.24 32.16 27.67 32.16 27.08C32.16 25.67 31.66 24.46 30.68 23.48C29.7 22.5 28.49 22 27.08 22C25.67 22 24.46 22.5 23.48 23.48C22.5 24.46 22 25.67 22 27.08C22 28.49 22.5 29.7 23.48 30.68C24.46 31.66 25.67 32.16 27.08 32.16C27.65 32.16 28.22 32.06 28.76 31.87C29.26 31.69 29.72 31.43 30.12 31.12L34.74 35.74C34.87 35.88 35.04 35.95 35.24 35.95C35.44 35.95 35.6 35.88 35.74 35.74C35.87 35.6 35.94 35.43 35.94 35.23C35.94 35.03 35.87 34.87 35.74 34.74ZM27.08 23.42C28.1 23.42 28.97 23.78 29.67 24.49C30.38 25.19 30.74 26.06 30.74 27.08C30.74 28.1 30.38 28.97 29.67 29.68C28.96 30.39 28.1 30.74 27.08 30.74C26.06 30.74 25.19 30.38 24.49 29.68C23.78 28.97 23.42 28.1 23.42 27.08C23.42 26.06 23.78 25.19 24.49 24.49C25.19 23.78 26.06 23.42 27.08 23.42Z\"\n                                                                        fill=\"#2381D9\"\n                                                                    />\n                                                                </svg>\n                                                                <h5 className=\"mt-2 mb-1\">No Data Found</h5>\n                                                                <p>Try Adjusting the filters again</p>\n                                                            </div>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </Table>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </Col>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    {/* Success created shift modal */}\n                    <Modal isOpen={isModalOpen2} toggle={() => closeModal2()} centered={true} className=\"ct-modal\">\n                        <ModalHeader className=\"modal-title border-bottom p-3\" id=\"myModalLabel\" onClick={() => closeModal2()}>\n                            Shift Created successfully!\n                        </ModalHeader>\n                        <ModalBody className=\"p-3\">\n                            <p>If you'd like, you can assign it to employees now or choose \"Later\".</p>\n                        </ModalBody>\n                        <div className=\"modal-footer border-top p-2\">\n                            <button type=\"button\" className=\"btn w-sm btn-light\" data-bs-dismiss=\"modal\" onClick={() => closeModal2()}>\n                                Later\n                            </button>\n                            <Link to=\"/shift-assignment\">\n                                <button type=\"button\" className=\"btn w-sm btn-blue\">\n                                    Assign Shift\n                                </button>\n                            </Link>\n                        </div>\n                    </Modal>\n\n                    {/* Set working hour sidebar */}\n                    <Offcanvas\n                        isOpen={workHour}\n                        toggle={workHourFun}\n                        direction=\"end\"\n                        className=\"border-bottom custom-offcavas\"\n                        style={{ width: \"500px\" }}\n                    >\n                        <SetWokringHoursForm toggleRightCanvas2={workHourFun} workingHrsDetail={workingHrsData} />\n                    </Offcanvas>\n\n                    <ConfirmationModalNew\n                        show={showModal}\n                        onConfirmClick={formik.handleSubmit}\n                        onCloseClick={closeConfirmationModal}\n                        heading={\"Save Changes?\"}\n                        infoText=\"You have some unsaved changes, do you want to save them?\"\n                        showConfirmBtn={true}\n                        closeBtnTitle=\"Proceed Anyway\"\n                        confirmBtnTitle=\"Yes, Save\"\n                        isConfirmBtnLoading={loading}\n                    />\n\n                    <ConfirmationModalNew\n                        show={showShiftDeleteFail}\n                        onCloseClick={() => {\n                            setShowShiftDeleteFail(false)\n                        }}\n                        heading={deleteModalData?.title}\n                        infoText={deleteModalData?.description}\n                        showConfirmBtn={false}\n                        closeBtnTitle=\"Ok\"\n                        isConfirmBtnLoading={loading}\n                    />\n\n                    <ConfirmationModalNew\n                        show={isconform}\n                        onConfirmClick={() => handleSave(modelShiftId, 1)}\n                        onCloseClick={() => setConform(false)}\n                        heading={\"Confirm Occasional Working Days\"}\n                        infoText=\"Are you sure you want to save with the selected occasional working days?\"\n                        showConfirmBtn={true}\n                        closeBtnTitle=\"Cancel\"\n                        confirmBtnTitle=\"Confirm\"\n                        isConfirmBtnLoading={loading}\n                    />\n\n                    <ShiftFormOffcanvas\n                        isOpen={isCreateShift}\n                        toggle={isCreateShiftFun}\n                        isEdit={false}\n                        isFirstRowOpen={isFirstRowOpen}\n                        formik={formik}\n                        timeValues={timeValues}\n                        initialFromTimes={initialFromTimes}\n                        initialToTimes={initialToTimes}\n                        commonDiffHours={commonDiffHours}\n                        occasionalVisible={occasionalVisible}\n                        occasionalDayVisible={occasionalDayVisible}\n                        weekOffChecked={weekOffChecked}\n                        selectedWeeksOfMonths={selectedWeeksOfMonths}\n                        handleFromTimeChange={handleFromTimeChange}\n                        handleFromTimeClose={handleFromTimeClose}\n                        handleToTimeChange={handleToTimeChange}\n                        handleToTimeClose={handleToTimeClose}\n                        handleOccasionalWorkingCheckbox={handleOccasionalWorkingCheckbox}\n                        handleWeekOffToggle={handleWeekOffToggle}\n                        handleOccasionalWeekSelection={handleOccasionalWeekSelection}\n                        isReadOnly={isReadOnly}\n                        loading={loading}\n                        error={error}\n                        daysOfWeek={daysOfWeek}\n                    />\n\n                    <ShiftFormOffcanvas\n                        isOpen={editShift}\n                        toggle={() => editShiftFun()}\n                        isEdit={true}\n                        shifts={editShiftData ? [editShiftData] : []}\n                        formik={formik}\n                        timeValues={timeValues}\n                        initialFromTimes={initialFromTimes}\n                        initialToTimes={initialToTimes}\n                        commonDiffHours={commonDiffHours}\n                        occasionalVisible={occasionalVisible}\n                        occasionalDayVisible={occasionalDayVisible}\n                        weekOffChecked={weekOffChecked}\n                        selectedWeeksOfMonths={selectedWeeksOfMonths}\n                        handleFromTimeChange={handleFromTimeChange}\n                        handleFromTimeClose={handleFromTimeClose}\n                        handleToTimeChange={handleToTimeChange}\n                        handleToTimeClose={handleToTimeClose}\n                        handleOccasionalWorkingCheckbox={handleOccasionalWorkingCheckbox}\n                        handleWeekOffToggle={handleWeekOffToggle}\n                        handleOccasionalWeekSelection={handleOccasionalWeekSelection}\n                        isReadOnly={isReadOnly}\n                        loading={loading}\n                        error={error}\n                        daysOfWeek={daysOfWeek}\n                        modelShiftId={modelShiftId}\n                    />\n\n                    {/* Shift Module Switch Confirmation Modal */}\n                    <ConfirmationModalNew\n                        show={showModeSwitchModal}\n                        onConfirmClick={() => handleModeSwitch(1)}\n                        onCloseClick={closeModeSwitchModal}\n                        heading=\"Switch to Simple Shift Mode?\"\n                        infoText=\"This will assign all employees to the default shift and clear all roster and week-off data. This action cannot be undone. Are you sure you want to proceed?\"\n                        showConfirmBtn={true}\n                        closeBtnTitle=\"Cancel\"\n                        confirmBtnTitle=\"Yes, Switch\"\n                        isConfirmBtnLoading={isSwitchingMode}\n                    />\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nfunction parseTimeWithDay(baseDate, timeStr, dayOffset = 0) {\n    const [hours, minutes] = timeStr.split(\":\").map(Number);\n    const date = new Date(baseDate);\n    date.setDate(date.getDate() + dayOffset);\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n}\n\nfunction validateShiftOverlaps(shiftArray) {\n    const baseDate = new Date(2024, 0, 1);\n\n    // Sort shifts by day (1 = Monday, 7 = Sunday)\n    const sortedShifts = shiftArray.sort((a, b) => a.day - b.day);\n    sortedShifts.push(sortedShifts[0]); // adding sunday after saturday to complete loop\n\n    const parsedShifts = [];\n\n    for (let i = 0; i < sortedShifts.length; i++) {\n        const shift = sortedShifts[i];\n\n        const { day, from_time, to_time } = shift;\n\n        const startTime = from_time.split(\":\").map(Number);\n        const endTime = to_time.split(\":\").map(Number);\n\n        const isCrossDay = (startTime[0] * 60 + startTime[1]) > (endTime[0] * 60 + endTime[1]);\n\n        const startDate = parseTimeWithDay(baseDate, from_time, (i === 7 ? day+7 : day) - 1);\n        const endDate = parseTimeWithDay(baseDate, to_time, (i === 7 ? day+7 : day) - 1 + (isCrossDay ? 1 : 0));\n\n        parsedShifts.push({ day, startDate, endDate });\n    }\n\n    // Compare each day's shift end to next day's shift start\n    for (let i = 0; i < parsedShifts.length - 1; i++) {\n        const current = parsedShifts[i];\n        const next = parsedShifts[i + 1];\n\n        if (current.endDate > next.startDate) {\n            return next.day; // here we will return 1 to 7 , if any\n        }\n    }\n\n    return 0;\n}\n\n\nexport default CommonShiftTime\n","structuredPatch":[{"oldStart":1015,"oldLines":10,"newStart":1015,"newLines":10,"lines":["                 // Show success message","                 toast.success(response.message || `Successfully switched to ${newMode === 1 ? 'Simple' : 'Advanced'} Shift mode`)","                 ","-                // Optional: Trigger a page refresh to ensure all components reflect the new mode","-                // setTimeout(() => {","-                //     window.location.reload();","-                // }, 1500);","+                // Trigger a page refresh to ensure all components reflect the new mode","+                setTimeout(() => {","+                    window.location.reload();","+                }, 1000);","             } else {","                 throw new Error(response.message || 'Failed to switch mode')","             }"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"9f5dcb6f-fa3b-470b-8817-d79b71de0766","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_01TF3QihAStnHUhJBe3ENaNd","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01AqqB48Y5sLvCiAYFrA1aHK","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed"},{"id":"2","content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed"},{"id":"3","content":"Identify the best approach to refresh layout menu after mode switch","status":"completed"},{"id":"4","content":"Implement solution to update layout menu visibility","status":"completed"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":452,"cache_read_input_tokens":65038,"output_tokens":174,"service_tier":"standard"}},"requestId":"req_011CS1zz1R3TgU1QbNDrtrxp","uuid":"70ccffdc-7796-44d0-bc14-5c5d06674729"}
{"parentUuid":"70ccffdc-7796-44d0-bc14-5c5d06674729","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01AqqB48Y5sLvCiAYFrA1aHK","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"2b64ad75-c427-49b6-830a-36333b75f5c2","timestamp":"2025-08-12T11:38:51.991Z","toolUseResult":{"oldTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"completed","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"in_progress","id":"4"}],"newTodos":[{"content":"Analyze current shift mode switching implementation in CommonShiftTime.js","status":"completed","id":"1"},{"content":"Understand how LayoutMenuData.js determines menu visibility based on shift mode","status":"completed","id":"2"},{"content":"Identify the best approach to refresh layout menu after mode switch","status":"completed","id":"3"},{"content":"Implement solution to update layout menu visibility","status":"completed","id":"4"}]}}
{"parentUuid":"2b64ad75-c427-49b6-830a-36333b75f5c2","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"assistant","timestamp":"2025-08-12T11:38:51.991Z","message":{"id":"msg_012tcPZ9VXW9XZTxf9wqxxBJ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfect! I've successfully implemented the solution. Here's what I changed:\n\n## Summary of Changes\n\n**File Modified**: `src/pages/ShiftManagement/CommonShiftTime.js`\n\n**Change Made**: \n- Uncommented the `window.location.reload()` code on lines 1018-1021\n- Reduced the timeout from 1500ms to 1000ms for faster response\n- Removed the \"Optional:\" comment since this is now the implemented solution\n\n## How It Works\n\n1. **User switches shift mode** → `handleModeSwitch()` function is called\n2. **API call succeeds** → Session storage is updated with new mode\n3. **Success toast is shown** → User sees confirmation message  \n4. **Page reloads after 1 second** → All components remount, including LayoutMenuData.js\n5. **Layout menu updates** → Menu items visibility reflects the new shift mode\n\n## Expected Behavior\n\n- When switching from **Simple (mode 1) to Advanced (mode 2)**:\n  - \"Week Off\" menu item will be hidden (`isVisible: shiftModuleMode === 1` becomes false)\n  - \"Shift Assignment\" menu item will be shown (`isVisible: shiftModuleMode === 2` becomes true)\n\n- When switching from **Advanced (mode 2) to Simple (mode 1)**:\n  - \"Week Off\" menu item will be shown (`isVisible: shiftModuleMode === 1` becomes true)\n  - \"Shift Assignment\" menu item will be hidden (`isVisible: shiftModuleMode === 2` becomes false)\n\nThe solution follows the project's guidelines for simplicity and minimal code changes. The page refresh ensures that all components, especially the layout menu, properly reflect the updated shift module mode."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":216,"cache_read_input_tokens":65490,"output_tokens":407,"service_tier":"standard"}},"requestId":"req_011CS1zzPyMfoL8G1EAospqD","uuid":"09838195-637d-4c28-851c-a77739863300"}
{"parentUuid":"09838195-637d-4c28-851c-a77739863300","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":"Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."},"isMeta":true,"uuid":"8b7269d5-4f91-460a-ba2d-199fdde63fa1","timestamp":"2025-08-12T11:39:30.129Z"}
{"parentUuid":"8b7269d5-4f91-460a-ba2d-199fdde63fa1","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":"<command-name>/exit</command-name>\n            <command-message>exit</command-message>\n            <command-args></command-args>"},"uuid":"94d671e8-fc95-42a2-81e6-5572740d05c2","timestamp":"2025-08-12T11:39:30.113Z"}
{"parentUuid":"94d671e8-fc95-42a2-81e6-5572740d05c2","isSidechain":false,"userType":"external","cwd":"/home/harshank/repos/payroll","sessionId":"f9a14419-c545-458b-b668-3ec38ce0c07a","version":"1.0.73","gitBranch":"master","type":"user","message":{"role":"user","content":"<local-command-stdout>(no content)</local-command-stdout>"},"uuid":"188429f8-85a5-4d9e-95a5-da86db06d080","timestamp":"2025-08-12T11:39:30.113Z"}
